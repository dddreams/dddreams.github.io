<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhiheng&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/287d1512b5f4a1b17e98d4a1aaa7f45f</icon>
  <subtitle>喜于分享，勤于积累</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dddreams.github.io/"/>
  <updated>2021-02-04T07:51:39.801Z</updated>
  <id>https://dddreams.github.io/</id>
  
  <author>
    <name>Shure</name>
    <email>dzhsdreams@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql密码安全策略配置</title>
    <link href="https://dddreams.github.io/210204-Mysql%E5%AF%86%E7%A0%81%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE.html"/>
    <id>https://dddreams.github.io/210204-Mysql密码安全策略配置.html</id>
    <published>2021-02-04T06:49:39.000Z</published>
    <updated>2021-02-04T07:51:39.801Z</updated>
    
    <content type="html"><![CDATA[<p>近些年来，网络安全相应的法律法规在逐步完善，网络安全等级保护制度在《网络安全法》的正式实施后，得到大力推进。很多公司、单位，逐渐认识到网络安全等级保护的重要性，为了落实网络安全等级保护工作，我所在的项目最近也做了一次等保的测评，下面是针对 MySQL 数据库相关的一些整改配置。</p><blockquote><p>Tips：示例是以 Mysql 5.7 为例</p></blockquote><h2 id="密码策略"><a href="#密码策略" class="headerlink" title="密码策略"></a>密码策略</h2><p>首先登录 Mysql 查看目前数据库的密码策略<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'validate_password%'</span>;</span><br></pre></td></tr></table></figure></p><p>如果出现 <code>Empty set (0.01 sec)</code> 的字样，说明你的 Mysql 还未安装 <code>validate_password</code> 的插件。查看插件列表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> plugins;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/02/04/5IgGol6d9bTfkFC.png" alt="图一" title>                </div>                <div class="image-caption">图一</div>            </figure><p>如果没有这一项，说明确实没有安装<code>validate_password</code>插件。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>要使服务器可用，插件库文件必须位于 MySQL 插件目录中(由plugin_dir系统变量命名的目录)。如果需要，通过在服务器启动时设置 plugin_dir 的值来配置插件目录位置。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'plugin_dir'</span>;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/02/04/kHz2YjrEyGQ6J3P.png" alt="图二" title>                </div>                <div class="image-caption">图二</div>            </figure><p>插件库的文件名是 validate_password.文件名后缀根据平台的不同而不同(.so 是Unix和类Linux系统，.dll是Windows系统)。要在服务器启动时加载插件，可以在配置文件中使用 <code>plugin-load-add</code> 参数来命名包含它的库文件。修改配置文件<code>my.cnf</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">plugin-load-add</span>=validate_password.so</span><br><span class="line"><span class="comment">#服务器在启动时加载插件，并防止在服务器运行时删除插件。</span></span><br><span class="line"><span class="attribute">validate-password</span>=FORCE_PLUS_PERMANENT</span><br></pre></td></tr></table></figure></p><p>修改 my.cnf 之后，重启服务器以使新设置生效。或者，要在运行时注册插件，可以使用以下命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="keyword">install</span> <span class="keyword">plugin</span> validate_password <span class="keyword">soname</span> <span class="string">'validate_password.so'</span>;</span><br></pre></td></tr></table></figure></p><p>然后在次查看插件列表，就会出现图一中的那一项 <code>validate_password</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>再次执行查看密码策略的命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'validate_password%'</span>;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/02/04/Y4I5nLstzM9ClmH.png" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><p><code>validate_password_check_user_name</code>：设置为ON的时候表示能将密码设置成当前用户名。<br><code>validate_password_dictionary_file</code>：用于检查密码的字典文件的路径名。<br><code>validate_password_length</code>：所需密码的最小长度。<br><code>validate_password_mixed_case_count</code>：默认值为1，如果密码策略是中等或更强的，限制小写字符和大写字符个数。<br><code>validate_password_number_count</code>：如果密码策略是中等或更强的，要求密码具有数字的个数。<br><code>validate_password_policy</code>： 默认值为1, 密码强度等级 [LOW:0| MEDIUM:1 | STRONG:2]<br><code>validate_password_special_char_count</code> : 默认值为1，限制特殊字符个数<br>其中，validate_password_policy<br>0/LOW：只检查长度。<br>1/MEDIUM：检查长度、数字、大小写、特殊字符。<br>2/STRONG：检查长度、数字、大小写、特殊字符字典文件。</p><p>可以使用一下命令修改上述值：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure></p><p>也可以在配置文件中直接配置：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">validate_password_policy</span>=1</span><br><span class="line"><span class="attribute">validate_password_length</span>=8</span><br></pre></td></tr></table></figure></p><h2 id="参考和相关链接"><a href="#参考和相关链接" class="headerlink" title="参考和相关链接"></a>参考和相关链接</h2><p>mysql 5.7安装密码校验插件validate_password：<a href="https://www.cnblogs.com/alonely/p/10927541.html" target="_blank" rel="noopener">https://www.cnblogs.com/alonely/p/10927541.html</a></p><p>MYSQL57密码策略修改：<a href="https://www.cnblogs.com/zhi-leaf/p/5994478.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhi-leaf/p/5994478.html</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近些年来，网络安全相应的法律法规在逐步完善，网络安全等级保护制度在《网络安全法》的正式实施后，得到大力推进。很多公司、单位，逐渐认识到网络安全等级保护的重要性，为了落实网络安全等级保护工作，我所在的项目最近也做了一次等保的测评，下面是针对 MySQL 数据库相关的一些整改配
      
    
    </summary>
    
      <category term="Mysql" scheme="https://dddreams.github.io/categories/Mysql/"/>
    
    
      <category term="运维" scheme="https://dddreams.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Mysql" scheme="https://dddreams.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-集成Swagger2文档生成</title>
    <link href="https://dddreams.github.io/210127-SpringBoot-%E9%9B%86%E6%88%90Swagger2%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90.html"/>
    <id>https://dddreams.github.io/210127-SpringBoot-集成Swagger2文档生成.html</id>
    <published>2021-01-27T14:26:00.000Z</published>
    <updated>2021-01-27T09:02:57.732Z</updated>
    
    <content type="html"><![CDATA[<p>随着前后端分离和微服务架构的流行，甚至有些公司强制使用微服务架构，在提高效率同时，问题也随之而来。通常我们的一个RESTful API，会对应不同的开发者，Android，IOS，Web，小程序等不同团队研发人员，显然沟通成本成倍的增长，一般我们都会通过共享文档来维护这些 API ，但随着项目中 API 越来越多，版本升级越多，就会造成文档维护不及时或者无人维护的问题。如果你所在团队也正在面临这样的问题，那么今天我们一起来学习文档神器 Swagger。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Swagger 是一款 RESTful 接口的文档在线自动生成外加调试功能的软件。可以将项目的所有接口在一个UI界面上展示出来，同时表明了这个接口的用途，接口需要的参数是什么类型参数是否必须，输入了参数可以直接测试接口类似postman的功能，会显示接口请求的状态码和返回的数据结构。</p><p>那么后端开发人员只需要在代码中添加几个注解，就会生成一套标准的文档，而且随着代码的变动也随之更新，这样减少了单独维护文档成本，也减少了团队之间的沟通成本，接下来我们来看怎么将 Swagger 集成到 Spring boot 中。</p><h2 id="加依赖"><a href="#加依赖" class="headerlink" title="加依赖"></a>加依赖</h2><p>需要加入 swagger2 和 swagger-ui 的包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="写配置"><a href="#写配置" class="headerlink" title="写配置"></a>写配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>注意：在生产环境将此配置设置为 false </strong></p><p>因为使用原生的 swagger，需要额外加入swagger 的配置类<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@EnableSwagger2</span></span><br><span class="line"><span class="variable">@ConditionalOnProperty</span>(name = <span class="string">"swagger.enable"</span>,  havingValue = <span class="string">"true"</span>)</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="selector-class">.apiInfo</span>(apiInfo())</span><br><span class="line">                <span class="selector-class">.select</span>()</span><br><span class="line">                <span class="selector-class">.apis</span>(RequestHandlerSelectors.basePackage(<span class="string">"com.shure.swagger2"</span>))</span><br><span class="line">                <span class="selector-class">.paths</span>(PathSelectors.any())</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置在线文档的基本信息</span></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">ApiInfo</span> <span class="selector-tag">apiInfo</span>() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ApiInfoBuilder</span>()</span><br><span class="line">                <span class="selector-class">.title</span>(<span class="string">"springboot利用swagger构建api文档"</span>)</span><br><span class="line">                <span class="selector-class">.description</span>(<span class="string">"用户管理接口文档"</span>)</span><br><span class="line">                <span class="selector-class">.termsOfServiceUrl</span>(<span class="string">"https://dddreams.github.io/"</span>)</span><br><span class="line">                <span class="selector-class">.version</span>(<span class="string">"0.1"</span>)</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="加注解"><a href="#加注解" class="headerlink" title="加注解"></a>加注解</h2><p>在启动类加 <code>@EnableSwagger2</code>注解，或者在上面 <code>SwaggerConfig</code> 类上加入此注解。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableSwagger2</span></span><br><span class="line">public class SpringBootSwagger2Application &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(SpringBootSwagger2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>OK，完成上面三步，已经可以使用 swagger 了，启动后访问，<code>http://localhost:8080/swagger-ui.html</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/01/27/GDUCxPmvXIkWhoa.png" alt="swagger-ui" title>                </div>                <div class="image-caption">swagger-ui</div>            </figure><h3 id="编写业务接口"><a href="#编写业务接口" class="headerlink" title="编写业务接口"></a>编写业务接口</h3><p>新建用户的实体类 UserEntity，为了简化代码我们会引入 lombok 的插件。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="variable">@ApiModel</span>(description=<span class="string">"用户实体"</span>)</span><br><span class="line">public class UserEntity &#123;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(<span class="string">"用户编号"</span>)</span><br><span class="line">    private Integer id;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(<span class="string">"用户姓名"</span>)</span><br><span class="line">    private String name;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(<span class="string">"用户年龄"</span>)</span><br><span class="line">    private int age;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(<span class="string">"用户性别"</span>)</span><br><span class="line">    private boolean gender;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(<span class="string">"住址"</span>)</span><br><span class="line">    private String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建用户相关的 API 接口<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = <span class="meta-string">"1-用户管理"</span>)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/user"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟users信息的存储</span></span><br><span class="line">    static Map&lt;Integer, UserEntity&gt; users = Collections.synchronizedMap(new HashMap&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/list"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"获取用户列表"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserEntity&gt; list()&#123;</span><br><span class="line">        List&lt;UserEntity&gt; us = new ArrayList&lt;&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> us;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/get/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"获取用户详细信息"</span>, notes = <span class="meta-string">"根据用户id来获取用户详细信息"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> UserEntity getUser(<span class="meta">@PathVariable</span> Integer id) &#123;</span><br><span class="line">        <span class="keyword">return</span> users.<span class="keyword">get</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(<span class="meta-string">"/saveOrUpdate"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"创建用户"</span>, notes = <span class="meta-string">"根据User对象创建用户"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String postUser(<span class="meta">@RequestBody</span> UserEntity user) &#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(<span class="meta-string">"/del/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"删除用户"</span>, notes = <span class="meta-string">"根据用户的id来指定删除对象"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String deleteUser(<span class="meta">@PathVariable</span> Integer id) &#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="查看接口文档"><a href="#查看接口文档" class="headerlink" title="查看接口文档"></a>查看接口文档</h3><p>再来看看 swagger 的页面会发生什么变化。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/01/27/HdwOWS7IRvzpZAi.png" alt="swagger-ui" title>                </div>                <div class="image-caption">swagger-ui</div>            </figure><p>展开标签后，会看到每个接口的详细信息，并且可以在线调试，返回结果的数据结构也一目了然。还包括实体的信息也会在文档中展现。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/01/27/dNXwRZj8AramJtl.png" alt="swagger-ui" title>                </div>                <div class="image-caption">swagger-ui</div>            </figure><h2 id="接口及方法的分类排序"><a href="#接口及方法的分类排序" class="headerlink" title="接口及方法的分类排序"></a>接口及方法的分类排序</h2><p>随着业务的增长，API 接口数量的增长，实际使用中我们会发现找一个接口会非常困难，这就考虑为接口和方法进行分类排序，方便查找。</p><h3 id="接口的分类"><a href="#接口的分类" class="headerlink" title="接口的分类"></a>接口的分类</h3><p>对于接口的分类，swagger 提供了 tags 的参数，只需在 Controller 的 <code>@Api</code> 注解上加参数 tags 即可。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Api</span>(tags = <span class="string">"用户管理"</span>)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Api</span>(tags = &#123;<span class="string">"商品管理"</span>, <span class="string">"..."</span>&#125;)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/goods"</span>)</span><br><span class="line">public class GoodsController &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以将同类的接口，指定在 tags 中，文档中就会出现一个分类中。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/01/27/qOiw9pfHyjoJcYE.png" alt="swagger-ui" title>                </div>                <div class="image-caption">swagger-ui</div>            </figure></p><h3 id="接口的排序"><a href="#接口的排序" class="headerlink" title="接口的排序"></a>接口的排序</h3><p>对于接口的排序，swagger 默认是根据字母顺序排的，并且只提供了这一种排序方式，我们可以投机取巧在 tags 参数的前面添加数字让其按顺序排列。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Api</span>(tags = <span class="string">"1-用户管理"</span>)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Api</span>(tags = &#123;<span class="string">"2-商品管理"</span>&#125;)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/goods"</span>)</span><br><span class="line">public class GoodsController &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/01/27/ZPpGE2DKBl5J6FR.png" alt="swagger-ui" title>                </div>                <div class="image-caption">swagger-ui</div>            </figure><h3 id="方法的排序"><a href="#方法的排序" class="headerlink" title="方法的排序"></a>方法的排序</h3><p>方式一，swagger 默认是根据字母顺序排的，可以通过以下方式：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.didispace.com/Fj283ftc5WXw7yCH6UFl7VvCshrC" alt="图片来源：程序猿DD" title>                </div>                <div class="image-caption">图片来源：程序猿DD</div>            </figure><br>图片来源于 程序猿DD 的博客：<a href="https://blog.didispace.com/spring-boot-learning-21-2-4/" target="_blank" rel="noopener">https://blog.didispace.com/spring-boot-learning-21-2-4/</a></p><p>方式二，引入 spring4all 社区开源的 <code>swagger-spring-boot-starter</code><br>github地址：<a href="https://github.com/SpringForAll/spring-boot-starter-swagger" target="_blank" rel="noopener">https://github.com/SpringForAll/spring-boot-starter-swagger</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spring4all<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>添加配置：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger.ui-config.operations-sorter</span>=alpha</span><br></pre></td></tr></table></figure></p><p>方法的排序 swagger 提供了两个配置，<code>alpha</code>和<code>method</code>，默认为<code>alpha</code>。</p><p>方式三，引入 knife4j 开源的，<code>knife4j-spring-ui</code>基于bootstrap的ui框架。</p><p>github地址：<a href="https://github.com/xiaoymin/swagger-bootstrap-ui" target="_blank" rel="noopener">https://github.com/xiaoymin/swagger-bootstrap-ui</a></p><p>gitee地址：<a href="https://gitee.com/xiaoym/knife4j/tree/master/swagger-bootstrap-ui" target="_blank" rel="noopener">https://gitee.com/xiaoym/knife4j/tree/master/swagger-bootstrap-ui</a><br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;lastVersion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>使用该方式需要在 <code>SwaggerConfig</code> 配置类上添加 <code>@EnableSwaggerBootstrapUI</code>注解，然后在方法上添加<code>@ApiOperationSupport(order = 1)</code>注解，并指定 order 的值。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/list"</span>)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = <span class="meta-string">"获取用户列表"</span>)</span></span><br><span class="line"><span class="meta">@ApiOperationSupport(order = 1)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserEntity&gt; list()&#123;</span><br><span class="line">    List&lt;UserEntity&gt; us = new ArrayList&lt;&gt;(users.values());</span><br><span class="line">    <span class="keyword">return</span> us;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/get/&#123;id&#125;"</span>)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = <span class="meta-string">"获取用户详细信息"</span>, notes = <span class="meta-string">"根据用户id来获取用户详细信息"</span>)</span></span><br><span class="line"><span class="meta">@ApiOperationSupport(order = 2)</span></span><br><span class="line"><span class="keyword">public</span> UserEntity getUser(<span class="meta">@PathVariable</span> Integer id) &#123;</span><br><span class="line">    <span class="keyword">return</span> users.<span class="keyword">get</span>(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动程序，访问：<code>http://localhost:8080/doc.html</code>，界面长这个样子。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/01/27/fEq8aKducMCW7gh.png" alt="QQ截图20210127164051.png" title>                </div>                <div class="image-caption">QQ截图20210127164051.png</div>            </figure></p><p><strong>注意：需要在个性化设置中开启  <code>启用SwaggerBootstrapUi提供的增强功能</code></strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/01/27/gUmf87BbEtMoHa4.png" alt="QQ截图20210127164429.png" title>                </div>                <div class="image-caption">QQ截图20210127164429.png</div>            </figure></p><p>这样你就会发现，方法的排序按照我们设置的 <code>order</code> 排序了。</p><h3 id="参数的排序"><a href="#参数的排序" class="headerlink" title="参数的排序"></a>参数的排序</h3><p>参数的排序比较简单，只需在实体字段的注解上加 <code>position</code> 属性，参数就可以根据设置的<code>position</code>值进行排序了。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="variable">@ApiModel</span>(description=<span class="string">"商品实体"</span>)</span><br><span class="line">public class GoodsEntity &#123;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(value = <span class="string">"商品编号"</span>, position = <span class="number">1</span>)</span><br><span class="line">    private Long id;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(value = <span class="string">"商品名称"</span>, position = <span class="number">2</span>)</span><br><span class="line">    private String name;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(value = <span class="string">"商品描述"</span>, position = <span class="number">3</span>)</span><br><span class="line">    private String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考和相关链接"><a href="#参考和相关链接" class="headerlink" title="参考和相关链接"></a>参考和相关链接</h2><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-swagger2" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-swagger2</a></p><p>Swagger官网：<a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></p><p>Swagger接口分类与各元素排序问题详解：<a href="https://blog.didispace.com/spring-boot-learning-21-2-4/" target="_blank" rel="noopener">https://blog.didispace.com/spring-boot-learning-21-2-4/</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着前后端分离和微服务架构的流行，甚至有些公司强制使用微服务架构，在提高效率同时，问题也随之而来。通常我们的一个RESTful API，会对应不同的开发者，Android，IOS，Web，小程序等不同团队研发人员，显然沟通成本成倍的增长，一般我们都会通过共享文档来维护这些 
      
    
    </summary>
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-集成Quartz作业调度</title>
    <link href="https://dddreams.github.io/210125-SpringBoot-%E9%9B%86%E6%88%90Quartz%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6.html"/>
    <id>https://dddreams.github.io/210125-SpringBoot-集成Quartz作业调度.html</id>
    <published>2021-01-25T08:41:46.000Z</published>
    <updated>2021-01-26T06:30:22.058Z</updated>
    
    <content type="html"><![CDATA[<p>在说 quartz 之前，我们先回顾一下 spring 的定时任务，使用相当简单，默认集成在 spring boot 中，所以在 spring boot 项目中无需额外添加依赖，无需配置，只需要加个注解就可以了，当然也可以实现动态添加删除定时任务，详情前往上一篇博文<a href="https://dddreams.github.io/210122-SpringBoot-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html">SpringBoot-定时任务</a>，那为什么要使用 quartz 呢，主要还是考虑分布式的应用，下面我们就来看一下 spring boot 是怎么集成 quartz 的。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>简单介绍下 quartz，Quartz是OpenSymphony开源组织在任务调度领域的一个开源项目，完全基于Java实现。作为一个优秀的开源调度框架，Quartz具有以下特点：</p><ul><li>（1）强大的调度功能，例如支持丰富多样的调度方法，可以满足各种常规及特殊需求；</li><li>（2）灵活的应用方式，例如支持任务和调度的多种组合方式，支持调度数据的多种存储方式；</li><li>（3）分布式和集群能力。</li></ul><blockquote><p>Tips<br>还记得 spring boot 的三板斧吗？加依赖，写配置，添注解</p></blockquote><h2 id="加依赖"><a href="#加依赖" class="headerlink" title="加依赖"></a>加依赖</h2><p>引入 spring-boot-starter-quartz 的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--quartz定时任务依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="写配置"><a href="#写配置" class="headerlink" title="写配置"></a>写配置</h2><p>无需配置</p><h2 id="加注解"><a href="#加注解" class="headerlink" title="加注解"></a>加注解</h2><p>无需注解</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们需要新建一个 QuartzService 的类，由于代码较长，在这里就不贴了，想看具体代码，请前往<a href="https://github.com/dddreams/learn-spring-boot/blob/master/spring-boot-quartz/src/main/java/com/shure/quartz/QuartzService.java" target="_blank" rel="noopener">QuartzService.java</a>。quartz 的 Job 实现方式很多，不一定要用这种方式，只是笔者认为这是一种比较简单的实现。</p><p>新加一个测试类 QuartzTest<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzTest</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(QuartzTest.class);</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> QuartzService quartzService;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quartzTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"添加定时任务"</span>);</span><br><span class="line">        <span class="keyword">String</span> jobName = <span class="string">"test-1"</span>;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"test"</span>, <span class="string">"测试任务执行"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"name"</span>, jobName);</span><br><span class="line">        quartzService.deleteJob(jobName, <span class="string">"test"</span>);</span><br><span class="line">        quartzService.addJob(TestQuartz.class, jobName, <span class="string">"test"</span>, <span class="string">"0 */2 * * * ?"</span>, <span class="built_in">map</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建 Job 类，需要继承 QuartzJobBean<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestQuartz</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> <span class="type">Logger</span> logger = <span class="type">LoggerFactory</span>.getLogger(<span class="type">TestQuartz</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void executeInternal(<span class="type">JobExecutionContext</span> jobExecutionContext) <span class="keyword">throws</span> <span class="type">JobExecutionException</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> formatter = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        logger.info(<span class="string">"任务开始执行:"</span> + formatter.format(<span class="type">System</span>.currentTimeMillis()));</span><br><span class="line">        <span class="type">JobDataMap</span> jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class="line">        <span class="type">String</span> test = jobDataMap.get(<span class="string">"test"</span>).toString();</span><br><span class="line">        <span class="type">String</span> jobName = jobDataMap.get(<span class="string">"name"</span>).toString();</span><br><span class="line">        logger.info(test + <span class="string">":"</span> + jobName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动，运行 Test 类，便可添加一个任务，创建 Job 时需要的参数可以通过 <code>JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</code>来获取，这样就完成了一个定时任务功能。</p><h2 id="Quartz-集群使用"><a href="#Quartz-集群使用" class="headerlink" title="Quartz 集群使用"></a>Quartz 集群使用</h2><p>一个 Quartz 集群中的每个节点是一个独立的 Quartz 应用，它又管理着其他的节点。这就意味着你必须对每个节点分别启动或停止。Quartz 集群中，独立的 Quartz 节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一 Quartz 应用的。</p><p>因为 Quartz 集群依赖于数据库，所以必须首先创建 Quartz 数据库表，Quartz 发布包中包括了所有被支持的数据库平台的SQL脚本。这些SQL脚本存放于 <code>&lt;quartz_home&gt;/docs/dbTables</code> 目录下，总共12张表，不同版本，表个数可能不同。下面是具体表的说明：</p><ul><li>qrtz_blob_triggers : 以Blob 类型存储的触发器。</li><li>qrtz_calendars：存放日历信息， quartz可配置一个日历来指定一个时间范围。</li><li>qrtz_cron_triggers：存放cron类型的触发器。</li><li>qrtz_fired_triggers：存放已触发的触发器。</li><li>qrtz_job_details：存放一个jobDetail信息。</li><li>qrtz_job_listeners：job监听器。</li><li>qrtz_locks： 存储程序的悲观锁的信息(假如使用了悲观锁)。</li><li>qrtz_paused_trigger_graps：存放暂停掉的触发器。</li><li>qrtz_scheduler_state：调度器状态。</li><li>qrtz_simple_triggers：简单触发器的信息。</li><li>qrtz_trigger_listeners：触发器监听器。</li><li>qrtz_triggers：触发器的基本信息。</li></ul><p>接下来，新建 quartz.yml 的配置文件，来覆盖默认的配置。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org:</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">jobStore:</span></span><br><span class="line">      <span class="attr">useProperties:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">tablePrefix:</span> <span class="string">qrtz_</span></span><br><span class="line">      <span class="comment"># 开启集群模式</span></span><br><span class="line">      <span class="attr">isClustered:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 集群实例检测时间间隔 ms</span></span><br><span class="line">      <span class="attr">clusterCheckinInterval:</span> <span class="number">5000</span></span><br><span class="line">      <span class="comment"># misfire 任务的超时阈值 ms</span></span><br><span class="line">      <span class="attr">misfireThreshold:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">txIsolationLevelReadCommitted:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">class:</span> <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line">      <span class="attr">driverDelegateClass:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">scheduler:</span></span><br><span class="line">      <span class="attr">instanceId:</span> <span class="string">AUTO</span></span><br><span class="line">      <span class="attr">rmi.export:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">rmi.proxy:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">wrapJobExecutionInUserTransaction:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 工作线程的线程池设置</span></span><br><span class="line">    <span class="attr">threadPool:</span></span><br><span class="line">      <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line">      <span class="attr">threadCount:</span> <span class="number">25</span></span><br><span class="line">      <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>这样 Quartz 集群就可以实现了。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="1、Quartz-触发时间配置的三种方式"><a href="#1、Quartz-触发时间配置的三种方式" class="headerlink" title="1、Quartz 触发时间配置的三种方式"></a>1、Quartz 触发时间配置的三种方式</h3><ul><li>cron 方式：采用cronExpression表达式配置时间。</li><li>simple 方式：和JavaTimer差不多，可以指定一个开始时间和结束时间外加一个循环时间。</li><li>calendars 方式：可以和cron配合使用，用cron表达式指定一个触发时间规律，用calendar指定一个范围。</li></ul><p><strong>注意：cron方式需要用到的4张数据表： qrtz_triggers，qrtz_cron_triggers，qrtz_fired_triggers，qrtz_job_details</strong></p><h3 id="2、使用-quartz-遇到的问题"><a href="#2、使用-quartz-遇到的问题" class="headerlink" title="2、使用 quartz 遇到的问题"></a>2、使用 quartz 遇到的问题</h3><h4 id="2-1、在定时任务执行中-service-Autowired-注解不进来"><a href="#2-1、在定时任务执行中-service-Autowired-注解不进来" class="headerlink" title="2.1、在定时任务执行中 service @Autowired 注解不进来"></a>2.1、在定时任务执行中 service @Autowired 注解不进来</h4><p>创建 JobFactory 的 Bean，并在 SchedulerConfig 中添加到 SchedulerFactoryBean<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JobFactory</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JobFactory</span> <span class="keyword">extends</span> <span class="title">SpringBeanJobFactory</span> <span class="title">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> transient <span class="type">AutowireCapableBeanFactory</span> beanFactory;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void setApplicationContext(<span class="keyword">final</span> <span class="type">ApplicationContext</span> context) &#123;</span><br><span class="line">        beanFactory = context.getAutowireCapableBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Object</span> createJobInstance(<span class="keyword">final</span> <span class="type">TriggerFiredBundle</span> bundle) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> job = <span class="keyword">super</span>.createJobInstance(bundle);</span><br><span class="line">        beanFactory.autowireBean(job);</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SchedulerConfig.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobFactory jobFactory;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Properties <span class="title">quartzProperties</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        PropertiesFactoryBean propertiesFactoryBean = <span class="keyword">new</span> PropertiesFactoryBean();</span><br><span class="line">        propertiesFactoryBean.setLocation(<span class="keyword">new</span> ClassPathResource(<span class="string">"/quartz.yml"</span>));</span><br><span class="line">        propertiesFactoryBean.afterPropertiesSet();</span><br><span class="line">        <span class="function"><span class="keyword">return</span> propertiesFactoryBean.<span class="title">getObject</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SchedulerFactoryBean factory = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        factory.setSchedulerName(<span class="string">"Cluster_Scheduler"</span>);</span><br><span class="line">        factory.setDataSource(dataSource);</span><br><span class="line">        factory.setApplicationContextSchedulerContextKey(<span class="string">"applicationContext"</span>);</span><br><span class="line">        factory.setQuartzProperties(quartzProperties());</span><br><span class="line">        factory.setJobFactory(jobFactory);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2、quartz-任务激活失败"><a href="#2-2、quartz-任务激活失败" class="headerlink" title="2.2、quartz 任务激活失败"></a>2.2、quartz 任务激活失败</h4><p>在Quartz中，当一个持久化的触发器会因为：</p><ol><li>调度器被关闭；</li><li>线程池没有可用线程；</li><li>项目重启；</li><li>任务的串行执行；</li></ol><p>而错过激活时间，就会发生激活失败（misfire）。</p><p>可以设置 quartz中CornTrigger使用的策略<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的misfile任务马上执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//在Trigger中默认选择MISFIRE_INSTRUCTION_FIRE_ONCE_NOW 策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISFIRE_INSTRUCTION_SMART_POLICY = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// CornTrigger默认策略，合并部分misfire，正常执行下一个周期的任务。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISFIRE_INSTRUCTION_FIRE_ONCE_NOW = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//所有的misFire都不管，执行下一个周期的任务。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISFIRE_INSTRUCTION_DO_NOTHING = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>1、 通过setMisfireInstruction方法设置misfire策略。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CronTriggerFactoryBean triggerFactoryBean = new CronTriggerFactoryBean<span class="params">()</span>;</span><br><span class="line">triggerFactoryBean.<span class="keyword">set</span>Name<span class="params">("corn_" + clazzName)</span>;</span><br><span class="line">triggerFactoryBean.<span class="keyword">set</span>JobDetail<span class="params">(jobFactory.getObject()</span>);</span><br><span class="line">triggerFactoryBean.<span class="keyword">set</span>CronExpression<span class="params">(quartzCorn)</span>;</span><br><span class="line">triggerFactoryBean.<span class="keyword">set</span>Group<span class="params">(QUARTZ_TRIGGER_GROUP)</span>;</span><br><span class="line"><span class="string">//</span>设置misfire策略</span><br><span class="line">triggerFactoryBean.<span class="keyword">set</span>MisfireInstruction<span class="params">(CronTrigger.MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY)</span>;</span><br><span class="line">triggerFactoryBean.afterPropertiesSet<span class="params">()</span>;</span><br></pre></td></tr></table></figure></p><p>2、 也可以通过CronScheduleBuilder设置misfire策略。<br><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CronScheduleBuilder csb = CronScheduleBuilder.cronSchedule(<span class="string">"0/5 * * * * ?"</span>);</span><br><span class="line"><span class="comment">//MISFIRE_INSTRUCTION_DO_NOTHING </span></span><br><span class="line">csb.withMisfireHandlingInstructionDoNothing();</span><br><span class="line"><span class="comment">//MISFIRE_INSTRUCTION_FIRE_ONCE_NOW</span></span><br><span class="line">csb.withMisfireHandlingInstructionFireAndProceed();<span class="comment">//(默认)</span></span><br><span class="line"><span class="comment">//MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY</span></span><br><span class="line">csb.withMisfireHandlingInstructionIgnoreMisfires();</span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>任务调度在实际项目中会经常用到，Quartz 也是我们的不二选择，但是在高可用的系统中也存在不少问题，具体问题小伙伴们可以在留言区留言，我们一起共同探讨。</p><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-quartz" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-quartz</a></p><p>Quartz 官网：<a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener">http://www.quartz-scheduler.org/</a></p><p>Quartz集群原理及配置应用：<a href="https://www.cnblogs.com/xiang--liu/p/10120105.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiang–liu/p/10120105.html</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在说 quartz 之前，我们先回顾一下 spring 的定时任务，使用相当简单，默认集成在 spring boot 中，所以在 spring boot 项目中无需额外添加依赖，无需配置，只需要加个注解就可以了，当然也可以实现动态添加删除定时任务，详情前往上一篇博文&lt;a h
      
    
    </summary>
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-定时任务</title>
    <link href="https://dddreams.github.io/210122-SpringBoot-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html"/>
    <id>https://dddreams.github.io/210122-SpringBoot-定时任务.html</id>
    <published>2021-01-22T03:20:51.000Z</published>
    <updated>2021-01-26T03:15:40.671Z</updated>
    
    <content type="html"><![CDATA[<p>在我们开发项目中，定时任务是经常用到的一种技术，来处理一些业务，SpringBoot 默认支持定时任务，怎么样是不是感觉 Spring Boot 太人性化了，那么下面我们看一下怎么实现一个定时器吧。</p><blockquote><p>Tips<br>开发 Spring Boot 项目有个口诀或者说是 Spring Boot 的三板斧：加依赖、写配置、添注解<br>示例代码详见：<code>https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-schedule</code></p></blockquote><h2 id="加依赖"><a href="#加依赖" class="headerlink" title="加依赖"></a>加依赖</h2><p>Spring Boot 默认支持定时任务，所以只要加入 Spring Boot 的依赖即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="写配置"><a href="#写配置" class="headerlink" title="写配置"></a>写配置</h2><p>实际开发中一般将经常变化的值配置到配置文件中，定时任务中我们可以自定义配置项 cron 来控制定时任务执行的时间<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">schedule</span></span><br><span class="line"><span class="attr">schedule:</span></span><br><span class="line">  <span class="attr">cron:</span> <span class="number">0</span> <span class="string">*/1</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span> <span class="string">?</span> <span class="comment"># 表达式表示 1 分钟执行一次</span></span><br></pre></td></tr></table></figure></p><p>关于 cron 表达式，如果不清楚请先百度。</p><h2 id="添注解"><a href="#添注解" class="headerlink" title="添注解"></a>添注解</h2><p>我们需要在启动类上加 <code>@EnableScheduling</code> 注解即可开启定时任务<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableScheduling</span></span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="编写定时任务的代码"><a href="#编写定时任务的代码" class="headerlink" title="编写定时任务的代码"></a>编写定时任务的代码</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Slf4j</span></span><br><span class="line"><span class="variable">@Component</span></span><br><span class="line">public class TestTasks &#123;</span><br><span class="line">    <span class="comment">//@Scheduled(cron = "0 */1 * * * ?")</span></span><br><span class="line">    <span class="variable">@Scheduled</span>(cron = <span class="string">"$&#123;schedule.cron&#125;"</span>)</span><br><span class="line">    public void testTask() &#123;</span><br><span class="line">        <span class="selector-tag">log</span><span class="selector-class">.info</span>(<span class="string">"哈哈，我执行了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，便会在控制台隔1分钟打印<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">哈哈，我执行了！</span><br><span class="line">哈哈，我执行了！</span><br><span class="line">哈哈，我执行了！</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> <code>@Component</code> 注解是启动后立即执行，<code>${schedule.cron}</code> 便是从配置文件读取配置的执行时间。</p><p>前面说了如果你对 cron 不了解，不用担心，Spring boot 提供了另外的方式 <code>fixedRate</code>，详解如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Scheduled</span>(fixedRate = <span class="number">60000</span>) ：上一次开始执行时间点之后<span class="number">1</span>分再执行</span><br><span class="line"><span class="variable">@Scheduled</span>(fixedDelay = <span class="number">60000</span>) ：上一次执行完毕时间点之后<span class="number">1</span>分再执行</span><br><span class="line"><span class="variable">@Scheduled</span>(initialDelay=<span class="number">1000</span>, fixedRate=<span class="number">60000</span>) ：第一次延迟<span class="number">1</span>秒后执行，之后按 fixedRate 的规则每<span class="number">1</span>分执行一次</span><br></pre></td></tr></table></figure></p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Scheduled(fixedRate = <span class="number">60000</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTask1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">log</span>.info(<span class="string">"哈哈，我又执行了！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">哈哈，我执行了！</span><br><span class="line">哈哈，我又执行了！</span><br><span class="line">哈哈，我执行了！</span><br><span class="line">哈哈，我又执行了！</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="动态添加或删除定时任务"><a href="#动态添加或删除定时任务" class="headerlink" title="动态添加或删除定时任务"></a>动态添加或删除定时任务</h2><p>在实际项目中，往往会遇到动态的添加或停止定时任务，来我们看看怎么实现，首先添加一个配置类<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DefaultSchedulingConfigurer</span> <span class="title">implements</span> <span class="title">SchedulingConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScheduledTaskRegistrar taskRegistrar;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;ScheduledFuture&lt;?&gt;&gt; scheduledFutures = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ScheduledFuture&lt;?&gt;&gt; taskFutures = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span>(<span class="params">ScheduledTaskRegistrar taskRegistrar</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.taskRegistrar = taskRegistrar;</span><br><span class="line">        <span class="comment">//System.out.println(inited());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;ScheduledFuture&lt;?&gt;&gt; getScheduledFutures() &#123;</span><br><span class="line">        <span class="keyword">if</span> (scheduledFutures == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// spring版本不同选用不同字段scheduledFutures</span></span><br><span class="line">                scheduledFutures = (Set&lt;ScheduledFuture&lt;?&gt;&gt;) BeanUtils.getProperty(taskRegistrar, <span class="string">"scheduledTasks"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SchedulingException(<span class="string">"not found scheduledFutures field."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> scheduledFutures;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTriggerTask</span>(<span class="params">String taskId, TriggerTask triggerTask</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (taskFutures.containsKey(taskId)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SchedulingException(<span class="string">"the taskId["</span> + taskId + <span class="string">"] was added."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        TaskScheduler scheduler = taskRegistrar.getScheduler();</span><br><span class="line">        ScheduledFuture&lt;?&gt; future = scheduler.schedule(triggerTask.getRunnable(), triggerTask.getTrigger());</span><br><span class="line">        getScheduledFutures().<span class="keyword">add</span>(future);</span><br><span class="line">        taskFutures.put(taskId, future);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelTriggerTask</span>(<span class="params">String taskId</span>)</span> &#123;</span><br><span class="line">        ScheduledFuture&lt;?&gt; future = taskFutures.<span class="keyword">get</span>(taskId);</span><br><span class="line">        <span class="keyword">if</span> (future != <span class="literal">null</span>) &#123;</span><br><span class="line">            future.cancel(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        taskFutures.<span class="keyword">remove</span>(taskId);</span><br><span class="line">        getScheduledFutures().<span class="keyword">remove</span>(future);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重置任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetTriggerTask</span>(<span class="params">String taskId, TriggerTask triggerTask</span>)</span> &#123;</span><br><span class="line">        cancelTriggerTask(taskId);</span><br><span class="line">        addTriggerTask(taskId, triggerTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">taskIds</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskFutures.keySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否存在任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">hasTask</span>(<span class="params">String taskId</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.taskFutures.containsKey(taskId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务调度是否已经初始化完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">inited</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.taskRegistrar != <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.taskRegistrar.getScheduler() != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后新建一个 controller<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/task"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTaskController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DefaultSchedulingConfigurer defaultSchedulingConfigurer;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/add"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String add(<span class="meta">@RequestParam(name = <span class="meta-string">"name"</span>)</span> String name) &#123;</span><br><span class="line">        defaultSchedulingConfigurer.addTriggerTask(name,</span><br><span class="line">                new TriggerTask(</span><br><span class="line">                        () -&gt; System.<span class="keyword">out</span>.println(<span class="string">"hello world!"</span>),</span><br><span class="line">                        new CronTrigger(<span class="string">"0/5 * * * * ? "</span>)));<span class="comment">//5秒执行一次</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"任务开启成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/del"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String del(<span class="meta">@RequestParam(name = <span class="meta-string">"name"</span>)</span> String name) &#123;</span><br><span class="line">        defaultSchedulingConfigurer.cancelTriggerTask(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"任务删除成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请求 <code>http://localhost:8080/task/add</code>，定时任务即可开启<br>请求 <code>http://localhost:8080/task/del</code>，定时任务就删除成功了</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>其实 Spring boot 的定时任务相对比较简单，如果在高并发集群环境下，我们尽量使用框架来支撑我们的业务，下一节我会介绍定时任务的框架 quartz ，大家敬请期待吧。</p><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-schedule" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-schedule</a><br>Spring boot 定时任务：<a href="http://www.ityouknow.com/springboot/2016/12/02/spring-boot-scheduler.html" target="_blank" rel="noopener">http://www.ityouknow.com/springboot/2016/12/02/spring-boot-scheduler.html</a><br>SpringBoot+schedule+可以动态添加或删除定时任务：<a href="https://blog.csdn.net/nicky_lc/article/details/106961779" target="_blank" rel="noopener">https://blog.csdn.net/nicky_lc/article/details/106961779</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在我们开发项目中，定时任务是经常用到的一种技术，来处理一些业务，SpringBoot 默认支持定时任务，怎么样是不是感觉 Spring Boot 太人性化了，那么下面我们看一下怎么实现一个定时器吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tips&lt;br&gt;开发 Spring
      
    
    </summary>
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>是年味淡了，还是我们老了</title>
    <link href="https://dddreams.github.io/200121-%E6%98%AF%E5%B9%B4%E5%91%B3%E6%B7%A1%E4%BA%86%EF%BC%8C%E8%BF%98%E6%98%AF%E6%88%91%E4%BB%AC%E8%80%81%E4%BA%86.html"/>
    <id>https://dddreams.github.io/200121-是年味淡了，还是我们老了.html</id>
    <published>2020-01-21T06:29:11.000Z</published>
    <updated>2020-01-21T10:53:28.056Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对幸福说个早安，给吉祥送个花篮，给祝福送份快餐，祝大家春节快乐！</p></blockquote><p>叮咚…微信收到一条消息。</p><p>「敲响的是钟声，走过的是岁月，留下的是故事，带来的是希望，盼望的是美好，送来的是祝福，愿朋友新年快乐。」是一条新年祝福，顺着华丽的符号，伴随着满屏的笑脸与礼花的表情雨，往上滑，发现和对方的上一次对话是在去年过年，我不禁陷入了沉思…「这人是谁啊！」。</p><p>“诶，有敬业福吗？来，我粘一张”，支付宝上集福集的热火朝天，每天一睁眼便浇水，一看到福字就扫，除夕夜里陪伴自己和家人最多的还是手机，终于等到开启五福了，结果，分到2.88元。</p><p>工作群里忽然热闹起来，各种祝福语，各种表情，令人紧张的是偶尔会有红包闪现，你紧盯屏幕，活动手指，生怕错过。终于来了，你庆幸自己眼疾手快抢到了，心情无比激动，感觉登上了人生巅峰，发现红包面额只有0.8元。</p><p>“狗娃啊，今年怎么没带媳妇回来啊！”，小时候盼望发压岁钱的七大姑八大姨变成了避而远之的催婚对象。你只能极其尴尬的，笑一声，“等着阿姨给介绍呢”。</p><p>突然感觉这个年，不像是小时候过的那个年了，感觉年味淡了，一切过年的活动都成了大公司散钱争用户的套路，朋友发来的新年祝福也显得那么苍白无力，只是一句虚话而已。那到底是年味淡了，还是我们老了?</p><p>“三啊，你什么时候回来”，电话那头愣了半天，“哦，我明天就回来。”原本打算不回家的小儿子听到母亲的声音，决定回家过年，他急忙的打开12306网上购票，没想到票还有，没有往年那么紧张了。</p><p>“爷爷，我们已经在路上了，爸爸开的车”，老父亲开心嘱咐慢点开车，不用着急。挂断电话又急切的让母亲准备杀鱼杀鸡。</p><p>小两口刚生了二胎，今年不准备回家，而是把父母接过来，在城里过年。火车站上有的人迫切的回家，有的人焦急的等待。每出来一批人，他们都在人群中张望着，寻找着，终于看到了父母的身影，跑过去接住父亲手里提着的东西，开心的拥抱在一起。这几年来越来越多的人选择了“反向春运”，把老人孩子接到城里过年。</p><p>是的，“团圆”成了人们过年最大的愿望。小时候最开心的是吃到包着硬币的饺子，长大了，吃什么不重要，重要的是过年能跟家人在一起。</p><p>最后，提前祝大家春节快乐！年味未淡，我们不老！</p><p>ps：这几天被一个叫做“新型肺炎”的病毒搞的人心惶惶，在这里也提醒读者朋友们注意防范，尽量避开人多的地方，加强自身卫生防止病毒传染。同时也保持镇定，不必恐慌，不要过于相信部分媒体扩大化的报道。</p><p>pps：估计大家已经看到了，我公众号改名字了，改名字的原因有二，第一是字母拼音不利于搜索；第二是博客感觉有点老气，所以改名为：「<strong>治恒说说</strong>」</p><hr><p>本文同步更新至<a href="https://dddreams.github.io/">zhiheng’s blog</a>、微信公众号。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/wechat-sys.png" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">微信搜一搜：治恒说说</p><p style="text-align: center;margin:20 0;">记得点关注哦</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;对幸福说个早安，给吉祥送个花篮，给祝福送份快餐，祝大家春节快乐！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;叮咚…微信收到一条消息。&lt;/p&gt;
&lt;p&gt;「敲响的是钟声，走过的是岁月，留下的是故事，带来的是希望，盼望的是美好，送来的是祝福，愿朋友新年快乐
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://dddreams.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Java1.8你还不知道的新特性</title>
    <link href="https://dddreams.github.io/200110-Java1-8%E4%BD%A0%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7.html"/>
    <id>https://dddreams.github.io/200110-Java1-8你还不知道的新特性.html</id>
    <published>2020-01-10T10:35:26.000Z</published>
    <updated>2020-01-10T10:37:04.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span>[] arr = &#123;<span class="string">"Google"</span>, <span class="string">"Baidu"</span>, <span class="string">"Taobao"</span>, <span class="string">"Sina"</span>, <span class="string">"Runoob"</span>&#125;;</span><br><span class="line">List&lt;<span class="keyword">String</span>&gt; <span class="built_in">list</span> = Arrays.asList(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 java 7 排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortUsingJava7</span><span class="params">(List&lt;<span class="keyword">String</span>&gt; names)</span> </span>&#123;</span><br><span class="line">    Collections.sort(names, <span class="keyword">new</span> Comparator&lt;<span class="keyword">String</span>&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> compare(<span class="keyword">String</span> s1, <span class="keyword">String</span> s2) &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 java 8 排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortUsingJava8</span><span class="params">(List&lt;<span class="keyword">String</span>&gt; names)</span> </span>&#123;</span><br><span class="line">    Collections.sort(names, (s1, s2) -&gt; s1.compareTo(s2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用 Java <span class="number">7</span> 语法: </span><br><span class="line">[Baidu , Google , Runoob , Sina , Taobao ]</span><br><span class="line">使用 Java <span class="number">8</span> 语法: </span><br><span class="line">[Baidu , Google , Runoob , Sina , Taobao ]</span><br></pre></td></tr></table></figure><h2 id="Stream流式操作"><a href="#Stream流式操作" class="headerlink" title="Stream流式操作"></a>Stream流式操作</h2><p>问题：<br>给定一个字符串元素列表，如下所示：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"bilibili"</span>, <span class="string">"of"</span>, <span class="string">"codesheep"</span>, <span class="string">"5"</span>, <span class="string">"at"</span>, <span class="string">"BILIBILI"</span>, <span class="string">"codesheep"</span>, <span class="string">"23"</span>, <span class="string">"CHEERS"</span>, <span class="string">"6"</span>]</span><br></pre></td></tr></table></figure></p><p>找出所有长度 &gt;=5 的字符串，并且忽略大小写、去除重复字符串，然后按字母排序，最后用“-”连接成一个字符串输出！</p><p>来，小伙伴们，5分钟，搞定它。。。什么搞定不了，该去补习补习了。<br>那么使用Java8怎么搞定呢，开启装逼模式：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String result = list.stream()                        <span class="comment">// 首先将列表转化为Stream流        </span></span><br><span class="line">                    .<span class="function"><span class="title">filter</span>( i -&gt;</span> !isNum(i) )        <span class="comment">// 筛选出字母型字符串        </span></span><br><span class="line">                    .<span class="function"><span class="title">filter</span>( i -&gt;</span> i.length() &gt;= <span class="number">5</span> )  <span class="comment">// 其次筛选出长度&gt;=5的字符串        </span></span><br><span class="line">                    .<span class="function"><span class="title">map</span>( i -&gt;</span> i.toLowerCase() )     <span class="comment">// 字符串统一转小写        </span></span><br><span class="line">                    .distinct()                      <span class="comment">// 去重操作来一下        </span></span><br><span class="line">                    .sorted( Comparator.naturalOrder() )   <span class="comment">// 字符串排序来一下        </span></span><br><span class="line">                    .collect( Collectors.joining(<span class="string">"-"</span>) );   <span class="comment">// 连词成句来一下，完美！</span></span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line">输出：bilibili-cheers-codesheep</span><br></pre></td></tr></table></figure></p><p>这操作够sao了吧！</p><h2 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h2><p>Consumer的语义是消费的意思，了解一些消息队列的同学，肯定对这个单词，有一定的理解。<br>看个简单的例子：打印3次 <code>Hello World!</code><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来的写法</span></span><br><span class="line"><span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"Hello World!"</span>);</span><br><span class="line"><span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"Hello World!"</span>);</span><br><span class="line"><span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"Hello World!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Consumer接口</span></span><br><span class="line"><span class="type">Consumer</span> <span class="built_in">c</span> = <span class="type">System</span>.out::<span class="built_in">println</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span>.andThen(<span class="built_in">c</span>).andThen(<span class="built_in">c</span>).accept(<span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure></p><p>搞定。</p><p>一个简单的平方计算：<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Integer&gt; square = <span class="keyword">x</span> -&gt; System.out.println(<span class="string">"print square : "</span> + <span class="keyword">x</span> * <span class="keyword">x</span>)<span class="comment">;</span></span><br><span class="line"><span class="comment">square.accept(2);</span></span><br></pre></td></tr></table></figure></p><h2 id="Optional接口"><a href="#Optional接口" class="headerlink" title="Optional接口"></a>Optional接口</h2><p>Optional本质是个容器，你可以将你的变量交由它进行封装，这样我们就不用显式对原变量进行 null值检测，防止出现各种空指针异常。举例：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public Integer getScore( Student student )&#123;</span><br><span class="line">    <span class="keyword">if</span>(student != null)&#123;</span><br><span class="line">        Subject <span class="function"><span class="keyword">sub</span> = <span class="title">student</span>.<span class="title">getSubject</span></span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="function"><span class="keyword">sub</span> != <span class="title">null</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">sub</span>.<span class="title">getScore</span></span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>多嵌套的 if 判空,这么处理当然可以，然而有更好的解决办法哦。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">Integer</span> getScore(Student student)&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(student)</span><br><span class="line">                   .<span class="built_in">map</span>(Student<span class="type">::getSubject</span>)</span><br><span class="line">                   .<span class="built_in">map</span>(Subject<span class="type">::getScore</span>)</span><br><span class="line">                   .orElse(<span class="built_in">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完美实现。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lambda-表达式&quot;&gt;&lt;a href=&quot;#Lambda-表达式&quot; class=&quot;headerlink&quot; title=&quot;Lambda 表达式&quot;&gt;&lt;/a&gt;Lambda 表达式&lt;/h2&gt;&lt;p&gt;Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特
      
    
    </summary>
    
    
      <category term="Java" scheme="https://dddreams.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java代码优化建议</title>
    <link href="https://dddreams.github.io/200103-java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE.html"/>
    <id>https://dddreams.github.io/200103-java代码优化建议.html</id>
    <published>2020-01-03T04:07:26.000Z</published>
    <updated>2020-01-03T05:08:50.624Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>帮助开发人员夯实基础，从规范的编码操作开始，培养良好的编码习惯，助力未来技术成长。</p></blockquote><p>通过java代码规范来优化程序，优化内存使用情况，防止内存泄露</p><p>可供程序利用的资源（内存、CPU时间、网络带宽等）是有限的，优化的目的就是让程序用尽可能少的资源完成预定的任务。优化通常包含两方面的内容：减小代码的体积，提高代码的运行效率。本文讨论的主要是如何提高代码的效率。<br>在Java程序中，性能问题的大部分原因并不在于Java语言，而是在于程序本身。养成好的代码编写习惯非常重要，比如正确地、巧妙地运用java.lang.String类和java.util.Vector类，它能够显著地提高程序的性能。下面我们就来具体地分析一下这方面的问题。</p><p><strong>1、 尽量指定类的final修饰符 带有final修饰符的类是不可派生的。</strong></p><p>在Java核心API中，有许多应用final的例子，例如java.lang.String。为String类指定final防止了人们覆盖length()方法。另外，如果指定一个类为final，则该类所有的方法都是final。Java编译器会寻找机会内联（inline）所有的final方法（这和具体的编译器实现有关）。此举能够使性能平均提高50% 。</p><p><strong>2、 尽量重用对象。</strong></p><p>特别是String 对象的使用中，出现字符串连接情况时应用StringBuffer 代替。由于系统不仅要花时间生成对象，以后可能还需花时间对这些对象进行垃圾回收和处理。因此，生成过多的对象将会给程序的性能带来很大的影响。</p><p><strong>3、 尽量使用局部变量，调用方法时传递的参数以及在调用中创建的临时变量都保存在栈（Stack）中，速度较快。</strong></p><p>其他变量，如静态变量、实例变量等，都在堆（Heap）中创建，速度较慢。另外，依赖于具体的编译器/JVM，局部变量还可能得到进一步优化。请参见《尽可能使用堆栈变量》。</p><p><strong>4、 不要重复初始化变量</strong></p><p>默认情况下，调用类的构造函数时， Java会把变量初始化成确定的值：所有的对象被设置成null，整数变量（byte、short、int、long）设置成0，float和double变量设置成0.0，逻辑值设置成false。当一个类从另一个类派生时，这一点尤其应该注意，因为用new关键词创建一个对象时，构造函数链中的所有构造函数都会被自动调用。</p><p><strong>5、 在JAVA + ORACLE 的应用系统开发中，java中内嵌的SQL语句尽量使用大写的形式，以减轻ORACLE解析器的解析负担。</strong></p><p><strong>6、 Java 编程过程中，进行数据库连接、I/O流操作时务必小心，在使用完毕后，即使关闭以释放资源。</strong></p><p>因为对这些大对象的操作会造成系统大的开销，稍有不慎，会导致严重的后果。</p><p><strong>7、 由于JVM的有其自身的GC机制，不需要程序开发者的过多考虑，从一定程度上减轻了开发者负担，但同时也遗漏了隐患，过分的创建对象会消耗系统的大量内存，严重时会导致内存泄露，因此，保证过期对象的及时回收具有重要意义。</strong></p><p>JVM回收垃圾的条件是：对象不在被引用；然而，JVM的GC并非十分的机智，即使对象满足了垃圾回收的条件也不一定会被立即回收。所以，建议我们在对象使用完毕，应手动置成null。</p><p><strong>8、 在使用同步机制时，应尽量使用方法同步代替代码块同步。</strong></p><p><strong>9、 尽量减少对变量的重复计算</strong><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>;<span class="built_in">i</span> &lt; list.<span class="built_in">size</span>; <span class="built_in">i</span> ++) &#123;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br><span class="line">应替换为：</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>,int len = list.<span class="built_in">size</span>();<span class="built_in">i</span> &lt; len; <span class="built_in">i</span> ++)&#123;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>10、尽量采用lazy loading 的策略，即在需要的时候才开始创建。</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例如： </span><br><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = “aaa”;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">    list.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br><span class="line">应替换为：</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">str</span> = “aaa”;</span><br><span class="line">    list.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>11、慎用异常</strong></p><p>异常对性能不利。抛出异常首先要创建一个新的对象。Throwable接口的构造函数调用名为fillInStackTrace()的本地（Native）方法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，VM就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。 异常只能用于错误处理，不应该用来控制程序流程。</p><p><strong>12、不要在循环中使用：</strong></p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应把其放置在最外层。</p><p><strong>13、StringBuffer 的使用：</strong></p><p><code>StringBuffer</code>表示了可变的、可写的字符串。<br>有三个构造方法 :<br><code>StringBuffer ();</code> //默认分配16个字符的空间<br><code>StringBuffer (int size);</code> //分配size个字符的空间<br><code>StringBuffer (String str);</code> //分配16个字符+str.length()个字符空间<br>你可以通过StringBuffer的构造函数来设定它的初始化容量，这样可以明显地提升性能。</p><p>这里提到的构造函数是<code>StringBuffer(int length)</code>，<code>length</code>参数表示当前的<code>StringBuffer</code>能保持的字符数量。你也可以使用<code>ensureCapacity(int minimumcapacity)</code>方法在StringBuffer对象创建之后设置它的容量。首先我们看看<code>StringBuffer</code>的缺省行为，然后再找出一条更好的提升性能的途径。<br><code>StringBuffer</code>在内部维护一个字符数组，当你使用缺省的构造函数来创建<code>StringBuffer</code>对象的时候，因为没有设置初始化字符长度，<code>StringBuffer</code>的容量被初始化为16个字符，也就是说缺省容量就是16个字符。当<code>StringBuffer</code>达到最大容量的时候，它会将自身容量增加到当前的2倍再加2，也就是（2<em>旧值+2）。如果你使用缺省值，初始化之后接着往里面追加字符，在你追加到第16个字符的时候它会将容量增加到34（2</em>16+2），当追加到34个字符的时候就会将容量增加到70（2*34+2）。无论何事只要StringBuffer到达它的最大容量它就不得不创建一个新的字符数组然后重新将旧字符和新字符都拷贝一遍――这也太昂贵了点。所以总是给StringBuffer设置一个合理的初始化容量值是错不了的，这样会带来立竿见影的性能增益。StringBuffer初始化过程的调整的作用由此可见一斑。所以，使用一个合适的容量值来初始化StringBuffer永远都是一个最佳的建议。</p><p><strong>14、合理的使用Java类 java.util.Vector。</strong></p><p>简单地说，一个Vector就是一个java.lang.Object实例的数组。Vector与数组相似，它的元素可以通过整数形式的索引访问。但是，Vector类型的对象在创建之后，对象的大小能够根据元素的增加或者删除而扩展、缩小。请考虑下面这个向Vector加入元素的例子：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Object</span> bj = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line">Vector v = <span class="keyword">new</span> Vector(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123; </span><br><span class="line">    v.<span class="built_in">add</span>(<span class="number">0</span>,obj); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除非有绝对充足的理由要求每次都把新元素插入到Vector的前面，否则上面的代码对性能不利。在默认构造函数中，Vector的初始存储能力是10个元素，如果新元素加入时存储能力不足，则以后存储能力每次加倍。Vector类就对象StringBuffer类一样，每次扩展存储能力时，所有现有的元素都要复制到新的存储空间之中。下面的代码片段要比前面的例子快几个数量级：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Object</span> bj = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line">Vector v = <span class="keyword">new</span> Vector(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123; </span><br><span class="line">    v.<span class="built_in">add</span>(obj); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样的规则也适用于Vector类的remove()方法。由于Vector中各个元素之间不能含有“空隙”，删除除最后一个元素之外的任意其他元素都导致被删除元素之后的元素向前移动。也就是说，从Vector删除最后一个元素要比删除第一个元素“开销”低好几倍。</p><p>假设要从前面的Vector删除所有元素，我们可以使用这种代码：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    v.remove(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是，与下面的代码相比，前面的代码要慢几个数量级：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(<span class="name">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 100000; i++) &#123;</span></span><br><span class="line">    v.remove(<span class="name">v</span>.size()<span class="number">-1</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从Vector类型的对象v删除所有元素的最好方法是：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.removeAllElements()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>假设Vector类型的对象v包含字符串“Hello”。考虑下面的代码，它要从这个Vector中删除“Hello”字符串：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> s = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">int</span> i = v.indexOf(s);</span><br><span class="line"><span class="keyword">if</span>(I != <span class="number">-1</span>) v.<span class="built_in">remove</span>(s);</span><br></pre></td></tr></table></figure></p><p>这些代码看起来没什么错误，但它同样对性能不利。在这段代码中，indexOf()方法对v进行顺序搜索寻找字符串“Hello”，remove(s)方法也要进行同样的顺序搜索。改进之后的版本是：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> s = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">int</span> i = v.indexOf(s);</span><br><span class="line"><span class="keyword">if</span>(I != <span class="number">-1</span>) v.<span class="built_in">remove</span>(i);</span><br></pre></td></tr></table></figure></p><p>这个版本中我们直接在remove()方法中给出待删除元素的精确索引位置，从而避免了第二次搜索。一个更好的版本是：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"Hello"</span><span class="comment">; </span></span><br><span class="line">v.remove(s)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>最后，我们再来看一个有关Vector类的代码片段：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span>++;<span class="built_in">i</span> &lt; v.<span class="built_in">length</span>)</span><br></pre></td></tr></table></figure></p><p>如果v包含100,000个元素，这个代码片段将调用v.size()方法100,000次。虽然size方法是一个简单的方法，但它仍旧需要一次方法调用的开销，至少JVM需要为它配置以及清除堆栈环境。在这里，for循环内部的代码不会以任何方式修改Vector类型对象v的大小，因此上面的代码最好改写成下面这种形式：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">size</span> = v.<span class="built_in">size</span>(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> I=<span class="number">0</span>; I++;I&lt;<span class="built_in">size</span>)</span><br></pre></td></tr></table></figure></p><p>虽然这是一个简单的改动，但它仍旧赢得了性能。毕竟，每一个CPU周期都是宝贵的。</p><p><strong>15、当复制大量数据时，使用System.arraycopy()命令。</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] src=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">System.arraycopy(src, <span class="number">0</span>, dest, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"><span class="string">src:</span>源数组; <span class="string">srcPos:</span>源数组要复制的起始位置;</span><br><span class="line"><span class="string">dest:</span>目的数组; <span class="string">destPos:</span>目的数组放置的起始位置;</span><br><span class="line"><span class="string">length:</span>复制的长度.</span><br><span class="line"></span><br><span class="line">注意：src and dest都必须是同类型或者可以进行转换类型的数组．</span><br></pre></td></tr></table></figure></p><p><strong>16、代码重构：增强代码的可读性。</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShopCart</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List carts ;</span><br><span class="line">    …</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span> (<span class="params">Object item</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(carts == <span class="literal">null</span>) &#123;</span><br><span class="line">            carts = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        &#125;</span><br><span class="line">        crts.<span class="keyword">add</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span>(<span class="params">Object item</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(carts. contains(item)) &#123;</span><br><span class="line">            carts.<span class="keyword">remove</span>(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getCarts</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//返回只读列表</span></span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(carts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不推荐这种方式</span></span><br><span class="line">    <span class="comment">//this.getCarts().add(item);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>17、不用new关键词创建类的实例</strong></p><p>用new关键词创建类的实例时，构造函数链中的所有构造函数都会被自动调用。但如果一个对象实现了Cloneable接口，我们可以调用它的clone()方法。clone()方法不会调用任何类构造函数。<br>在使用设计模式（Design Pattern）的场合，如果用Factory模式创建对象，则改用clone()方法创建新的对象实例非常简单。例如，下面是Factory模式的一个典型实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Credit <span class="title">getNewCredit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Credit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改进后的代码使用clone()方法，如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Credit BaseCredit = <span class="keyword">new</span> Credit();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Credit <span class="title">getNewCredit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Credit) BaseCredit.clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的思路对于数组处理同样很有用。</p><p><strong>18、乘法和除法</strong></p><p>考虑下面的代码：<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">val</span> = <span class="number">0</span>; <span class="keyword">val</span> &lt; <span class="number">100000</span>; <span class="keyword">val</span> +=<span class="number">5</span>) &#123;</span><br><span class="line">    alterX = <span class="keyword">val</span> * <span class="number">8</span>; myResult = <span class="keyword">val</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用移位操作替代乘法操作可以极大地提高性能。下面是修改后的代码：<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">val</span> = <span class="number">0</span>; <span class="keyword">val</span> &lt; <span class="number">100000</span>; <span class="keyword">val</span> += <span class="number">5</span>) &#123;</span><br><span class="line">    alterX = <span class="keyword">val</span> &lt;&lt; <span class="number">3</span>; myResult = <span class="keyword">val</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改后的代码不再做乘以8的操作，而是改用等价的左移3位操作，每左移1位相当于乘以2。相应地，右移1位操作相当于除以2。值得一提的是，虽然移位操作速度快，但可能使代码比较难于理解，所以最好加上一些注释。</p><p><strong>19、在JSP页面中关闭无用的会话。</strong></p><p>一个常见的误解是以为session在有客户端访问时就被创建，然而事实是直到某server端程序调用HttpServletRequest.getSession(true)这样的语句时才被创建，注意如果JSP没有显示的使用 &lt;&gt; 关闭session，则JSP文件在编译成Servlet时将会自动加上这样一条语句HttpSession session = HttpServletRequest.getSession(true);这也是JSP中隐含的session对象的来历。由于session会消耗内存资源，因此，如果不打算使用session，应该在所有的JSP中关闭它。<br>对于那些无需跟踪会话状态的页面，关闭自动创建的会话可以节省一些资源。使用如下page指令：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@<span class="built_in"> page </span><span class="attribute">session</span>=<span class="string">"false"</span>%&gt;</span><br></pre></td></tr></table></figure></p><p><strong>20、JDBC与I/O</strong></p><p>如果应用程序需要访问一个规模很大的数据集，则应当考虑使用块提取方式。默认情况下，JDBC每次提取32行数据。举例来说，假设我们要遍历一个5000行的记录集，JDBC必须调用数据库157次才能提取到全部数据。如果把块大小改成512，则调用数据库的次数将减少到10次。</p><p><strong>21、Servlet与内存使用</strong></p><p>许多开发者随意地把大量信息保存到用户会话之中。一些时候，保存在会话中的对象没有及时地被垃圾回收机制回收。从性能上看，典型的症状是用户感到系统周期性地变慢，却又不能把原因归于任何一个具体的组件。如果监视JVM的堆空间，它的表现是内存占用不正常地大起大落。<br>解决这类内存问题主要有二种办法。第一种办法是，在所有作用范围为会话的Bean中实现HttpSessionBindingListener接口。这样，只要实现valueUnbound()方法，就可以显式地释放Bean使用的资源。</p><p>另外一种办法就是尽快地把会话作废。大多数应用服务器都有设置会话作废间隔时间的选项。另外，也可以用编程的方式调用会话的setMaxInactiveInterval()方法，该方法用来设定在作废会话之前，Servlet容器允许的客户请求的最大间隔时间，以秒计。</p><p><strong>22、使用缓冲标记</strong></p><p>一些应用服务器加入了面向JSP的缓冲标记功能。例如，BEA的WebLogic Server从6.0版本开始支持这个功能，Open Symphony工程也同样支持这个功能。JSP缓冲标记既能够缓冲页面片断，也能够缓冲整个页面。当JSP页面执行时，如果目标片断已经在缓冲之中，则生成该片断的代码就不用再执行。页面级缓冲捕获对指定URL的请求，并缓冲整个结果页面。对于购物篮、目录以及门户网站的主页来说，这个功能极其有用。对于这类应用，页面级缓冲能够保存页面执行的结果，供后继请求使用。</p><p><strong>23、选择合适的引用机制</strong></p><p>在典型的JSP应用系统中，页头、页脚部分往往被抽取出来，然后根据需要引入页头、页脚。当前，在JSP页面中引入外部资源的方法主要有两种：include指令，以及include动作。<br>include指令：例如&lt;%@ include file=”copyright.html” %&gt;。该指令在编译时引入指定的资源。在编译之前，带有include指令的页面和指定的资源被合并成一个文件。被引用的外部资源在编译时就确定，比运行时才确定资源更高效。<br>include动作：例如<br><code>&lt;jsp:include page=&quot;copyright.jsp&quot; /&gt;</code>。该动作引入指定页面执行后生成的结果。由于它在运行时完成，因此对输出结果的控制更加灵活。但时，只有当被引用的内容频繁地改变时，或者在对主页面的请求没有出现之前，被引用的页面无法确定时，使用include动作才合算。</p><p><strong>24、及时清除不再需要的会话</strong></p><p>为了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更多会话时，如果内存容量不足，操作系统会把部分内存数据转移到磁盘，应用服务器也可能根据“最近最频繁使用”（Most Recently Used）算法把部分不活跃的会话转储到磁盘，甚至可能抛出“内存不足”异常。在大规模系统中，串行化会话的代价是很昂贵的。当会话不再需要时，应当及时调用HttpSession.invalidate()方法清除会话。HttpSession.invalidate()方法通常可以在应用的退出页面调用。</p><p><strong>25、不要将数组声明为：public static final 。</strong></p><p><strong>26、HashMap的遍历效率讨论</strong></p><p>经常遇到对HashMap中的key和value值对的遍历操作，有如下两种方法：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt; paraMap = <span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt;();</span><br><span class="line"><span class="comment">//第一个循环</span></span><br><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; appFieldDefIds = paraMap.keySet();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">String</span> appFieldDefId : appFieldDefIds) &#123;</span><br><span class="line">    <span class="built_in">String</span>[] values = paraMap.<span class="keyword">get</span>(appFieldDefId);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个循环</span></span><br><span class="line"><span class="keyword">for</span>(Entry&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt; entry : paraMap.entrySet())&#123;</span><br><span class="line">    <span class="built_in">String</span> appFieldDefId = entry.getKey();</span><br><span class="line">    <span class="built_in">String</span>[] values = entry.getValue();</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一种实现明显的效率不如第二种实现。<br>分析如下 <code>Set&lt;String&gt; appFieldDefIds = paraMap.keySet();</code> 是先从HashMap中取得keySet<br>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    <span class="keyword">return</span> (ks != <span class="keyword">null</span> ? ks : (keySet = <span class="keyword">new</span> KeySet()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newKeyIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> containsKey(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HashMap.<span class="keyword">this</span>.removeEntryForKey(o) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实就是返回一个私有类KeySet, 它是从AbstractSet继承而来，实现了Set接口。</p><p>再来看看for/in循环的语法<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(declaration : expression)</span></span></span><br><span class="line">statement</span><br></pre></td></tr></table></figure></p><p>在执行阶段被翻译成如下各式<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(<span class="name">Iterator&lt;E&gt;</span> #i = (<span class="name">expression</span>).iterator()<span class="comment">; #i.hashNext();)&#123;</span></span><br><span class="line">    declaration = #i.next()<span class="comment">;</span></span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因此在第一个for语句<code>for (String appFieldDefId : appFieldDefIds)</code>中调用了<code>HashMap.keySet().iterator()</code></p><p>而这个方法调用了<code>newKeyIterator()</code><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span>&lt;<span class="type">K</span>&gt; newKeyIterator() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">KeyIterator</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator&lt;K&gt;</span> </span>&#123;</span><br><span class="line">    public <span class="type">K</span> next() &#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry().getKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以在for中还是调用了<br>在第二个循环for(Entry&lt;String, String[]&gt; entry : paraMap.entrySet())中使用的Iterator是如下的一个内部类<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator&lt;Map</span>.<span class="title">Entry&lt;K</span>,<span class="title">V&gt;&gt;</span> </span>&#123;</span><br><span class="line">    public <span class="type">Map</span>.<span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; next() &#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时第一个循环得到key，第二个循环得到HashMap的Entry效率就是从循环里面体现出来的第二个循环此致可以直接取key和value值而第一个循环还是得再利用HashMap的get(Object key)来取value值现在看看HashMap的get(Object key)方法<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">    <span class="keyword">Object</span> k = maskNull(<span class="built_in">key</span>);</span><br><span class="line">    <span class="built_in">int</span> hash = hash(k);</span><br><span class="line">    <span class="built_in">int</span> i = indexFor(hash, table.length); <span class="comment">//Entry[] table</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; eq(k, e.<span class="built_in">key</span>))</span><br><span class="line">            <span class="keyword">return</span> e.value;</span><br><span class="line">        e = e.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实就是再次利用Hash值取出相应的Entry做比较得到结果，所以使用第一中循环相当于两次进入HashMap的Entry</p><p>中而第二个循环取得Entry的值之后直接取key和value，效率比第一个循环高。其实按照Map的概念来看也应该是用第二个循环好一点，它本来就是key和value的值对，将key和value分开操作在这里不是个好选择。</p><p><strong>27、array(数组) 和 ArryList的使用</strong></p><p>array（[]）：最高效；但是其容量固定且无法动态改变；<br>ArrayList：容量可动态增长；但牺牲效率；<br>基于效率和类型检验，应尽可能使用array，无法确定数组大小时才使用ArrayList！<br>ArrayList是Array的复杂版本<br>ArrayList内部封装了一个Object类型的数组，从一般的意义来说，它和数组没有本质的差别，甚至于ArrayList的许多方法，如Index、IndexOf、Contains、Sort等都是在内部数组的基础上直接调用Array的对应方法。<br>ArrayList存入对象时，抛弃类型信息，所有对象屏蔽为Object，编译时不检查类型，但是运行时会报错。<br>注：jdk5中加入了对泛型的支持，已经可以在使用ArrayList时进行类型检查。<br>从这一点上看来，ArrayList与数组的区别主要就是由于动态增容的效率问题了</p><p><strong>28、尽量使用HashMap 和ArrayList ,除非必要，否则不推荐使用HashTable和Vector ，后者由于使用同步机制，而导致了性能的开销。</strong></p><p><strong>29、StringBuffer 和StringBuilder的区别：</strong></p><p>java.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。</p><p>StringBuilder。与该类相比，通常应该优先使用 java.lang.StringBuilder类，因为它支持所有相同的操作，但由于它不执行同步，所以速度更快。为了获得更好的性能，在构造 StirngBuffer 或 StirngBuilder 时应尽可能指定它的容量。当然，如果你操作的字符串长度不超过 16 个字符就不用了。 相同情况下使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%-15% 左右的性能提升，但却要冒多线程不安全的风险。而在现实的模块化编程中，负责某一模块的程序员不一定能清晰地判断该模块是否会放入多线程的环境中运行，因此：除非你能确定你的系统的瓶颈是在 StringBuffer 上，并且确定你的模块不会运行在多线程模式下，否则还是用 StringBuffer 吧。</p><p><strong>30、尽量避免使用split</strong></p><p>除非是必须的，否则应该避免使用split，split由于支持正则表达式，所以效率比较低，如果是频繁的几十，几百万的调用将会耗费大量资源，如果确实需要频繁的调用split，可以考虑使用apache的 StringUtils.split(string,char)，频繁split的可以缓存结果。</p><p>其他补充:</p><p>1、及时清除不再使用的对象，设为null<br>2、尽可能使用final,static等关键字<br>3、尽可能使用buffered对象</p><p>如何优化代码使JAVA源文件及编译后CLASS文件更小</p><p>1 尽量使用继承，继承的方法越多，你要写的代码量也就越少</p><p>2 打开JAVA编译器的优化选项： javac -O 这个选项将删除掉CLASS文件中的行号，并能把<br>一些private, static,final的小段方法申明为inline方法调用</p><p>3 把公用的代码提取出来</p><p>4 不要初始化很大的数组，尽管初始化一个数组在JAVA代码中只是一行的代码量，但<br>编译后的代码是一行代码插入一个数组的元素，所以如果你有大量的数据需要存在数组<br>中的话，可以先把这些数据放在String中，然后在运行期把字符串解析到数组中</p><p>5 日期类型的对象会占用很大的空间，如果你要存储大量的日期对象，可以考虑把它存储为<br>long型，然后在使用的时候转换为Date类型</p><p>6 类名，方法名和变量名尽量使用简短的名字，可以考虑使用Hashjava, Jobe, Obfuscate and Jshrink等工具自动完成这个工作</p><p>7 将static final类型的变量定义到Interface中去</p><p>8 算术运算 能用左移/右移的运算就不要用*和/运算，相同的运算不要运算多次</p><p>2、不要两次初始化变量<br>Java通过调用独特的类构造器默认地初始化变量为一个已知的值。所有的对象被设置成null，integers (byte, short, int, long)被设置成0，float和double设置成0.0，Boolean变量设置成false。这对那些扩展自其它类的类尤其重要，这跟使用一个新的关键词创建一个对象时所有一连串的构造器被自动调用一样。</p><p>3、在任何可能的地方让类为Final<br>标记为final的类不能被扩展。在《核心Java API》中有大量这个技术的例子，诸如java.lang.String。将String类标记为final阻止了开发者创建他们自己实现的长度方法。<br>更深入点说，如果类是final的，所有类的方法也是final的。Java编译器可能会内联所有的方法（这依赖于编译器的实现）。在我的测试里，我已经看到性能平均增加了50%。</p><p>3、异常在需要抛出的地方抛出，try catch能整合就整合<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    some.method1(); <span class="comment">// Difficult for javac</span></span><br><span class="line">&#125; <span class="keyword">catch</span>( method1Exception e ) &#123; <span class="comment">// and the JVM runtime</span></span><br><span class="line">    <span class="comment">// Handle exception 1 // to optimize this</span></span><br><span class="line">&#125; <span class="comment">// code</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    some.method2();</span><br><span class="line">&#125; <span class="keyword">catch</span>( method2Exception e ) &#123;</span><br><span class="line">    <span class="comment">// Handle exception 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    some.method3();</span><br><span class="line">&#125; <span class="keyword">catch</span>( method3Exception e ) &#123;</span><br><span class="line">    <span class="comment">// Handle exception 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>已下代码 更容易被编译器优化<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    some.method<span class="number">1</span><span class="comment">()</span>; <span class="comment">// Easier to optimize</span></span><br><span class="line">    some.method<span class="number">2</span><span class="comment">()</span>;</span><br><span class="line">    some.method<span class="number">3</span><span class="comment">()</span>;</span><br><span class="line">&#125; catch<span class="comment">( method1Exception e )</span> &#123;</span><br><span class="line">    <span class="comment">// Handle exception 1</span></span><br><span class="line">&#125; catch<span class="comment">( method2Exception e )</span> &#123;</span><br><span class="line">    <span class="comment">// Handle exception 2</span></span><br><span class="line">&#125; catch<span class="comment">( method3Exception e )</span> &#123;</span><br><span class="line">    <span class="comment">// Handle exception 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、For循环的优化</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Replace…</span><br><span class="line"><span class="keyword">for</span>( int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; collection.<span class="built_in">size</span>(); <span class="built_in">i</span>++ ) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">with…</span><br><span class="line"><span class="keyword">for</span>( int <span class="built_in">i</span> = <span class="number">0</span>, n = collection.<span class="built_in">size</span>(); <span class="built_in">i</span> &lt; n; <span class="built_in">i</span>++ ) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、 在JAVA + ORACLE 的应用系统开发中，java中内嵌的SQL语句尽量使用大写的形式，以减轻ORACLE解析器的解析负担。</p><p>6、尽量采用lazy loading 的策略，即在需要的时候才开始创建。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例如： <span class="keyword">String</span> <span class="built_in">str</span> = “aaa”;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">    list.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br><span class="line">应替换为：</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">str</span> = “aaa”;</span><br><span class="line">    list.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7、不要在循环中使用：<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>应把其放置在最外层</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;帮助开发人员夯实基础，从规范的编码操作开始，培养良好的编码习惯，助力未来技术成长。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过java代码规范来优化程序，优化内存使用情况，防止内存泄露&lt;/p&gt;
&lt;p&gt;可供程序利用的资源（内存、CPU时间、网络带
      
    
    </summary>
    
    
      <category term="Java" scheme="https://dddreams.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-Thymeleaf模版引擎</title>
    <link href="https://dddreams.github.io/180718-Thymeleaf%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E.html"/>
    <id>https://dddreams.github.io/180718-Thymeleaf模版引擎.html</id>
    <published>2019-01-04T10:07:00.000Z</published>
    <updated>2020-01-03T05:09:15.938Z</updated>
    
    <content type="html"><![CDATA[<p>上一节我们简单的认识了 Thymeleaf，并简单介绍了它与 Spring Boot 的结合，这一节来具体的看一下，Thymeleaf 是的语法和应用。</p><h2 id="创建模版文件"><a href="#创建模版文件" class="headerlink" title="创建模版文件"></a>创建模版文件</h2><p>创建文件其实在上节中已经说过，这边在重复一遍，新建 <code>HTML</code> 文件，在头文件中添加 <code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong>html 中的标签必须严格规范，标签必须闭合，即<code>&lt;div /&gt;</code>技术或者<code>&lt;/div&gt;</code>类似结束。</p><h2 id="表达式语法"><a href="#表达式语法" class="headerlink" title="表达式语法"></a>表达式语法</h2><p>它们分为四类：</p><ul><li>1.变量表达式</li><li>2.选择或星号表达式</li><li>3.通用 Message 表达式</li><li>4.URL表达式</li></ul><h3 id="变量表达式"><a href="#变量表达式" class="headerlink" title="变量表达式"></a>变量表达式</h3><p>ongl标准语法或者 Spring EL 表达式 <code>${user.userName}</code>，它们将以 html 标签的一个属性来表示</p><h3 id="选择或星号表达式"><a href="#选择或星号表达式" class="headerlink" title="选择或星号表达式"></a>选择或星号表达式</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*</span></span></span><span class="template-variable">&#123;firstName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*</span></span></span><span class="template-variable">&#123;lastName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">*</span></span></span><span class="template-variable">&#123;nationality&#125;</span><span class="xml"><span class="tag">"&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">等价于</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.firstName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.lastName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.nationality&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">当然了，这两者可以混合使用</span></span><br><span class="line"><span class="xml">还有一种方式</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*</span></span></span><span class="template-variable">&#123;user.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*</span></span></span><span class="template-variable">&#123;user.surname&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*</span></span></span><span class="template-variable">&#123;user.nationality&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="通用-Message-表达式"><a href="#通用-Message-表达式" class="headerlink" title="通用 Message 表达式"></a>通用 Message 表达式</h3><p>通用表达式允许我们从外部的配置文件（properties）中取值，用 Key，Value的形式。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#&#123;main.title&#125;  </span></span><br><span class="line"><span class="meta">#&#123;message.entrycreated($&#123;entryId&#125;)&#125;</span></span><br></pre></td></tr></table></figure></p><p>可以在模板文件中找到这样的表达式代码：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;header.address.city&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;header.address.country&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h3 id="URL表达式"><a href="#URL表达式" class="headerlink" title="URL表达式"></a>URL表达式</h3><p>URL表达式指的是把一个有用的上下文或回话信息添加到URL，这个过程经常被叫做URL重写。<br> <code>@{/order/list}</code><br>URL还可以设置参数：<br> <code>@{/order/details(id=${orderId})}</code><br>相对路径：<br> <code>@{../documents/report}</code></p><h2 id="表达式支持的语法"><a href="#表达式支持的语法" class="headerlink" title="表达式支持的语法"></a>表达式支持的语法</h2><p><strong>字面（Literals）</strong></p><ul><li>文本文字（Text literals）: ‘one text’, ‘Another one!’,…</li><li>数字文本（Number literals）: 0, 34, 3.0, 12.3,…</li><li>布尔文本（Boolean literals）: true, false</li><li>空（Null literal）: null</li><li>文字标记（Literal tokens）: one, sometext, main,…</li></ul><p><strong>文本操作（Text operations）</strong></p><ul><li>字符串连接(String concatenation): +</li><li>文本替换（Literal substitutions）: |The name is ${name}|</li></ul><p><strong>算术运算（Arithmetic operations）</strong></p><ul><li>二元运算符（Binary operators）: +, -, *, /, %</li><li>减号（单目运算符）Minus sign (unary operator): -</li></ul><p><strong>布尔操作（Boolean operations）</strong></p><ul><li>二元运算符（Binary operators）:and, or</li><li>布尔否定（一元运算符）Boolean negation (unary operator):!, not</li></ul><p><strong>比较和等价(Comparisons and equality)</strong></p><ul><li>比较（Comparators）: &gt;, &lt;, &gt;=, &lt;= (gt, lt, ge, le)</li><li>等值运算符（Equality operators）:==, != (eq, ne)</li></ul><p><strong>条件运算符（Conditional operators）</strong></p><ul><li>If-then: (if) ? (then)</li><li>If-then-else: (if) ? (then) : (else)</li><li>Default: (value) ?: (defaultvalue)</li></ul><h2 id="th-标签"><a href="#th-标签" class="headerlink" title="th 标签"></a>th 标签</h2><p>参考 thymeleaf 官方文档：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.pdf" target="_blank" rel="noopener">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.pdf</a></p><h2 id="常用的使用方法"><a href="#常用的使用方法" class="headerlink" title="常用的使用方法"></a>常用的使用方法</h2><h2 id="相关参考和链接"><a href="#相关参考和链接" class="headerlink" title="相关参考和链接"></a>相关参考和链接</h2><p>Thymeleaf 模板的使用：<a href="http://www.cnblogs.com/lazio10000/p/5603955.html" target="_blank" rel="noopener">http://www.cnblogs.com/lazio10000/p/5603955.html</a></p><p>新一代Java模板引擎Thymeleaf：<a href="https://www.tianmaying.com/tutorial/using-thymeleaf" target="_blank" rel="noopener">https://www.tianmaying.com/tutorial/using-thymeleaf</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一节我们简单的认识了 Thymeleaf，并简单介绍了它与 Spring Boot 的结合，这一节来具体的看一下，Thymeleaf 是的语法和应用。&lt;/p&gt;
&lt;h2 id=&quot;创建模版文件&quot;&gt;&lt;a href=&quot;#创建模版文件&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-单元测试及Thymeleaf模版</title>
    <link href="https://dddreams.github.io/180716-SpringBoot-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8AThymeleaf%E6%A8%A1%E7%89%88.html"/>
    <id>https://dddreams.github.io/180716-SpringBoot-单元测试及Thymeleaf模版.html</id>
    <published>2018-08-13T03:20:51.000Z</published>
    <updated>2021-01-26T03:16:00.702Z</updated>
    
    <content type="html"><![CDATA[<p>上一节中我们已经做了一个简单的 Hello world！应用，这一节我们来学习 Spring Boot 的 web 开发。以前做过 web 的童鞋都知道，一个 web 应用最常用的就是 MVC 的模式 jsp(视图层)，Servlet(控制层)，Dao(数据持久层)，另外还会用到 单元测试，Json，Filte，Property，Log，数据库操作，热部署等一些相关的技术。这节我们就来看看在 Spring Boot 中是如何使用这些技术的。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>我们来为上节中的 hello world！应用进行单元测试。Spring Boot 的单元测试推荐使用 <code>mockmvc</code> 来进行，好处是不用启动服务即可进行测试。首先添加 test 的 maven 依赖, test 的依赖默认是存在的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>src/test/</code> 下面新建包 controller ，然后新建类 HelloTest.java。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"hello world!"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试方法。</p><h2 id="Jsp-Or-Thymeleaf"><a href="#Jsp-Or-Thymeleaf" class="headerlink" title="Jsp Or Thymeleaf"></a>Jsp Or Thymeleaf</h2><p>Spring Boot 推荐使用 Thymeleaf 来代替 Jsp，那么我们先来认识一下 Thymeleaf 是个什么东东</p><h3 id="Thymeleaf-是个什么？"><a href="#Thymeleaf-是个什么？" class="headerlink" title="Thymeleaf 是个什么？"></a>Thymeleaf 是个什么？</h3><p>Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：</p><ul><li>Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li></ul><h3 id="如何应用"><a href="#如何应用" class="headerlink" title="如何应用"></a>如何应用</h3><p> 同样的首先添加 Thymeleaf 的 maven 组件依赖，这就是 Spring Boot 的优点，把所有优秀的组件都集成进来，使用时仅仅添加依赖就可以了。<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> <code>spring-boot-starter-thymeleaf</code> 组件中已经包含了 web 的组件，也可以将 <code>spring-boot-starter-web</code> 依赖删除。</p><p> 然后在 <code>resources/templates/</code> 下新建 <code>hello.html</code> <strong>注意</strong>添加头文件 <code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code><br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改 <code>HelloController</code> 与 <code>hello.html</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String hello(Model model,</span><br><span class="line">            <span class="meta">@RequestParam(value=<span class="meta-string">"name"</span>, required=false, defaultValue=<span class="meta-string">"World"</span>)</span> String name)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Boot<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Hello, ' + $</span></span></span><span class="template-variable">&#123;name&#125;</span><span class="xml"><span class="tag"><span class="string"> + '!'"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>启动服务，访问 <code>http://localhost:8080/hello?name=Shure</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20180716/20180716184202.png" alt="hello shure" title>                </div>                <div class="image-caption">hello shure</div>            </figure></p><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>纯洁的微笑博客：<a href="http://www.ityouknow.com/springboot/2016/01/06/spring-boot-quick-start.html" target="_blank" rel="noopener">http://www.ityouknow.com/springboot/2016/01/06/spring-boot-quick-start.html</a></p><p>thymeleaf参考手册 by CSDN：<a href="https://blog.csdn.net/zrk1000/article/details/72667478" target="_blank" rel="noopener">https://blog.csdn.net/zrk1000/article/details/72667478</a></p><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-helloWorld" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-helloWorld</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一节中我们已经做了一个简单的 Hello world！应用，这一节我们来学习 Spring Boot 的 web 开发。以前做过 web 的童鞋都知道，一个 web 应用最常用的就是 MVC 的模式 jsp(视图层)，Servlet(控制层)，Dao(数据持久层)，另外还
      
    
    </summary>
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>给“抽奖助手”的一点点建议</title>
    <link href="https://dddreams.github.io/180717-%E7%BB%99%E6%8A%BD%E5%A5%96%E5%8A%A9%E6%89%8B%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E5%BB%BA%E8%AE%AE.html"/>
    <id>https://dddreams.github.io/180717-给抽奖助手的一点点建议.html</id>
    <published>2018-07-17T10:02:32.000Z</published>
    <updated>2018-07-17T10:14:34.907Z</updated>
    
    <content type="html"><![CDATA[<p>“抽奖助手”是无码科技做的一款小程序，如果你不知道无码科技，冯大辉你一定听说过吧，“抽奖助手”就是他家的产品，当然如果你听说过冯大辉那么你一定知道他的言论是有多么的犀利，尤其是对互联网产品，吐槽起来一针见血见解独到，好多公司都不敢让他来测评自家的产品，怕被爆出很多问题来，今天我也要给他家的产品“抽奖助手”提一点建议。</p><p>之前在冯大的公众号上看过一篇关于推荐系统和用户画像的文章，标题是什么我忘了，我觉得那篇文章写的很好，也是收益与那篇文章的启发，提出这点建议。</p><p>首先要感谢“抽奖助手”昨天我中奖了，很激动，我参与抽奖460多次，这是第一次中奖，然而我仔细一看中奖的内容却是“婴儿屁屁湿巾”，我激动的心情一下就没了，我一个还没结婚的人，让我中这么个奖，你说让我领呢还是不领呢？</p><p>所以我的建议是，通过用户画像分析出参与抽奖用户的基本情况，筛选出一些真正有需要该奖品的用户，让其中奖，这样让中奖者不再有心理上的落差。比如说，我是一个程序员，肯定对电子产品有浓厚的兴趣，如果奖品是个机械键盘什么的，可以优先让像我这样有兴趣的一类用户中奖，而不是在家带孩子的宝妈；再比如，奖品是婴儿用品，通过对参与抽奖的用户的分析，优先让拥有宝妈、已婚、刚结婚等属性的用户中奖，而不是像我这样还没结婚的用户，这样是不是更接近完美了呢。</p><p>可能有人会反驳了，你看到婴儿用品可以不参与啊，为什么你不想要，还要参与抽奖呢？其实，在“抽奖助手”里有很多人是不看奖品是什么的，直接划到最后点击“参与抽奖”，要知道一个奖项参与的用户好几十万，如果设定只有一人中奖，那么中奖的概率几十万分之一，很多人已经不报有中奖的希望，只是重在参与而已。所以这种反驳个人认为已经可以排除在外了。</p><p>也许这就是作为一个程序员对产品的一点点思考吧，下面推荐一个抽奖，扫码参与，或许会中奖哦！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20180717/20180717154849.jpg" alt="抽奖啦" title>                </div>                <div class="image-caption">抽奖啦</div>            </figure><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“抽奖助手”是无码科技做的一款小程序，如果你不知道无码科技，冯大辉你一定听说过吧，“抽奖助手”就是他家的产品，当然如果你听说过冯大辉那么你一定知道他的言论是有多么的犀利，尤其是对互联网产品，吐槽起来一针见血见解独到，好多公司都不敢让他来测评自家的产品，怕被爆出很多问题来，今
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://dddreams.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-入坑SpringBoot</title>
    <link href="https://dddreams.github.io/180710-%E5%85%A5%E5%9D%91SpringBoot.html"/>
    <id>https://dddreams.github.io/180710-入坑SpringBoot.html</id>
    <published>2018-07-11T03:43:32.000Z</published>
    <updated>2021-01-26T03:15:50.312Z</updated>
    
    <content type="html"><![CDATA[<p>做 Java 开发的小伙伴无人不知，无人不晓的 Spring ，一个叫做春的框架。以前的我们对 Spring 是既爱又恨，为什么呢，爱是因为它的便捷，恨是因为它的繁琐（这本来就是一个矛盾），后来 Spring Boot 诞生了，妈妈再也不用担心人们会恨它了。</p><h2 id="什么是-Spring-Boot"><a href="#什么是-Spring-Boot" class="headerlink" title="什么是 Spring Boot"></a>什么是 Spring Boot</h2><p>Spring Boot 是一个全新的框架，准确的说它不算是一个框架，它集成了所有常用框架，通过特定的方式配置，简化了基于 Spring 的应用开发,通过少量的代码就能创建一个独立的、产品级別的 Spring 应用，可以说它是一个框架的集合。</p><h2 id="Spring-Boot-的优点"><a href="#Spring-Boot-的优点" class="headerlink" title="Spring Boot 的优点"></a>Spring Boot 的优点</h2><p>想想我们在使用 SpringMVC 的时候，搭建一个项目要写（web.xml，applicationContext.xml，dispatcher-servlet.xml等等等）这么多的 xml 配置文件，要有数据库连接配置，spring 事务配置，日志文件配置等一大堆配置后部署到 tomcat 运行，而且如果是一个简单的应用程序，例如发送一份邮件，也需要编写这么多的配置。</p><p>然而用 Spring Boot 就很简单了，几个简单的配置就能搭建出一套 web 服务或者微服务，Spring Boot 非常易于微服务的开发和 RESTful 接口开发。它的一大优点是提高开发者的生产力，因为它已经提供了许多通用的功能，很容易进行装配及使用。</p><h2 id="创建第一个-Spring-Boot-应用"><a href="#创建第一个-Spring-Boot-应用" class="headerlink" title="创建第一个 Spring Boot 应用"></a>创建第一个 Spring Boot 应用</h2><p>Spring Boot 能够无缝地为基于Maven和Gradle的项目提供各种构建工具，接下来我们就用 Maven 构建第一个应用。<br>打开 <a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20180710/20180710184559.png" alt="第一个应用" title>                </div>                <div class="image-caption">第一个应用</div>            </figure><p>选择 Maven Project 使用 Java 语言，然后填写应用的基本信息，点击 <code>Generate Project</code> 就会下载下来，解压之后导入你的 IDE ,初始化的项目就长这个样子</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20180710/20180710185606.png" alt="初始项目目录" title>                </div>                <div class="image-caption">初始项目目录</div>            </figure><p>然后引入 web 模块，编写 pom.xml, 添加包依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml 文件中默认的有两个模块<br><code>spring-boot-starter</code> ：核心模块，包括自动配置支持、日志和YAML；<br><code>spring-boot-starter-test</code> ：测试模块，包括JUnit、Hamcrest、Mockito。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>新建 controller 包，新建 HelloController 类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String hello()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RestController</code> 的意思就是controller里面的方法都以json格式输出，不用再写什么jackjson配置的了！</p><p>启动应用程序，在后台会看到 Spring 的字样说明已经启动成功，打开浏览器地址栏输入 localhost:8080 ，出现 hello world! ，这样我们的第一个 Spring Boot 应用程序就好了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/20180710/20180711111926.png" alt="hello world" title>                </div>                <div class="image-caption">hello world</div>            </figure><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>Spring Boot 官网：<a href="http://spring.io/projects/spring-boot" target="_blank" rel="noopener">http://spring.io/projects/spring-boot</a></p><p>纯洁的微笑博客：<a href="http://www.ityouknow.com/spring-boot.html" target="_blank" rel="noopener">http://www.ityouknow.com/spring-boot.html</a></p><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-helloWorld" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-helloWorld</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做 Java 开发的小伙伴无人不知，无人不晓的 Spring ，一个叫做春的框架。以前的我们对 Spring 是既爱又恨，为什么呢，爱是因为它的便捷，恨是因为它的繁琐（这本来就是一个矛盾），后来 Spring Boot 诞生了，妈妈再也不用担心人们会恨它了。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://dddreams.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>关于个人隐私泄露，你怎么看？</title>
    <link href="https://dddreams.github.io/180331-%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E9%9A%90%E7%A7%81%E6%B3%84%E9%9C%B2%EF%BC%8C%E4%BD%A0%E6%80%8E%E4%B9%88%E7%9C%8B%EF%BC%9F.html"/>
    <id>https://dddreams.github.io/180331-关于个人隐私泄露，你怎么看？.html</id>
    <published>2018-03-31T01:03:32.000Z</published>
    <updated>2018-04-21T07:20:39.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们的个人隐私数据是怎么泄露的？</p></blockquote><p>去年的时候公司加入了一项健康指标考核，各团队在企业咕咚里创建了运动团队，以每个月走的步数考核员工健康，我们团队制定了每月 20 万步的指标，规定一出大家都想方设法的刷步数，有的用手摇，有的抖腿，还有的直接买了刷步神器。而在前几天咕咚突然要收费了，而且费用还不少，公司不愿花钱，所以找可以替代的应用，听同事们说有一款叫做「钉钉」的企业应用，用的人挺多，于是就下载注册体验一下，注册之后，提示获取各种权限，地理位置，消息推送通知，网络，还有通讯录，我一贯的做法是除了网络，其他都不允许，但是进入应用之后发现已经有两位朋友了，而且还是我的手机通讯录的朋友，这让我挺纳闷的，仔细一想，应该是朋友注册的时候允许通讯录的权限了，一下子对这个应用好感全无；大概浏览了几页，真不愧是跟某宝出自一家啊，上面应有尽有，你所想不到的都做上去了，然而就是没有运动计步的。</p><p>小的时候，大人们总爱看孩子的隐私，撬你上了锁的日记本，偷看你的手机短信，聊天记录，我们感觉很气愤。大人们却不这么想，“你有什么不能让我看的，不能看就是有鬼！”，我们盼望这长大，长大后就可以保护我们的隐私和心事了。</p><p>然而长大后，在这个网络时代，我们近似于裸奔。你在网上点到了贷款的广告，接下来的几天里就接到数个贷款推销的电话；你下载了一个拍照 APP ，发现它索要联系人权限，你拒绝了，然后这个 APP 就不能用了；你在某宝软件上想看一下去年的消费情况，结果发现自己不知不觉又把权限开放出去了。</p><p>前几天李彦宏在中国发展高层论坛的一次对话中说“中国人对隐私问题的态度更加开放，相对来说也没有那么敏感。如果可以用隐私换取利益、安全、或者效率，在很多情况下他们是愿意这么做的”。这段话迅速上了各大媒体的新闻标题，并遭到了网民的炮轰。然而事件过后细想时，发现李彦宏只不过是说了句大实话而已，现在的国人不就是这样吗？朋友圈里每天领优惠券，领红包的广告没少见吧，但是打开都会让你注册或者填写手机号码领取，又有多少人放弃了领红包的想法而拒绝填写自己的手机号呢？</p><p>再前几天 Facebook 数据泄露，股价暴跌，6个交易日市值缩掉了一个百度。如果这件事发生在中国，那都不算事，谁在乎那些数据呢？</p><p>我们的个人数据是怎么泄露的，是我们为了领几块钱的红包拱手相让的，还是那些流氓企业在无声无息中偷偷获取的。互联网时代，我们都忙着抢红包薅羊毛了；下一个时代，人工智能时代，隐私对我们来说还是那么无所谓么？</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们的个人隐私数据是怎么泄露的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;去年的时候公司加入了一项健康指标考核，各团队在企业咕咚里创建了运动团队，以每个月走的步数考核员工健康，我们团队制定了每月 20 万步的指标，规定一出大家都想方设法的刷步数，
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://dddreams.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>欢迎入坑小程序</title>
    <link href="https://dddreams.github.io/180326-%E6%AC%A2%E8%BF%8E%E5%85%A5%E5%9D%91%E5%B0%8F%E7%A8%8B%E5%BA%8F.html"/>
    <id>https://dddreams.github.io/180326-欢迎入坑小程序.html</id>
    <published>2018-03-26T01:03:32.000Z</published>
    <updated>2018-04-21T07:24:57.309Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小马哥家的微信，微信家的小程序，来吧欢迎入坑小程序</p></blockquote><p>今天的公众号圈里各大佬都在推荐一门课程「9小时搞定微信小程序开发」，于是乎我也入坑了小程序，这样显得跟大佬们一样肩并肩了，哈哈 </p><p>关于小程序就不在介绍什么了，今年年初的「跳一跳」相信大家都玩的不亦乐乎，很显然小程序已经走上了一个新的舞台。昨天在深圳举办的第 10 届2018中国 IT 领袖峰会上，小马哥说了 “小程序已经成为中国编程者一个非常热门的编程环境和正在热情学习的语言环境” ，所以说小程序是一个趋势。</p><p>为什么说小程序是一个趋势呢，首先它基于微信，可以通过微信的关系链上流动获客；其次它无需安装，打开只需要用微信扫一扫即可，你再也不用担心你的 iphone 的存储空间不够了；第三它简单实用，不像现在的某宝，打开之后你还能认识它最开始是一个用来的支付的 APP 么，其实更多的用户安装 APP 只是使用它特定的一两个功能，其他的可要可不要，而小程序恰恰做到了这一点，简单独有的功能，这就够了。</p><p>前些日子，九大厂商「小米、华为、中兴、金立、联想、魅族、努比亚、oppo、vivo」联合推出了一个叫做「快应用」的项目，其实说白了，就是桌面快捷方式，无需安装，直接可以再桌面打开，类似于微信小程序，实现方式也类似与 React Native，Weex 之类的，性能介于 Web 和原生之间。看吧，小程序已经对一些厂商产生了威胁，要知道国内的手机厂商在手机上根本不赚钱，而赚钱的是广告和预装 app ，这就是为什么刚买的新手机上预装了那么多 app 的原因。而有了小程序，装一个微信就够了，谁还愿意花重金在手机上预装 app 啊，所以九大厂商也意识到了情势的严峻搞了个「快应用」出来。</p><p>今天正好看到「极客时间」上推出了关于小程序的课程，我毫不犹豫的跳进去了，来吧，长按下方图片识别二维码，成为一个小程序大神，走起…<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/20180326/xiaochengxu.jpg" alt="9小时搞定微信小程序开发" title>                </div>                <div class="image-caption">9小时搞定微信小程序开发</div>            </figure></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;小马哥家的微信，微信家的小程序，来吧欢迎入坑小程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天的公众号圈里各大佬都在推荐一门课程「9小时搞定微信小程序开发」，于是乎我也入坑了小程序，这样显得跟大佬们一样肩并肩了，哈哈 &lt;/p&gt;
&lt;p&gt;关于小程序
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://dddreams.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>推荐一些常看的公众号，不是互推</title>
    <link href="https://dddreams.github.io/180324-%E6%8E%A8%E8%8D%90%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%9C%8B%E7%9A%84%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%8C%E4%B8%8D%E6%98%AF%E4%BA%92%E6%8E%A8.html"/>
    <id>https://dddreams.github.io/180324-推荐一些常看的公众号，不是互推.html</id>
    <published>2018-03-24T01:03:32.000Z</published>
    <updated>2018-03-24T09:44:21.496Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我倒是想互推呢，，，</p></blockquote><p>看过很多推荐公众号的文章，总有人留言说是互推的吧，其实我倒是想互推呢，能让这些大佬推荐，能不火都不行，要知道他们的公众号读者至少 10+ ，能让他们推荐，那真是荣幸。</p><p>这几个号其实之前就推荐过，只所以再次推荐，是因为这一年来我一直跟随着这几个公众号成长的，他们的坚持给了我很大的帮助，无论是从认知，行业现状，技术发展等各个方面，18年的前三个月又懈怠了这件事，一直以来都想跟他们一样坚持做自己想做的事。「制定一个目标，想坚持一件事情。这一次，是认真的，真的是认真的」。</p><h3 id="1、stormzhang"><a href="#1、stormzhang" class="headerlink" title="1、stormzhang"></a>1、stormzhang</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/20180324/stormzhang.jpeg" alt="stormzhang" title>                </div>                <div class="image-caption">stormzhang</div>            </figure><p>stormzhang， 不是第一次推荐了，他是一个非常值得让人敬佩的人，非科班出身，自学编程，现在成为公司的技术管理者，坚持写作 5,6 年了，前段时间因为他的知识星球 「帅张和他的朋友们」 第二期续费，日入 10w+ ，目前付费用户 6000+ ，前几天还被知识星球官方采访 <a href="https://mp.weixin.qq.com/s/icJpggvBEpWtqzAxF6hjCQ" target="_blank" rel="noopener">他不把运气放在眼里，用努力完成从学渣到职场高手的逆袭</a>，因此他自己也做了总结，个人觉得这是一篇很不错的文章 <a href="http://mp.weixin.qq.com/s/6nby0vu40SxFR8tCe4Wy5g" target="_blank" rel="noopener">一个新的里程碑</a>。</p><h3 id="2、MacTalk"><a href="#2、MacTalk" class="headerlink" title="2、MacTalk"></a>2、MacTalk</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/20180324/MacTalk.jpg" alt="MacTalk" title>                </div>                <div class="image-caption">MacTalk</div>            </figure><p>池老师，老程序员，先后任职洪恩软件和用友集团，从事互联网和企业应用软件研发，还在锤子科技担任过总监，目前加盟极客邦科技，任总裁。喜爱编程和写作，坚持年轻时的理想。他的文章文风有趣，又有一点力量。去年极客帮团队上线的APP「极客时间」也是非常棒的产品，可以说是程序员的福利。</p><h3 id="3、小道消息"><a href="#3、小道消息" class="headerlink" title="3、小道消息"></a>3、小道消息</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/20180324/fenng.jpeg" alt="小道消息" title>                </div>                <div class="image-caption">小道消息</div>            </figure><p>冯老师，也是一个值得让人敬佩的人，常以不同与常人的思维思考问题，写文章也是，有独到的见解，时而风趣，时而讲真，在很多地方可以找到他的身影，推特、公众号、知识星球、微博等等，目前正在创业中，他的创业公司无码科技出品的产品「Readhub」是一个极简，有价值，注重与用户体验的产品。他们的产品特别重视用户体验，其中入住微信小程序的「Readhub」，「抽奖助手」也得到了用户的好评。</p><h3 id="4、keso-怎么看"><a href="#4、keso-怎么看" class="headerlink" title="4、keso 怎么看"></a>4、keso 怎么看</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/20180324/kesoview.jpg" alt="keso 怎么看" title>                </div>                <div class="image-caption">keso 怎么看</div>            </figure><p>洪波，不是程序员，独立IT评论人，以犀利的笔锋、独到的观点著名。keso 的文字就像是重剑无锋一样，大巧不工，不花哨，不抖机灵，扎实，有力度，有深度。</p><p>关注上车，老司机要开车了。。。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我倒是想互推呢，，，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看过很多推荐公众号的文章，总有人留言说是互推的吧，其实我倒是想互推呢，能让这些大佬推荐，能不火都不行，要知道他们的公众号读者至少 10+ ，能让他们推荐，那真是荣幸。&lt;/p&gt;
&lt;p&gt;这
      
    
    </summary>
    
    
      <category term="推荐" scheme="https://dddreams.github.io/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>工作两年之后</title>
    <link href="https://dddreams.github.io/171231-%E5%B7%A5%E4%BD%9C%E4%B8%A4%E5%B9%B4%E4%B9%8B%E5%90%8E.html"/>
    <id>https://dddreams.github.io/171231-工作两年之后.html</id>
    <published>2018-01-03T01:03:32.000Z</published>
    <updated>2018-01-03T01:07:26.976Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我的 2017 年终总结</p></blockquote><p>又是一年年尾，今年的年尾好像显得尤为重要似的，每个人都在谈论 “再见2017,你好2018” 的话题，朋友圈继圣诞帽的热潮之后，又掀起了 “我的 18 岁” 热潮，2017 年的我们越来越喜欢跟风刷存在感，相比前面两种热潮我更青睐于知乎上年终总结的热潮。</p><p>用两个字总结这一年，那就是「忙碌」，可是在写这篇总结的时候却发现可写的没有多少，说白了是收获没有多少，除了年龄上的收获外，其他的都没有那么明显了。</p><h2 id="最大的变化"><a href="#最大的变化" class="headerlink" title="最大的变化"></a>最大的变化</h2><p>这一年最大的变化就是每天上班做的第一件事，以往的时候上班第一件事先是打开掘金或者知乎刷几篇热门的技术文章，而今年上班第一件事必然是打开我们所开发的平台，点点自己负责的模块，看看系统是否运行正常，然后开始一天的工作。工作上，不在是整天埋头敲代码，更多的是考虑如何设计，如何分配，如何提高效率，一天的时间几乎被一些琐碎的杂事请所占据，从而显得疲惫了不少，也正是因为这些琐碎的杂事请，每天感觉什么也没做，反而使人更累，回头想想还是安安静静的敲代码来的爽快。技术上，几乎没有什么进展，每天忙碌下来，上班期间根本没有时间去看技术文档，下班后又感觉很累也就没心思学习了，再加上技术更新换代的速度太快，明显感觉到跟不上的节奏，想想也罢，一味的追逐新技术不是什么好事。生活上，那就更不用说了，一如既往的单调，除了熬夜越来越迟，头发越来越少之外在没有什么了。相比 16 年的总结「工作一年之后」，方向已经大有变化，但是技术人不能丢弃技术，这是毋庸置疑的。</p><h2 id="对自己的投资"><a href="#对自己的投资" class="headerlink" title="对自己的投资"></a>对自己的投资</h2><p>不错，在这个变化莫测的时代，对自己的投资才是最有价值的投资，从16年开始，微信公众号成为了我获取信息的主要途径，我关注了大概有 200 多个公众号，有大公司的技术号，有个人的自媒体号，也有互联网大 V 的个人号，随着个人兴趣的变化，我也慢慢的开始关注产品类，运营类，投资理财类，心理学类等等的一些公众号，涉及领域之广泛，当然关注这么多公众号不可能每天都会去阅读，但是经常看的一些号，只要有更新就会去看。通过这些公众号，我也了解了一些付费平台的产品，订阅了罗元裳的「投资理财，怎么做才能获得最大收益」知乎 live，justjavac 的「前端工程师的入门与阶进」知乎live；订阅了朱赟在极客时间上的专栏「朱赟的技术管理课」，左耳朵耗子的「左耳听风」专栏；加入了 stormzhang 的知识星球「帅张和他的朋友们」。关注了这么多，也看了这么多，要说收获了什么我也说不上来，但是我相信长期下来收获是必然的。</p><h2 id="「zhiheng博客」的运营"><a href="#「zhiheng博客」的运营" class="headerlink" title="「zhiheng博客」的运营"></a>「zhiheng博客」的运营</h2><p>这个公众号开通已经有两年多了，15,16 年几乎没写几篇文章，主要在今年虽然写的很少，但至少是坚持写了一年，并且获得了微信爸爸的原创保护，留言赞赏功能，虽然听说原创保护已经对所有公众号开放了[捂脸]，粉丝长的也不多，但是还是要感谢一直关注我的读者们，你们的坚守与鼓励是我写下去的动力。17 年总的写了大概有 30 几篇文章，其中技术分享的文章不多，有几篇关于 GO 语言的，本来打算系统的学习这门语言，并以教程的形式发表，可是由于时间原因放弃了，之所以要学习 GO 语言，是因为 GO 比较年轻，在设计上都有前所未有的前瞻性，相信他将会成为未来的趋势。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>忙碌的一年，回头看时，能让人历历在目的没有几件事，还是那句话，都不知道这一年干了个啥，已经结束了。明年呢，明年继续努力，少熬夜，多看书，多运动，多与异性交朋友。[斜眼笑]</p><pre><code>2017 年 12 月 31 日冬</code></pre><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我的 2017 年终总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;又是一年年尾，今年的年尾好像显得尤为重要似的，每个人都在谈论 “再见2017,你好2018” 的话题，朋友圈继圣诞帽的热潮之后，又掀起了 “我的 18 岁” 热潮，2017 年的我
      
    
    </summary>
    
    
      <category term="总结" scheme="https://dddreams.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>刷屏了的圣诞帽与技术无关</title>
    <link href="https://dddreams.github.io/171223-%E5%88%B7%E5%B1%8F%E4%BA%86%E7%9A%84%E5%9C%A3%E8%AF%9E%E5%B8%BD%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%97%A0%E5%85%B3.html"/>
    <id>https://dddreams.github.io/171223-刷屏了的圣诞帽与技术无关.html</id>
    <published>2017-12-23T06:46:17.000Z</published>
    <updated>2018-03-24T08:21:04.385Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>借助这个圣诞节呼吁大家重视传统文化的传承理性过节</p></blockquote><p>临近圣诞，大家都按捺不住自己激动的心情，最按捺不住的当属朋友圈了，这不，大清早的就被一条 @微信官方 的消息给刷屏了，原文是这样的 “请给我一个圣诞帽@微信官方” ，不过在朋友圈各种版本的都有，比如，“给老子来顶圣诞帽@微信官方”，“给我一个比特币@微信官方”，我只想说一句 “你咋不上天呢…”。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/20171223/20171223144945.jpg" alt="给老子来顶圣诞帽@微信官方" title>                </div>                <div class="image-caption">给老子来顶圣诞帽@微信官方</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/20171223/20171223144916.jpg" alt="给我一个比特币@微信官方" title>                </div>                <div class="image-caption">给我一个比特币@微信官方</div>            </figure></p><p>刷屏了的不仅仅是朋友圈，就连微信公众平台也被有关圣诞帽的文章给刷屏了，看过几篇之后大概知道了这是怎么回事。最初不知是从哪传来的谣言，说是在朋友圈发一条 “请给我一个圣诞帽@微信官方” 的动态，微信就会在你头像上加一顶圣诞帽，还有人分析说，微信是使用了人工智能，图像识别技术，自动识别出头像中的位置将帽子添加上去的，这更加增加了传奇性，引起了大家的好奇心，于是乎朋友圈就被这条消息刷屏了。其实，这一切只是一场骗局罢了，不信，发你的头像到后台，我帮你制作一个戴圣诞帽的头像。</p><p>既然知道是骗局，那么呼吁大家别在发朋友圈传播了，毕竟国家已经不提倡过洋节了，你不知道吗？</p><h2 id="接下来才是重点关注的内容"><a href="#接下来才是重点关注的内容" class="headerlink" title="接下来才是重点关注的内容"></a><strong>接下来才是重点关注的内容</strong></h2><p>昨天看到一篇文章，<a href="http://mp.weixin.qq.com/s/zCABYNrXtSYUUfbdhNodeA" target="_blank" rel="noopener">国家终于出手，洋节，再见</a>，之后我在网上查了文化部的相关文件，发文中的规定并没有这篇文章中说的那么夸张，但是我觉得，对于洋节这件事应该引起大众的关注，你有没有发现，大街上已经摆满了的圣诞树，各商铺门口已经摆满了穿着红色衣服的圣诞老人和贴满圣诞节商品打折降价的广告牌，各大电商网站也想通过次节赚一笔横财，降价打折的广告铺天盖地。反观我们的传统节日，今年国庆节除了诱人的 7 天假和大街上插着几面国旗外，貌似再也看不到有什么引人注目的活动了，中秋节除了卖月饼的那几家商店搞搞活动卖卖月饼外，好像也没什么值得关注的了，就连老人们最喜爱的春节，在年轻人眼里只不过是走亲访友的麻烦，在别说重阳节，清明节，端午节这些只有假期才能让人记得的节日了。</p><p>去年圣诞节的时候，有位在幼儿园教书的朋友，在朋友圈晒礼物，孩子们送的圣诞礼物，把她高兴坏了。我给她回复说，为什么不在教师节送，她一脸懵逼无言以对。幼儿园的孩子，都知道在圣诞节要给老师送礼物，难道这不是一件可怕的事吗，试想这批孩子们长大以后，在他们的观念里是不是会有 ”在中国圣诞节比春节更为重要“ 这样的想法呢？？？当然错不在孩子们，而在我们这一代人身上，对西方文化的接纳，再没有比我们这一代人更为敞开胸怀的了。</p><p>时代科技的发展，我们越来越与国际接轨，然而我们丢失的传统文化与传统道德远比你想象的要多，在我看来，传统节日的传承，远不止只有假期才能让人们根深蒂固。从孩子的角度来看，六一儿童节远比三天假期的端午节更有意义，其中的原因不仅仅是儿童节是孩子们的节日这么单一，所以在学校组织一些类似儿童节这样的活动还是有必要的。</p><p>最后，借助这个圣诞节呼吁大家重视传统文化的传承理性过节，尤其是广大教育工作者，对于洋节，最好能免则免，还有广大党员同志们，以后过洋节要小心喽，，，[斜眼笑]</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;借助这个圣诞节呼吁大家重视传统文化的传承理性过节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;临近圣诞，大家都按捺不住自己激动的心情，最按捺不住的当属朋友圈了，这不，大清早的就被一条 @微信官方 的消息给刷屏了，原文是这样的 “请给我一个圣诞帽@微信
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://dddreams.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>12月发生的几件事</title>
    <link href="https://dddreams.github.io/171218-12%E6%9C%88%E5%8F%91%E7%94%9F%E7%9A%84%E5%87%A0%E4%BB%B6%E4%BA%8B.html"/>
    <id>https://dddreams.github.io/171218-12月发生的几件事.html</id>
    <published>2017-12-18T05:04:39.000Z</published>
    <updated>2017-12-18T05:34:19.277Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好汉不吃眼前亏。但是在另外很多时候，如果问题争执不下，也不要继续火上浇油，冷静下来，多收集一些数据材料与想更明白点再说。</p></blockquote><p>又是忙碌的一周，上周通宵两夜赶出来的功能只用了一下午，还是有一点小失望的。今天认识了一个同是喜欢写作的朋友，聊起了写作，甚是投机，非科班出身，喜欢写作，一下子勾起了我的写作欲望，于是有了这篇 12 月发生的一些事。</p><h2 id="世界互联网大会"><a href="#世界互联网大会" class="headerlink" title="世界互联网大会"></a>世界互联网大会</h2><p>12 月 3 日世界互联网大会在乌镇举行，各大佬们的讲话和饭桌上的佳肴，相信在前些天已经风靡了大街小巷，我也不再过多的罗嗦。看了很多的评论和总结，有人说小马哥尽然谈起了创新，那不是扯淡吗，其实不然，近年来，随着国内网民的高速增长，国内的互联网企业也慢慢的进入了领头羊的角色，尤其是新一代企业家，对于走出国门他们有更大的胆识。意大利大街上的膜拜单车、印度人手中的小米手机、新加坡总理对扫码支付的惊叹等等，这都预示着我们也走上了创新的道路。早在几年前，李彦宏就说过，“当中国的网民数量成为世界第一后，我们就会先于美国碰到各种各样的互联网问题，如果能够先碰到这个问题，就有机会去先解决这个问题，创新就会源源不断的出现。这种优势，是中国的优势，是别的国家无法效仿的优势。”（出自公众号 <code>keso怎么看</code> 的<a href="http://mp.weixin.qq.com/s/vsvS8DaJ60Irip39vrehHw" target="_blank" rel="noopener">中国互联网的自信是哪儿来的？</a>）马化腾也曾说过，“山寨美国是全世界互联网的必经阶段，但是山寨这件事不会再持续下去，不建立自己的创新基因和文化，中国互联网的发展不可能长久。”</p><p>看看小马哥家的微信，小程序的创新也成了大家山寨的对象，支付宝做起了小程序，就连 Google 的 PWA 也有点小程序的理念了，不用安装，用完就走。有人说微信已经老了，其实微信最近更新挺频繁的，只是你不注意罢了，最近更新的功能有聊天记录的检索，可以通过日期检索;收藏功能的增加，现在收藏里可以添加图片，视频，富文本，位置，录音，还能写待办事项; 已撤回的消息再编辑，很多时候我们撤回消息不是发错人或发错群，而是写错字了，现在当你撤回消息，会有个“再编辑”的链接，点击那个链接，消息会出现在输入框，改改之后重新发送就行了，很是贴心; 微信一直在为用户需求和用户体验上下功夫，这才是真正为用户而打造的产品。反观某付宝，现在拿出来，还能认得出它刚开始是一个做支付的 APP 吗。</p><h2 id="Google-开发者大会"><a href="#Google-开发者大会" class="headerlink" title="Google 开发者大会"></a>Google 开发者大会</h2><p>12 月 13 日 Google 开发者大会在上海举行，我在第一时间看了直播，感觉也没有那么激动，但是有好多自媒体作者激动的发文感慨，也许是他们去现场的缘故吧。这次大会振奋人心的是 Google AI 中国中心在北京成立，这为广大的学生及研究人员提供高质量 AI 及机器学习的教育支持。还有 Android 的蓬勃发展，Google 智能助理的推出，前面提到的 PWA 帮助中国开发者优化用户体验，PWA 也支持了国内大部分主流的浏览器，还有 Google 的分析系统等等。这似乎预示着 Google 在国内的回归，但是是否真的能回归，还需要更多是时间和更大的努力。</p><h2 id="中兴-70-后程序员跳楼身亡"><a href="#中兴-70-后程序员跳楼身亡" class="headerlink" title="中兴 70 后程序员跳楼身亡"></a>中兴 70 后程序员跳楼身亡</h2><p>12 月 14 日发在美篇上的一篇文章，70 后程序员在中兴通信大楼跳楼身亡。当事人欧某出身农村家庭，本科北京航空航天大学，在华为公司工作 8 年，期间考取南开大学的硕士研究生。近两年程序员群体被大众注意到，前有 WePhone 开发者被女友诈骗自杀，后有中兴 70 后程序员跳楼身亡，程序员的弱势在于工作性质，常年跟机器打交道，以为什么都跟机器一样讲道理，低估了人性的复杂与丑陋，加上工作的原因，习惯遇事自己独立解决 ，导致遇到事情不会妥善处理，更不会轻易请人帮助，一致酿成悲剧。在这我也提醒广大程序员同胞们，在工作之余，技术之外，也要多加强人际交往和沟通的能力及处事方式和处理人情世故，谁都知道，程序员大多是智商较高，但是情商较为缺乏，而人这一生情商远比智商更为有用一些。</p><p>最后，2017 年又接近尾声，年底往往事情比较多，在忙碌之余写作仍将继续，晚安，我的朋友们！2017 年 12 月 18 日凌晨 1 点。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;好汉不吃眼前亏。但是在另外很多时候，如果问题争执不下，也不要继续火上浇油，冷静下来，多收集一些数据材料与想更明白点再说。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;又是忙碌的一周，上周通宵两夜赶出来的功能只用了一下午，还是有一点小失望的。今天认识了
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://dddreams.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>会上瘾的今日头条</title>
    <link href="https://dddreams.github.io/171203-%E4%BC%9A%E4%B8%8A%E7%98%BE%E7%9A%84%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1.html"/>
    <id>https://dddreams.github.io/171203-会上瘾的今日头条.html</id>
    <published>2017-12-05T05:07:17.000Z</published>
    <updated>2017-12-05T05:14:40.294Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>年轻时很容易想要“一鸣惊人”，急于证明自己，但其实，二十几岁恰恰是需要一个人定下心来，本本分分，一步步地去做事情，去积累的时候。年轻不怕失败，只要能学到东西，并且让自己一直处于成长的状态，你想要的都会不请自来。——蓑依 ​​​ ​​​​</p></blockquote><p>最近经常见好多同事，一有闲时间就在刷头条，我也好奇就安装了今日头条，大概看了一些有趣的段子什么的，就再没管，当我第二次打开头条的时候，发现铺天盖地的都是同一种类型的段子，把我看的不亦乐乎。后来又看了些我感兴趣的话题，当我再次打开头条看时，又是同一类型的话题，并且大多数是一些标题党，标题很吸引人，内容平平，没什么价值。时间一长我也跟同事们一样了，一有闲时间就不由自主的打开头条，而且看的不亦乐乎。当我发现自己大部分闲时间都被头条占据后，我毫不犹豫的卸载了。</p><p>记得大学时候，新闻客户端还是那个风格简洁，以红色为主色的网易新闻，每天上课前看看新闻，偶尔还会转发分享到微博（那时的朋友圈还没有现在这么流行）。当网易还沉浸在包揽用户的喜悦之中时，今日头条慢慢进入了人们的生活，以他独到的推荐算法，魔法般的将用户感兴趣的东西一股脑抛到你面前，你就像上瘾了似的每天笑的乐哈哈。再到后来，网易新闻也做起了推荐，丢弃了当初那个少女般的新闻类产品，和头条一样，无论内容好坏一股脑的抛给用户。不得不说头条的推荐算法很强大，侵蚀力也很强，甚至老牌的腾讯新闻，新浪新闻也被头条超越。他准确抓住了人性的弱点，那些热点文章都是在抓人的注意力，使用耸人听闻的标题，引诱你其点击，点击之后头条认为你对其感兴趣，然后给你推荐更多的垃圾信息。</p><p>据有关统计，头条的点击量已经超越了公众号的点击阅读量，单从每天发表数量来看，公众号原创输出远远大于头条的输出，但是在点击量上头条却占据了领先地。在我看来，这很正常，因为公众号文章用户有选择权，如果一个公众号输出的内容没有多大价值，用户可以取关；相反的头条无论内容质量如何都推荐给用户，几乎排在前面的文章都是利用机器推荐算法推荐给你的。但是公众号就不样了，我们知道公众号的文章阅读一部分是来自朋友的转发，那么你是相信朋友给你的推荐呢，还是相信机器算法给你的推荐？</p><p>其实头条上也有一些很不错的文章值得我们去阅读，只是那些吸引眼球的标题和远远不断的推荐，占据了你筛选信息的时间。在这个信息膨胀的互联网时代，如何筛选出真实，有价值，有深度的内容，还是需要一个有节操有底线的产品来为用户服务，从而节省人们更多的时间。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;年轻时很容易想要“一鸣惊人”，急于证明自己，但其实，二十几岁恰恰是需要一个人定下心来，本本分分，一步步地去做事情，去积累的时候。年轻不怕失败，只要能学到东西，并且让自己一直处于成长的状态，你想要的都会不请自来。——蓑依 ​​​ ​​​​&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://dddreams.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>每天抽一点时间来阅读</title>
    <link href="https://dddreams.github.io/171125-%E6%AF%8F%E5%A4%A9%E6%8A%BD%E4%B8%80%E7%82%B9%E6%97%B6%E9%97%B4%E6%9D%A5%E9%98%85%E8%AF%BB.html"/>
    <id>https://dddreams.github.io/171125-每天抽一点时间来阅读.html</id>
    <published>2017-11-27T05:30:50.000Z</published>
    <updated>2017-11-27T06:34:59.048Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>真正的读书使瞌睡者醒来，给未定目标者选择适当的目标。正当的书籍指示人以正道，使其避免误入歧途。</p></blockquote><p>刚在上篇文章中说完坚持这件事，就发现一款很不错的打卡产品，叫做 “小打卡” 的微信小程序，在这个平台上你可以建立自己的圈子，邀请几位好友，分享一些内容；我随便刷了刷，上面的圈子主题还挺多，有运动的，有写作的，有阅读的，有写一些读后感的，还有学英语的，每天读一段英文句子，我觉得这种模式就很好。一些兴趣爱好相同的人聚在一起，互相学习，互相讨论，看着每天打卡学习的小伙伴都在努力提升自己，你还能安稳的享受这生活的安逸么？我也在小打卡上开了一个圈子，叫做 “每日心情” ，我的主题内容很简单，每天发表一点鸡汤，心情，配上一张唯美的图片，目的在于锻炼每天坚持做这件事，如果你能坚持打卡一年半载，或许这已经成为你的习惯，那么你可以尝试做一些更有意义的事，比如写作，阅读。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="images/20171127/201711271432.png" alt="小打卡 “每日心情”" title>                </div>                <div class="image-caption">小打卡 “每日心情”</div>            </figure><p>前面写到过的写作，有人也不止一次的说起过，几乎都是同样的问题，就是我也想写，但是每次写的时候总是不知道要写啥，或者害怕写的东西被别人看到等等，于是引发了今天这个话题–阅读。</p><p>我所说的阅读，不是传统的书籍阅读，而是指碎片话阅读，或许有人会说，碎片话阅读那只是噱头，其实不然，现在的社会潮流，手机是阅读的很好工具，智能手机几乎覆盖了所有人，尤其是年轻人，吃饭，坐车，睡觉都几乎已经手机不离手了，只要抽出刷朋友圈，刷微博三分之一的时间用来阅读，那每天的阅读量估计能达到 5w 字以上了。当然我也不反对书籍的阅读，如果要系统的学习一门技术，我还是建议去买一本不错的书，因为书上的知识比较系统，讲的比较全面，适合那些从入门到深入学习的人；反过来，你想通过碎片化阅读去学习一门技术，那是不可能的，就算学到一点知识，那也可能只是一个知识点，仅此而已。</p><p>这是一个信息化时代，各种各样的信息满天飞，我们怎么能在这些信息中筛选出自己感兴趣有价值的信息呢，我推荐使用微信公众号，选择关注一些技术牛人大佬的公众号，通常会不定期的写技术分享，或者业界一些有趣的事，这要比在头条，微博上筛选信息来的快。其实还有很多获取阅读的途径，比如知乎专栏，得到专栏，极客时间专栏，知识星球等等。这些产品的模式是近几年业界的一个亮点 “知识付费”，他们输出的知识内容都要求付费。我是不反对这种模式的，首先对于作者来说，付费是更大鼓励与认可，输出的文章自然也会保证质量；对读者来说，我付费了，就会花更多是时间去思考作者的观点与想法；所以知识付费是双赢互利的。</p><p>我每天都会花大量的时间去阅读，除了公众号以外，我也订阅了几个专栏，包括朱赟在极客时间上的“管理课程”，左耳朵耗子在极客时间上的“左耳听风”，stormzhang 在知识星球上的 “帅张和他的朋友们” ，我在这些平台上获得了很多有价值的东西，包括认知，管理，技术，理财等等，所以不管你处于什么阶段，每天抽出一点时间来阅读，对你的见识和眼界都是有很大帮助的。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;真正的读书使瞌睡者醒来，给未定目标者选择适当的目标。正当的书籍指示人以正道，使其避免误入歧途。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;刚在上篇文章中说完坚持这件事，就发现一款很不错的打卡产品，叫做 “小打卡” 的微信小程序，在这个平台上你可以建
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://dddreams.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>如何坚持不断的做一件事</title>
    <link href="https://dddreams.github.io/171121-%E5%A6%82%E4%BD%95%E5%9D%9A%E6%8C%81%E4%B8%8D%E6%96%AD%E7%9A%84%E5%81%9A%E4%B8%80%E4%BB%B6%E4%BA%8B.html"/>
    <id>https://dddreams.github.io/171121-如何坚持不断的做一件事.html</id>
    <published>2017-11-21T13:06:24.000Z</published>
    <updated>2017-11-22T11:01:59.613Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>书不记，熟读可记；义不精，细思可精；惟有志不立，直是无着力处。 </p></blockquote><p>上篇文章说了写作之后，有很读者就在问我 “道理我都懂，但是就是坚持不下来”，的确是这样。我见过很多这样的例子，刚开始的时候心血来潮，噼噼啪啪写了很多，后来慢慢的就不见发表文章了，其实我也是一样，有时候会写很多，有时候又感觉没什么可写，最终的原因还是坚持不下来；那么如何坚持不断的做一件事呢？</p><p>最近看公众号文章发现一个有趣的现象，公众号阵营好像一波一波的，比如，前面提过的 stormzhang 阵营的有 <code>python 之禅</code>,<code>一个程序员的日常</code>,<code>高效率工具搜罗</code>,<code>DeveloperPython</code> 等，他们的公众号几乎都互相推荐过，运营模式基本相似，有做 Android 的，有做 python 的，有收集一些好用的工具的；其实有一部分人是受到 stormzhang 的影响才运营起公众号的，也包括我，我在他那也受了很多启发，不论是写作，阅读，理财，职业规划，stormzhang 说的都很有自己的观点。另一个阵营的是以池建强老师为首的，包括前面提到过的 <code>嘀嗒嘀嗒</code>,<code>caoz的梦呓</code>,<code>二爷鉴书</code>,<code>keso怎么看</code> 等等，这些公众号也是通过 <code>嘀嗒嘀嗒</code> 推荐后我才关注的，读 <code>嘀嗒嘀嗒</code> 的简介时才了解到，她是被池建强老师拉下水的，然后就喜欢上了写作，并持续不断的在公众号的更新。也许这就是他们坚持写作的原因之一，互相推荐、互相鼓励、同时也互相学习。</p><p>其实这种方式坚持做一件事是非常有效的，还记得大学时候，做什么事都要拉个伙伴一起，记得一个哥们为了追妹子，每天都拉我去跑步，跑了一段时间妹子没追成，倒是养成了跑步的习惯，每天都去跑两圈，后来毕业之后各奔东西这个习惯没坚持多久就丢掉了。所以想坚持做一件事，找个小伙伴一块坚持是一个行之有效的方法。</p><p>坚持做一件事，让其形成习惯，说起来简单做起来却难于上青天，不如从一件小事做起，比如早睡早起，算了，早睡早起只适合中老年人的习惯，对于年轻人很少有人能坚持做到这件事。你可以从一件比较感兴趣的小事做起，比如，有人喜欢鸡汤，可以每天读一小段鸡汤，或者直接复制到朋友圈；比如，可以关注一个叫每日打卡的公号，每天在上面签到打卡，养成这个习惯从而锻炼你坚持做事的态度等等。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;书不记，熟读可记；义不精，细思可精；惟有志不立，直是无着力处。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上篇文章说了写作之后，有很读者就在问我 “道理我都懂，但是就是坚持不下来”，的确是这样。我见过很多这样的例子，刚开始的时候心血来潮，噼噼啪啪
      
    
    </summary>
    
    
      <category term="杂谈" scheme="https://dddreams.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
