<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring RestTemplate的使用</title>
      <link href="/211111-SpringRestTemplate%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
      <url>/211111-SpringRestTemplate%E7%9A%84%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<p>实际工作中我们经常会遇到利用 java 去访问其他接口获取数据，常用的有 JDK 原生的 HttpURLConnection 无需依赖其他包，提供了很多方法；另外 HttpClient 也是我们的不二选择，在 spring 之前，我们经常会用 HttpClient 来处理；还有一种方式就是利用 Socket，使用起来比较麻烦；用了 spring 之后，RestTemplate 则更加方便，更加灵活。</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>spring框架提供的RestTemplate类可用于在应用中调用rest服务，它简化了与http服务的通信方式，统一了RESTful的标准，封装了http链接， 我们只需要传入url及返回值类型即可。相较于之前常用的HttpClient，RestTemplate是一种更优雅的调用RESTful服务的方式。</p><p>在Spring应用程序中访问第三方REST服务与使用Spring RestTemplate类有关。RestTemplate类的设计原则与许多其他Spring 模板类(例如JdbcTemplate、JmsTemplate)相同，为执行复杂任务提供了一种具有默认行为的简化方法。</p><p>RestTemplate默认依赖JDK提供http连接的能力（HttpURLConnection），如果有需要的话也可以通过setRequestFactory方法替换为例如 Apache HttpComponents、Netty或OkHttp等其它HTTP library。</p><p>考虑到RestTemplate类是为调用REST服务而设计的，因此它的主要方法与REST的基础紧密相连就不足为奇了，后者是HTTP协议的方法:HEAD、GET、POST、PUT、DELETE和OPTIONS。例如，RestTemplate类具有headForHeaders()、getForObject()、postForObject()、put()和delete()等方法。</p><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><p>最新api地址：<br><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p><p>RestTemplate包含以下几个部分：</p><p>HttpMessageConverter 对象转换器<br>ClientHttpRequestFactory 默认是JDK的HttpURLConnection<br>ResponseErrorHandler 异常处理<br>ClientHttpRequestInterceptor 请求拦截器</p><p>常规配置<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">public</span> MyRestClientService(RestTemplateBuilder restTemplateBuilder) &#123;  </span><br><span class="line">    this<span class="number">.</span>restTemplate = restTemplateBuilder  </span><br><span class="line"><span class="meta">        .basicAuthorization</span>(<span class="string">"username"</span>, <span class="string">"password"</span>)  </span><br><span class="line"><span class="meta">        .setConnectTimeout</span>(<span class="number">3000</span>)  </span><br><span class="line"><span class="meta">        .setReadTimeout</span>(<span class="number">5000</span>)  </span><br><span class="line"><span class="meta">        .rootUri</span>(<span class="string">"http://api.example.com/"</span>)  </span><br><span class="line"><span class="meta">        .build</span>()<span class="comment">;  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ClientHttpRequestInterceptor<br>学习使用带有Spring RestTemplate的ClientHttpRequestInterceptor，以Spring AOP风格记录请求和响应头和主体。</p><p>拦截器记录请求和响应<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;<span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestExecution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpRequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.ClientHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StreamUtils;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestResponseLoggingInterceptor</span> <span class="title">implements</span> <span class="title">ClientHttpRequestInterceptor</span> &#123;</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger <span class="built_in">log</span> = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">  </span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] body, ClientHttpRequestExecution execution)</span> throws IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        logRequest(request, body);</span><br><span class="line">        ClientHttpResponse response = execution.execute(request, body);</span><br><span class="line">        logResponse(response);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//Add optional additional headers</span></span><br><span class="line">        response.getHeaders().add(<span class="string">"headerName"</span>, <span class="string">"VALUE"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logRequest</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] body)</span> throws IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">log</span>.isDebugEnabled())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"===========================request begin================================================"</span>);</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"URI         : &#123;&#125;"</span>, request.getURI());</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"Method      : &#123;&#125;"</span>, request.getMethod());</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"Headers     : &#123;&#125;"</span>, request.getHeaders());</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"Request body: &#123;&#125;"</span>, <span class="keyword">new</span> <span class="keyword">String</span>(body, <span class="string">"UTF-8"</span>));</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"==========================request end================================================"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">logResponse</span><span class="params">(ClientHttpResponse response)</span> throws IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">log</span>.isDebugEnabled())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"============================response begin=========================================="</span>);</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"Status code  : &#123;&#125;"</span>, response.getStatusCode());</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"Status text  : &#123;&#125;"</span>, response.getStatusText());</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"Headers      : &#123;&#125;"</span>, response.getHeaders());</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"Response body: &#123;&#125;"</span>, StreamUtils.copyToString(response.getBody(), Charset.defaultCharset()));</span><br><span class="line">            <span class="built_in">log</span>.debug(<span class="string">"=======================response end================================================="</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注册ClientHttpRequestInterceptor<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line"><span class="keyword">public</span> RestTemplate restTemplate()&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> <span class="type">RestTemplate</span>();</span><br><span class="line"> </span><br><span class="line">    restTemplate.setRequestFactory(<span class="keyword">new</span><span class="type">BufferingClientHttpRequestFactory</span>(clientHttpRequestFactory()));</span><br><span class="line">    restTemplate.setMessageConverters(Collections.singletonList(mappingJacksonHttpMessageConverter()));</span><br><span class="line"> </span><br><span class="line">    restTemplate.setInterceptors( Collections.singletonList(<span class="keyword">new</span><span class="type">RequestResponseLoggingInterceptor</span>()) );</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> restTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><p>GET<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getEmployees</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> uri = <span class="string">"http://localhost:8080/springrestexample/employees"</span>;</span><br><span class="line">     </span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="keyword">String</span> result = restTemplate.getForObject(uri, <span class="keyword">String</span>.class);</span><br><span class="line">     </span><br><span class="line">    System.out.<span class="built_in">println</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用RestTemplate定制HTTP头文件<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getEmployees</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> uri = <span class="string">"http://localhost:8080/springrestexample/employees"</span>;</span><br><span class="line">     </span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">     </span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));</span><br><span class="line">    HttpEntity&lt;<span class="keyword">String</span>&gt; entity = <span class="keyword">new</span> HttpEntity&lt;<span class="keyword">String</span>&gt;(<span class="string">"parameters"</span>, headers);</span><br><span class="line">     </span><br><span class="line">    ResponseEntity&lt;<span class="keyword">String</span>&gt; result = restTemplate.exchange(uri, HttpMethod.GET, entity, <span class="keyword">String</span>.class);</span><br><span class="line">     </span><br><span class="line">    System.out.<span class="built_in">println</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Get请求获取响应为一个对象<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getEmployees</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> uri = <span class="string">"http://localhost:8080/springrestexample/employees"</span>;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">     </span><br><span class="line">    EmployeeListVO result = restTemplate.getForObject(uri, EmployeeListVO.class);</span><br><span class="line">     </span><br><span class="line">    System.out.<span class="built_in">println</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>URL 参数<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getEmployeeById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> uri = <span class="string">"http://localhost:8080/springrestexample/employees/&#123;id&#125;"</span>;</span><br><span class="line">     </span><br><span class="line">    Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; params = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line">    params.<span class="built_in">put</span>(<span class="string">"id"</span>, <span class="string">"1"</span>);</span><br><span class="line">     </span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    EmployeeVO result = restTemplate.getForObject(uri, EmployeeVO.class, params);</span><br><span class="line">     </span><br><span class="line">    System.out.<span class="built_in">println</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>POST<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> void createEmployee()&#123;</span><br><span class="line">    final <span class="keyword">String</span> uri = <span class="string">"http://localhost:8080/springrestexample/employees"</span>;</span><br><span class="line"> </span><br><span class="line">    EmployeeVO <span class="keyword">new</span><span class="type">Employee</span> = <span class="keyword">new</span> <span class="type">EmployeeVO</span>(<span class="number">-1</span>, <span class="string">"Adam"</span>, <span class="string">"Gilly"</span>, <span class="string">"test@email.com"</span>);</span><br><span class="line"> </span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> <span class="type">RestTemplate</span>();</span><br><span class="line">    EmployeeVO result = restTemplate.postForObject( uri, <span class="keyword">new</span><span class="type">Employee</span>, EmployeeVO.class);</span><br><span class="line"> </span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Submit Form Data<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class="line"> </span><br><span class="line">MultiValueMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; <span class="built_in">map</span>= <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"><span class="built_in">map</span>.<span class="built_in">add</span>(<span class="string">"id"</span>, <span class="string">"1"</span>);</span><br><span class="line"> </span><br><span class="line">HttpEntity&lt;MultiValueMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(<span class="built_in">map</span>, headers);</span><br><span class="line"> </span><br><span class="line">RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">EmployeeVO result = restTemplate.postForObject( uri, request, EmployeeVO.class);</span><br><span class="line">System.out.<span class="built_in">println</span>(result);</span><br></pre></td></tr></table></figure></p><p>PUT<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> uri = <span class="string">"http://localhost:8080/springrestexample/employees/&#123;id&#125;"</span>;</span><br><span class="line">     </span><br><span class="line">    Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; params = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line">    params.<span class="built_in">put</span>(<span class="string">"id"</span>, <span class="string">"2"</span>);</span><br><span class="line">     </span><br><span class="line">    EmployeeVO updatedEmployee = <span class="keyword">new</span> EmployeeVO(<span class="number">2</span>, <span class="string">"New Name"</span>, <span class="string">"Gilly"</span>, <span class="string">"test@email.com"</span>);</span><br><span class="line">     </span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    restTemplate.<span class="built_in">put</span> ( uri, updatedEmployee, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Simple PUT<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Foo updatedInstance = <span class="keyword">new</span> <span class="type">Foo</span>(<span class="string">"newName"</span>);</span><br><span class="line">updatedInstance.setId(createResponse.getBody().getId());</span><br><span class="line"><span class="keyword">String</span> resourceUrl = </span><br><span class="line">  fooResourceUrl + <span class="string">'/'</span> + createResponse.getBody().getId();</span><br><span class="line">HttpEntity&lt;Foo&gt; requestUpdate = <span class="keyword">new</span> <span class="type">HttpEntity</span>&lt;&gt;(updatedInstance, headers);</span><br><span class="line">template.exchange(resourceUrl, HttpMethod.PUT, requestUpdate, <span class="keyword">Void</span>.class);</span><br></pre></td></tr></table></figure></p><p>使用.exchange和请求回调<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">RequestCallback <span class="title">requestCallback</span>(<span class="params">final Foo updatedInstance</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> clientHttpRequest -&gt; &#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.writeValue(clientHttpRequest.getBody(), updatedInstance);</span><br><span class="line">        clientHttpRequest.getHeaders().<span class="keyword">add</span>(</span><br><span class="line">          HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        clientHttpRequest.getHeaders().<span class="keyword">add</span>(</span><br><span class="line">          HttpHeaders.AUTHORIZATION, <span class="string">"Basic "</span> + getBase64EncodedLogPass());</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>DELETE<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> uri = <span class="string">"http://localhost:8080/springrestexample/employees/&#123;id&#125;"</span>;</span><br><span class="line">     </span><br><span class="line">    Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; params = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;();</span><br><span class="line">    params.<span class="built_in">put</span>(<span class="string">"id"</span>, <span class="string">"2"</span>);</span><br><span class="line">     </span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    restTemplate.<span class="keyword">delete</span> ( uri,  params );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上便是 Spring RestTemplate 在实际开发中使用的方法，请笑纳吧！</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： 治恒说说</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github精选-秒杀系统设计与实现</title>
      <link href="/211108-github%E7%B2%BE%E9%80%89-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html"/>
      <url>/211108-github%E7%B2%BE%E9%80%89-%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html</url>
      
        <content type="html"><![CDATA[<p>很长时间没有更新了，最近有个想法，做一个github 开源项目精选的主题，我经常会去逛 githb，发现一些好玩或实用的项目就会 star，后来发现 star 了很多项目，但在实际要使用时还是想不起来自己已经 star 了该项目了。所以就有了这样一个想法，整理记录 github 上的一些项目，知道它是做什么的，它能解决什么问题，当实际使用时直接在博客上搜索，岂不是很方便了；于是就有了这个 github精选的分类。</p><p>今天分享的是一个秒杀系统设计与实现，互联网工程师进阶与分析，创建者对高并发大流量如何进行秒杀架构这部分知识做了一个系统的整理。目前已获得 22.9k 的star，其中包含整体设计，数据库设计和常见的一些问题整理，涉及到的技术有 SpringBoot、MQ、Redis、Dubbo、ZK、Maven、lua 等技术。</p><p>我花了一些时间看了其中的内容，真的是干货，nginx优化，mysql 的执行计划，数据的备份和恢复写的都很实用，程序员的进阶修炼不可缺少的好项目，极力推荐。</p><p>送上开源地址：<a href="https://github.com/qiurunze123/miaosha" target="_blank" rel="noopener">https://github.com/qiurunze123/miaosha</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： 治恒说说</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql登录失败多次锁定配置</title>
      <link href="/210208-Mysql%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5%E5%A4%9A%E6%AC%A1%E9%94%81%E5%AE%9A%E9%85%8D%E7%BD%AE.html"/>
      <url>/210208-Mysql%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5%E5%A4%9A%E6%AC%A1%E9%94%81%E5%AE%9A%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<p>大家有没有发现，现在我们用的手机，网站只要需要登录或者认证的，都有这样一项功能，密码或口令输错几次后系统锁定N分钟，并提示N分钟过后重试，有时候会很头疼，万一忘记了密码，只能填一堆信息重新获取，当然这也是对安全的考虑，其实在等保测评中，也有类似的要求，今天我们来学习一下MySQL是如何设置登录多次失败锁定的。</p><blockquote><p>Tips：示例是以 Mysql 5.7 为例</p></blockquote><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>Mysql 数据库密码数据 3 次，自动锁定15分钟。</p><h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><p>首先使用下面命令查看参数是否设置<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%connection_control%'</span>;</span><br></pre></td></tr></table></figure></p><p>如果看到<code>Empty set (0.01 sec)</code> 的字样，说明没有设置该参数；<br>再查看是否安装 CONNECTION_CONTROL 和 CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS 插件。</p><ul><li>CONNECTION_CONTROL：用来控制登录失败的次数及延迟响应时间。</li><li>CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS：该表将登录失败的操作记录至IS库中。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> plugins;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/08/ONElGRIMhUKYvny.png" alt="图一"><br>如果插件列表中没有【图一】中的勾出的两项，需要安装插件；</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span> <span class="keyword">plugin</span> CONNECTION_CONTROL <span class="keyword">soname</span> <span class="string">'connection_control.so'</span>;</span><br><span class="line"><span class="keyword">install</span> <span class="keyword">plugin</span> CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS <span class="keyword">soname</span> <span class="string">'connection_control.so'</span>;</span><br></pre></td></tr></table></figure><p>执行完之后，再次查看插件列表，会出现【图一】中勾出的两项；现在再次查看<code>connection_control</code>的参数：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%connection_control%'</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2021/02/08/dJQIyaX7iZcnO1D.png" alt="图二"><br>可以看到已有的默认配置：</p><ul><li><code>connection_control_failed_connections_threshold</code>：失败尝试的次数，默认为3，表示当连接失败3次后启用连接控制，0表示不开启。</li><li><code>connection_control_max_connection_delay</code>：响应延迟的最大时间，默认约25天</li><li><code>connection_control_min_connection_delay</code>：响应延迟的最小时间，默认1000微秒，1秒</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>方式一：修改配置文件 my.cnf<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/<span class="keyword">my</span>.cnf</span><br><span class="line"><span class="comment"># 添加下面两项</span></span><br><span class="line">connection-control-failed-connections-threshold=<span class="number">3</span>   <span class="comment">#登陆失败次数限制</span></span><br><span class="line">connection-control-min-connection-<span class="built_in">delay</span>=<span class="number">900000</span>      <span class="comment">#限制重试时间，此处为毫秒，注意按需求换算</span></span><br></pre></td></tr></table></figure></p><p>重启 MySQL 服务<code>service mysqld restart</code> 或 <code>service mysql restart</code></p><p>方式二：设置全局变量<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> GLOBAL <span class="comment">connection_control_failed_connections_threshold = 3</span>;</span><br><span class="line"><span class="keyword">SET</span> GLOBAL <span class="comment">connection_control_min_connection_delay = 900000</span>;</span><br></pre></td></tr></table></figure></p><p>配置完成，再次使用<code>show variables like &#39;%connection_control%&#39;;</code>查看参数：<br><img src="https://i.loli.net/2021/02/08/EjRINTklfFc5m8D.png" alt="图三"><br>可以看到已经是我们配置的值了。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><img src="https://i.loli.net/2021/02/08/CKpO8iZ2EFglNDb.png" alt="图四"><br>如【图四】输错三次密码之后，第四次程序已经锁住了。</p><h2 id="参考和相关链接"><a href="#参考和相关链接" class="headerlink" title="参考和相关链接"></a>参考和相关链接</h2><p>MySQL数据库限制多次登录失败重试时间：<a href="https://blog.csdn.net/ywd1992/article/details/83865537" target="_blank" rel="noopener">https://blog.csdn.net/ywd1992/article/details/83865537</a></p><p>MySQL 插件之连接控制插件：<a href="https://www.cnblogs.com/zhenxing/p/11050823.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhenxing/p/11050823.html</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： 治恒说说</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-使用JdbcTemplate操作数据库</title>
      <link href="/210206-SpringBoot-%E4%BD%BF%E7%94%A8JdbcTemplate%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93.html"/>
      <url>/210206-SpringBoot-%E4%BD%BF%E7%94%A8JdbcTemplate%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
      
        <content type="html"><![CDATA[<p>关于 JDBC 肯定是 java 开发者的入门知识，很显然在 Spring boot 中的使用也是非常简单的，这一节先当与给大家复习了，已熟知的同学请忽略。</p><blockquote><p>Tips：示例中 MySQL 使用5.7版本，spring boot 使用 2.4.2版本</p></blockquote><h2 id="加依赖"><a href="#加依赖" class="headerlink" title="加依赖"></a>加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请注意这里使用的包是<code>spring-boot-starter-jdbc</code>，其实在使用中你会发现会有这样一个包<code>spring-boot-starter-data-jdbc</code>，那么他们是什么区别呢？</p><p>区别在于，前者是 Spring支持JDBC数据库的包，使用<code>DataSourceTransactionManager</code>管理事务；后者是 Jpa 对JDBC的支持，使用<code>JpaTransactionManager</code>管理事务。至于 Jpa，后面会有相关的文章介绍。</p><h2 id="写配置"><a href="#写配置" class="headerlink" title="写配置"></a>写配置</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">server</span>:</span><br><span class="line">  <span class="attribute">port</span>: <span class="number">8080</span></span><br><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">application</span>:</span><br><span class="line">    <span class="attribute">name</span>: spring-boot-jdbc</span><br><span class="line">  <span class="attribute">datasource</span>:</span><br><span class="line">    <span class="attribute">driver-class-name</span>: com.mysql.jdbc.Driver</span><br><span class="line">    <span class="attribute">url</span>: <span class="attribute">jdbc</span>:<span class="attribute">mysql</span>:<span class="comment">//localhost:3306/test</span></span><br><span class="line">    <span class="attribute">username</span>: shure</span><br><span class="line">    <span class="attribute">password</span>: shure</span><br></pre></td></tr></table></figure><p>要想访问数据库，那肯定要配置数据库的连接信息了<br><strong>注意：</strong>mysql8.0的驱动包有所变化 <code>com.mysql.cj.jdbc.Driver</code></p><h2 id="加注解"><a href="#加注解" class="headerlink" title="加注解"></a>加注解</h2><p>无需注解</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>首先在mysql数据库中建立 user 的数据表。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`t_user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">8</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`gender`</span> <span class="built_in">varchar</span>(<span class="number">8</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_general_ci;</span><br></pre></td></tr></table></figure></p><p>然后，建立 user 表对应的实体类，并添加构造函数。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">int</span> age, <span class="keyword">boolean</span> gender, <span class="keyword">String</span> address)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再然后，编写访问数据库的操作。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserJdbcDao</span> &#123;</span></span><br><span class="line">    @Autowired</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line">    public List&lt;UserEntity&gt; findAll(String name)&#123;</span><br><span class="line">        List&lt;UserEntity&gt; <span class="keyword">list</span> = jdbcTemplate.query<span class="function"><span class="params">(<span class="string">"SELECT * FROM t_user WHERE name = ?"</span>, (res, i) -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            UserEntity user = <span class="keyword">new</span> UserEntity();</span></span></span><br><span class="line"><span class="function"><span class="params">            user.setId(res.getInt(<span class="string">"ID"</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            user.setName(res.getString(<span class="string">"NAME"</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            user.setAddress(res.getString(<span class="string">"ADDRESS"</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            user.setAge(res.getInt(<span class="string">"AGE"</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            user.setGender(res.getBoolean(<span class="string">"GENDER"</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> user;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;, name)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">list</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">UserEntity</span> <span class="title">getUser</span><span class="params">(Integer id)</span>&#123;</span></span><br><span class="line"><span class="function">        <span class="title">List</span>&lt;<span class="title">UserEntity</span>&gt; <span class="title">list</span> = <span class="title">jdbcTemplate</span>.<span class="title">query</span><span class="params">(<span class="string">"SELECT * FROM t_user WHERE id = ?"</span>, (res, i) -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            UserEntity user = <span class="keyword">new</span> UserEntity();</span></span></span><br><span class="line"><span class="function"><span class="params">            user.setId(res.getInt(<span class="string">"ID"</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            user.setName(res.getString(<span class="string">"NAME"</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            user.setAddress(res.getString(<span class="string">"ADDRESS"</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            user.setAge(res.getInt(<span class="string">"AGE"</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            user.setGender(res.getBoolean(<span class="string">"GENDER"</span>));</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> user;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;, id)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">list</span>.<span class="title">get</span><span class="params">(<span class="number">0</span>)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">Integer</span> <span class="title">save</span><span class="params">(UserEntity user)</span>&#123;</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">jdbcTemplate</span>.<span class="title">update</span><span class="params">(<span class="string">"INSERT INTO t_user(name, age, gender, address) VALUES(?, ?, ?, ?)"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                user.getName(),</span></span></span><br><span class="line"><span class="function"><span class="params">                user.getAge(),</span></span></span><br><span class="line"><span class="function"><span class="params">                user.isGender(),</span></span></span><br><span class="line"><span class="function"><span class="params">                user.getAddress())</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">update</span><span class="params">(UserEntity user)</span>&#123;</span></span><br><span class="line"><span class="function">        <span class="title">jdbcTemplate</span>.<span class="title">update</span><span class="params">(<span class="string">"UPDATE t_user SET name = ?, age = ?, gender = ?, address = ? WHERE id = ?"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                user.getName(),</span></span></span><br><span class="line"><span class="function"><span class="params">                user.getAge(),</span></span></span><br><span class="line"><span class="function"><span class="params">                user.isGender(),</span></span></span><br><span class="line"><span class="function"><span class="params">                user.getAddress(),</span></span></span><br><span class="line"><span class="function"><span class="params">                user.getId())</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">delete</span><span class="params">(Integer id)</span>&#123;</span></span><br><span class="line"><span class="function">        <span class="title">jdbcTemplate</span>.<span class="title">update</span><span class="params">(<span class="string">"DELETE FROM t_user WHERE id = ?"</span>, id)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>最后，编写单元测试用例，创建对UserService的单元测试用例，通过创建、删除和查询来验证数据库操作的正确性。</p><p>这样 jdbc 的基本操作就完成了，通过上面这个简单的例子，我们可以看到在Spring Boot下访问数据库的配置依然秉承了框架的初衷：简单。我们只需要在pom.xml中加入数据库依赖，再到application.properties中配置连接信息，不需要像Spring应用中创建JdbcTemplate的Bean，就可以直接在自己的对象中注入使用。</p><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-jdbc" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-jdbc</a></p><p>程序员DD的博文：<a href="https://blog.didispace.com/spring-boot-learning-21-3-1/" target="_blank" rel="noopener">https://blog.didispace.com/spring-boot-learning-21-3-1/</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql密码安全策略配置</title>
      <link href="/210204-Mysql%E5%AF%86%E7%A0%81%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE.html"/>
      <url>/210204-Mysql%E5%AF%86%E7%A0%81%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<p>近些年来，网络安全相应的法律法规在逐步完善，网络安全等级保护制度在《网络安全法》的正式实施后，得到大力推进。很多公司、单位，逐渐认识到网络安全等级保护的重要性，为了落实网络安全等级保护工作，我所在的项目最近也做了一次等保的测评，下面是针对 MySQL 数据库相关的一些整改配置。</p><blockquote><p>Tips：示例是以 Mysql 5.7 为例</p></blockquote><h2 id="密码策略"><a href="#密码策略" class="headerlink" title="密码策略"></a>密码策略</h2><p>首先登录 Mysql 查看目前数据库的密码策略<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'validate_password%'</span>;</span><br></pre></td></tr></table></figure></p><p>如果出现 <code>Empty set (0.01 sec)</code> 的字样，说明你的 Mysql 还未安装 <code>validate_password</code> 的插件。查看插件列表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> plugins;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2021/02/04/5IgGol6d9bTfkFC.png" alt="图一"><br>如果没有这一项，说明确实没有安装<code>validate_password</code>插件。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>要使服务器可用，插件库文件必须位于 MySQL 插件目录中(由plugin_dir系统变量命名的目录)。如果需要，通过在服务器启动时设置 plugin_dir 的值来配置插件目录位置。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'plugin_dir'</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2021/02/04/kHz2YjrEyGQ6J3P.png" alt="图二"></p><p>插件库的文件名是 validate_password.文件名后缀根据平台的不同而不同(.so 是Unix和类Linux系统，.dll是Windows系统)。要在服务器启动时加载插件，可以在配置文件中使用 <code>plugin-load-add</code> 参数来命名包含它的库文件。修改配置文件<code>my.cnf</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">plugin-load-add</span>=validate_password.so</span><br><span class="line"><span class="comment">#服务器在启动时加载插件，并防止在服务器运行时删除插件。</span></span><br><span class="line"><span class="attribute">validate-password</span>=FORCE_PLUS_PERMANENT</span><br></pre></td></tr></table></figure></p><p>修改 my.cnf 之后，重启服务器以使新设置生效。或者，要在运行时注册插件，可以使用以下命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="keyword">install</span> <span class="keyword">plugin</span> validate_password <span class="keyword">soname</span> <span class="string">'validate_password.so'</span>;</span><br></pre></td></tr></table></figure></p><p>然后在次查看插件列表，就会出现图一中的那一项 <code>validate_password</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>再次执行查看密码策略的命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'validate_password%'</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2021/02/04/Y4I5nLstzM9ClmH.png" alt="image.png"></p><p><code>validate_password_check_user_name</code>：设置为ON的时候表示能将密码设置成当前用户名。<br><code>validate_password_dictionary_file</code>：用于检查密码的字典文件的路径名。<br><code>validate_password_length</code>：所需密码的最小长度。<br><code>validate_password_mixed_case_count</code>：默认值为1，如果密码策略是中等或更强的，限制小写字符和大写字符个数。<br><code>validate_password_number_count</code>：如果密码策略是中等或更强的，要求密码具有数字的个数。<br><code>validate_password_policy</code>： 默认值为1, 密码强度等级 [LOW:0| MEDIUM:1 | STRONG:2]<br><code>validate_password_special_char_count</code> : 默认值为1，限制特殊字符个数<br>其中，validate_password_policy<br>0/LOW：只检查长度。<br>1/MEDIUM：检查长度、数字、大小写、特殊字符。<br>2/STRONG：检查长度、数字、大小写、特殊字符字典文件。</p><p>可以使用一下命令修改上述值：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure></p><p>也可以在配置文件中直接配置：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">validate_password_policy</span>=1</span><br><span class="line"><span class="attribute">validate_password_length</span>=8</span><br></pre></td></tr></table></figure></p><h2 id="参考和相关链接"><a href="#参考和相关链接" class="headerlink" title="参考和相关链接"></a>参考和相关链接</h2><p>mysql 5.7安装密码校验插件validate_password：<a href="https://www.cnblogs.com/alonely/p/10927541.html" target="_blank" rel="noopener">https://www.cnblogs.com/alonely/p/10927541.html</a></p><p>MYSQL57密码策略修改：<a href="https://www.cnblogs.com/zhi-leaf/p/5994478.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhi-leaf/p/5994478.html</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-集成Swagger2文档生成</title>
      <link href="/210127-SpringBoot-%E9%9B%86%E6%88%90Swagger2%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90.html"/>
      <url>/210127-SpringBoot-%E9%9B%86%E6%88%90Swagger2%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90.html</url>
      
        <content type="html"><![CDATA[<p>随着前后端分离和微服务架构的流行，甚至有些公司强制使用微服务架构，在提高效率同时，问题也随之而来。通常我们的一个RESTful API，会对应不同的开发者，Android，IOS，Web，小程序等不同团队研发人员，显然沟通成本成倍的增长，一般我们都会通过共享文档来维护这些 API ，但随着项目中 API 越来越多，版本升级越多，就会造成文档维护不及时或者无人维护的问题。如果你所在团队也正在面临这样的问题，那么今天我们一起来学习文档神器 Swagger。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Swagger 是一款 RESTful 接口的文档在线自动生成外加调试功能的软件。可以将项目的所有接口在一个UI界面上展示出来，同时表明了这个接口的用途，接口需要的参数是什么类型参数是否必须，输入了参数可以直接测试接口类似postman的功能，会显示接口请求的状态码和返回的数据结构。</p><p>那么后端开发人员只需要在代码中添加几个注解，就会生成一套标准的文档，而且随着代码的变动也随之更新，这样减少了单独维护文档成本，也减少了团队之间的沟通成本，接下来我们来看怎么将 Swagger 集成到 Spring boot 中。</p><h2 id="加依赖"><a href="#加依赖" class="headerlink" title="加依赖"></a>加依赖</h2><p>需要加入 swagger2 和 swagger-ui 的包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="写配置"><a href="#写配置" class="headerlink" title="写配置"></a>写配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>注意：在生产环境将此配置设置为 false </strong></p><p>因为使用原生的 swagger，需要额外加入swagger 的配置类<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@EnableSwagger2</span></span><br><span class="line"><span class="variable">@ConditionalOnProperty</span>(name = <span class="string">"swagger.enable"</span>,  havingValue = <span class="string">"true"</span>)</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="selector-class">.apiInfo</span>(apiInfo())</span><br><span class="line">                <span class="selector-class">.select</span>()</span><br><span class="line">                <span class="selector-class">.apis</span>(RequestHandlerSelectors.basePackage(<span class="string">"com.shure.swagger2"</span>))</span><br><span class="line">                <span class="selector-class">.paths</span>(PathSelectors.any())</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置在线文档的基本信息</span></span><br><span class="line">    <span class="selector-tag">private</span> <span class="selector-tag">ApiInfo</span> <span class="selector-tag">apiInfo</span>() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">ApiInfoBuilder</span>()</span><br><span class="line">                <span class="selector-class">.title</span>(<span class="string">"springboot利用swagger构建api文档"</span>)</span><br><span class="line">                <span class="selector-class">.description</span>(<span class="string">"用户管理接口文档"</span>)</span><br><span class="line">                <span class="selector-class">.termsOfServiceUrl</span>(<span class="string">"https://dddreams.github.io/"</span>)</span><br><span class="line">                <span class="selector-class">.version</span>(<span class="string">"0.1"</span>)</span><br><span class="line">                <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="加注解"><a href="#加注解" class="headerlink" title="加注解"></a>加注解</h2><p>在启动类加 <code>@EnableSwagger2</code>注解，或者在上面 <code>SwaggerConfig</code> 类上加入此注解。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableSwagger2</span></span><br><span class="line">public class SpringBootSwagger2Application &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(SpringBootSwagger2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>OK，完成上面三步，已经可以使用 swagger 了，启动后访问，<code>http://localhost:8080/swagger-ui.html</code></p><p><img src="https://i.loli.net/2021/01/27/GDUCxPmvXIkWhoa.png" alt="swagger-ui"></p><h3 id="编写业务接口"><a href="#编写业务接口" class="headerlink" title="编写业务接口"></a>编写业务接口</h3><p>新建用户的实体类 UserEntity，为了简化代码我们会引入 lombok 的插件。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="variable">@ApiModel</span>(description=<span class="string">"用户实体"</span>)</span><br><span class="line">public class UserEntity &#123;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(<span class="string">"用户编号"</span>)</span><br><span class="line">    private Integer id;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(<span class="string">"用户姓名"</span>)</span><br><span class="line">    private String name;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(<span class="string">"用户年龄"</span>)</span><br><span class="line">    private int age;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(<span class="string">"用户性别"</span>)</span><br><span class="line">    private boolean gender;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(<span class="string">"住址"</span>)</span><br><span class="line">    private String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建用户相关的 API 接口<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = <span class="meta-string">"1-用户管理"</span>)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/user"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟users信息的存储</span></span><br><span class="line">    static Map&lt;Integer, UserEntity&gt; users = Collections.synchronizedMap(new HashMap&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/list"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"获取用户列表"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserEntity&gt; list()&#123;</span><br><span class="line">        List&lt;UserEntity&gt; us = new ArrayList&lt;&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> us;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/get/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"获取用户详细信息"</span>, notes = <span class="meta-string">"根据用户id来获取用户详细信息"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> UserEntity getUser(<span class="meta">@PathVariable</span> Integer id) &#123;</span><br><span class="line">        <span class="keyword">return</span> users.<span class="keyword">get</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(<span class="meta-string">"/saveOrUpdate"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"创建用户"</span>, notes = <span class="meta-string">"根据User对象创建用户"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String postUser(<span class="meta">@RequestBody</span> UserEntity user) &#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(<span class="meta-string">"/del/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"删除用户"</span>, notes = <span class="meta-string">"根据用户的id来指定删除对象"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String deleteUser(<span class="meta">@PathVariable</span> Integer id) &#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="查看接口文档"><a href="#查看接口文档" class="headerlink" title="查看接口文档"></a>查看接口文档</h3><p>再来看看 swagger 的页面会发生什么变化。</p><p><img src="https://i.loli.net/2021/01/27/HdwOWS7IRvzpZAi.png" alt="swagger-ui"></p><p>展开标签后，会看到每个接口的详细信息，并且可以在线调试，返回结果的数据结构也一目了然。还包括实体的信息也会在文档中展现。</p><p><img src="https://i.loli.net/2021/01/27/dNXwRZj8AramJtl.png" alt="swagger-ui"></p><h2 id="接口及方法的分类排序"><a href="#接口及方法的分类排序" class="headerlink" title="接口及方法的分类排序"></a>接口及方法的分类排序</h2><p>随着业务的增长，API 接口数量的增长，实际使用中我们会发现找一个接口会非常困难，这就考虑为接口和方法进行分类排序，方便查找。</p><h3 id="接口的分类"><a href="#接口的分类" class="headerlink" title="接口的分类"></a>接口的分类</h3><p>对于接口的分类，swagger 提供了 tags 的参数，只需在 Controller 的 <code>@Api</code> 注解上加参数 tags 即可。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Api</span>(tags = <span class="string">"用户管理"</span>)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Api</span>(tags = &#123;<span class="string">"商品管理"</span>, <span class="string">"..."</span>&#125;)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/goods"</span>)</span><br><span class="line">public class GoodsController &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以将同类的接口，指定在 tags 中，文档中就会出现一个分类中。<br><img src="https://i.loli.net/2021/01/27/qOiw9pfHyjoJcYE.png" alt="swagger-ui"></p><h3 id="接口的排序"><a href="#接口的排序" class="headerlink" title="接口的排序"></a>接口的排序</h3><p>对于接口的排序，swagger 默认是根据字母顺序排的，并且只提供了这一种排序方式，我们可以投机取巧在 tags 参数的前面添加数字让其按顺序排列。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Api</span>(tags = <span class="string">"1-用户管理"</span>)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@Api</span>(tags = &#123;<span class="string">"2-商品管理"</span>&#125;)</span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line"><span class="variable">@RequestMapping</span>(<span class="string">"/goods"</span>)</span><br><span class="line">public class GoodsController &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2021/01/27/ZPpGE2DKBl5J6FR.png" alt="swagger-ui"></p><h3 id="方法的排序"><a href="#方法的排序" class="headerlink" title="方法的排序"></a>方法的排序</h3><p>方式一，swagger 默认是根据字母顺序排的，可以通过以下方式：<br><img src="http://img.didispace.com/Fj283ftc5WXw7yCH6UFl7VvCshrC" alt="图片来源：程序猿DD"><br>图片来源于 程序猿DD 的博客：<a href="https://blog.didispace.com/spring-boot-learning-21-2-4/" target="_blank" rel="noopener">https://blog.didispace.com/spring-boot-learning-21-2-4/</a></p><p>方式二，引入 spring4all 社区开源的 <code>swagger-spring-boot-starter</code><br>github地址：<a href="https://github.com/SpringForAll/spring-boot-starter-swagger" target="_blank" rel="noopener">https://github.com/SpringForAll/spring-boot-starter-swagger</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spring4all<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>添加配置：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger.ui-config.operations-sorter</span>=alpha</span><br></pre></td></tr></table></figure></p><p>方法的排序 swagger 提供了两个配置，<code>alpha</code>和<code>method</code>，默认为<code>alpha</code>。</p><p>方式三，引入 knife4j 开源的，<code>knife4j-spring-ui</code>基于bootstrap的ui框架。</p><p>github地址：<a href="https://github.com/xiaoymin/swagger-bootstrap-ui" target="_blank" rel="noopener">https://github.com/xiaoymin/swagger-bootstrap-ui</a></p><p>gitee地址：<a href="https://gitee.com/xiaoym/knife4j/tree/master/swagger-bootstrap-ui" target="_blank" rel="noopener">https://gitee.com/xiaoym/knife4j/tree/master/swagger-bootstrap-ui</a><br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;lastVersion&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>使用该方式需要在 <code>SwaggerConfig</code> 配置类上添加 <code>@EnableSwaggerBootstrapUI</code>注解，然后在方法上添加<code>@ApiOperationSupport(order = 1)</code>注解，并指定 order 的值。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/list"</span>)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = <span class="meta-string">"获取用户列表"</span>)</span></span><br><span class="line"><span class="meta">@ApiOperationSupport(order = 1)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserEntity&gt; list()&#123;</span><br><span class="line">    List&lt;UserEntity&gt; us = new ArrayList&lt;&gt;(users.values());</span><br><span class="line">    <span class="keyword">return</span> us;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/get/&#123;id&#125;"</span>)</span></span><br><span class="line"><span class="meta">@ApiOperation(value = <span class="meta-string">"获取用户详细信息"</span>, notes = <span class="meta-string">"根据用户id来获取用户详细信息"</span>)</span></span><br><span class="line"><span class="meta">@ApiOperationSupport(order = 2)</span></span><br><span class="line"><span class="keyword">public</span> UserEntity getUser(<span class="meta">@PathVariable</span> Integer id) &#123;</span><br><span class="line">    <span class="keyword">return</span> users.<span class="keyword">get</span>(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动程序，访问：<code>http://localhost:8080/doc.html</code>，界面长这个样子。<br><img src="https://i.loli.net/2021/01/27/fEq8aKducMCW7gh.png" alt="QQ截图20210127164051.png"></p><p><strong>注意：需要在个性化设置中开启  <code>启用SwaggerBootstrapUi提供的增强功能</code></strong><br><img src="https://i.loli.net/2021/01/27/gUmf87BbEtMoHa4.png" alt="QQ截图20210127164429.png"></p><p>这样你就会发现，方法的排序按照我们设置的 <code>order</code> 排序了。</p><h3 id="参数的排序"><a href="#参数的排序" class="headerlink" title="参数的排序"></a>参数的排序</h3><p>参数的排序比较简单，只需在实体字段的注解上加 <code>position</code> 属性，参数就可以根据设置的<code>position</code>值进行排序了。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line"><span class="variable">@ApiModel</span>(description=<span class="string">"商品实体"</span>)</span><br><span class="line">public class GoodsEntity &#123;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(value = <span class="string">"商品编号"</span>, position = <span class="number">1</span>)</span><br><span class="line">    private Long id;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(value = <span class="string">"商品名称"</span>, position = <span class="number">2</span>)</span><br><span class="line">    private String name;</span><br><span class="line">    <span class="variable">@ApiModelProperty</span>(value = <span class="string">"商品描述"</span>, position = <span class="number">3</span>)</span><br><span class="line">    private String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考和相关链接"><a href="#参考和相关链接" class="headerlink" title="参考和相关链接"></a>参考和相关链接</h2><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-swagger2" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-swagger2</a></p><p>Swagger官网：<a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></p><p>Swagger接口分类与各元素排序问题详解：<a href="https://blog.didispace.com/spring-boot-learning-21-2-4/" target="_blank" rel="noopener">https://blog.didispace.com/spring-boot-learning-21-2-4/</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-集成Quartz作业调度</title>
      <link href="/210125-SpringBoot-%E9%9B%86%E6%88%90Quartz%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6.html"/>
      <url>/210125-SpringBoot-%E9%9B%86%E6%88%90Quartz%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6.html</url>
      
        <content type="html"><![CDATA[<p>在说 quartz 之前，我们先回顾一下 spring 的定时任务，使用相当简单，默认集成在 spring boot 中，所以在 spring boot 项目中无需额外添加依赖，无需配置，只需要加个注解就可以了，当然也可以实现动态添加删除定时任务，详情前往上一篇博文<a href="https://dddreams.github.io/210122-SpringBoot-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html">SpringBoot-定时任务</a>，那为什么要使用 quartz 呢，主要还是考虑分布式的应用，下面我们就来看一下 spring boot 是怎么集成 quartz 的。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>简单介绍下 quartz，Quartz是OpenSymphony开源组织在任务调度领域的一个开源项目，完全基于Java实现。作为一个优秀的开源调度框架，Quartz具有以下特点：</p><ul><li>（1）强大的调度功能，例如支持丰富多样的调度方法，可以满足各种常规及特殊需求；</li><li>（2）灵活的应用方式，例如支持任务和调度的多种组合方式，支持调度数据的多种存储方式；</li><li>（3）分布式和集群能力。</li></ul><blockquote><p>Tips<br>还记得 spring boot 的三板斧吗？加依赖，写配置，添注解</p></blockquote><h2 id="加依赖"><a href="#加依赖" class="headerlink" title="加依赖"></a>加依赖</h2><p>引入 spring-boot-starter-quartz 的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--quartz定时任务依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="写配置"><a href="#写配置" class="headerlink" title="写配置"></a>写配置</h2><p>无需配置</p><h2 id="加注解"><a href="#加注解" class="headerlink" title="加注解"></a>加注解</h2><p>无需注解</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们需要新建一个 QuartzService 的类，由于代码较长，在这里就不贴了，想看具体代码，请前往<a href="https://github.com/dddreams/learn-spring-boot/blob/master/spring-boot-quartz/src/main/java/com/shure/quartz/QuartzService.java" target="_blank" rel="noopener">QuartzService.java</a>。quartz 的 Job 实现方式很多，不一定要用这种方式，只是笔者认为这是一种比较简单的实现。</p><p>新加一个测试类 QuartzTest<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzTest</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(QuartzTest.class);</span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> QuartzService quartzService;</span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quartzTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"添加定时任务"</span>);</span><br><span class="line">        <span class="keyword">String</span> jobName = <span class="string">"test-1"</span>;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"test"</span>, <span class="string">"测试任务执行"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"name"</span>, jobName);</span><br><span class="line">        quartzService.deleteJob(jobName, <span class="string">"test"</span>);</span><br><span class="line">        quartzService.addJob(TestQuartz.class, jobName, <span class="string">"test"</span>, <span class="string">"0 */2 * * * ?"</span>, <span class="built_in">map</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建 Job 类，需要继承 QuartzJobBean<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestQuartz</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> <span class="type">Logger</span> logger = <span class="type">LoggerFactory</span>.getLogger(<span class="type">TestQuartz</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void executeInternal(<span class="type">JobExecutionContext</span> jobExecutionContext) <span class="keyword">throws</span> <span class="type">JobExecutionException</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> formatter = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        logger.info(<span class="string">"任务开始执行:"</span> + formatter.format(<span class="type">System</span>.currentTimeMillis()));</span><br><span class="line">        <span class="type">JobDataMap</span> jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</span><br><span class="line">        <span class="type">String</span> test = jobDataMap.get(<span class="string">"test"</span>).toString();</span><br><span class="line">        <span class="type">String</span> jobName = jobDataMap.get(<span class="string">"name"</span>).toString();</span><br><span class="line">        logger.info(test + <span class="string">":"</span> + jobName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动，运行 Test 类，便可添加一个任务，创建 Job 时需要的参数可以通过 <code>JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();</code>来获取，这样就完成了一个定时任务功能。</p><h2 id="Quartz-集群使用"><a href="#Quartz-集群使用" class="headerlink" title="Quartz 集群使用"></a>Quartz 集群使用</h2><p>一个 Quartz 集群中的每个节点是一个独立的 Quartz 应用，它又管理着其他的节点。这就意味着你必须对每个节点分别启动或停止。Quartz 集群中，独立的 Quartz 节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一 Quartz 应用的。</p><p>因为 Quartz 集群依赖于数据库，所以必须首先创建 Quartz 数据库表，Quartz 发布包中包括了所有被支持的数据库平台的SQL脚本。这些SQL脚本存放于 <code>&lt;quartz_home&gt;/docs/dbTables</code> 目录下，总共12张表，不同版本，表个数可能不同。下面是具体表的说明：</p><ul><li>qrtz_blob_triggers : 以Blob 类型存储的触发器。</li><li>qrtz_calendars：存放日历信息， quartz可配置一个日历来指定一个时间范围。</li><li>qrtz_cron_triggers：存放cron类型的触发器。</li><li>qrtz_fired_triggers：存放已触发的触发器。</li><li>qrtz_job_details：存放一个jobDetail信息。</li><li>qrtz_job_listeners：job监听器。</li><li>qrtz_locks： 存储程序的悲观锁的信息(假如使用了悲观锁)。</li><li>qrtz_paused_trigger_graps：存放暂停掉的触发器。</li><li>qrtz_scheduler_state：调度器状态。</li><li>qrtz_simple_triggers：简单触发器的信息。</li><li>qrtz_trigger_listeners：触发器监听器。</li><li>qrtz_triggers：触发器的基本信息。</li></ul><p>接下来，新建 quartz.yml 的配置文件，来覆盖默认的配置。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org:</span></span><br><span class="line">  <span class="attr">quartz:</span></span><br><span class="line">    <span class="attr">jobStore:</span></span><br><span class="line">      <span class="attr">useProperties:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">tablePrefix:</span> <span class="string">qrtz_</span></span><br><span class="line">      <span class="comment"># 开启集群模式</span></span><br><span class="line">      <span class="attr">isClustered:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 集群实例检测时间间隔 ms</span></span><br><span class="line">      <span class="attr">clusterCheckinInterval:</span> <span class="number">5000</span></span><br><span class="line">      <span class="comment"># misfire 任务的超时阈值 ms</span></span><br><span class="line">      <span class="attr">misfireThreshold:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">txIsolationLevelReadCommitted:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">class:</span> <span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line">      <span class="attr">driverDelegateClass:</span> <span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">scheduler:</span></span><br><span class="line">      <span class="attr">instanceId:</span> <span class="string">AUTO</span></span><br><span class="line">      <span class="attr">rmi.export:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">rmi.proxy:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">wrapJobExecutionInUserTransaction:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 工作线程的线程池设置</span></span><br><span class="line">    <span class="attr">threadPool:</span></span><br><span class="line">      <span class="attr">class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></span><br><span class="line">      <span class="attr">threadCount:</span> <span class="number">25</span></span><br><span class="line">      <span class="attr">threadPriority:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">threadsInheritContextClassLoaderOfInitializingThread:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>这样 Quartz 集群就可以实现了。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="1、Quartz-触发时间配置的三种方式"><a href="#1、Quartz-触发时间配置的三种方式" class="headerlink" title="1、Quartz 触发时间配置的三种方式"></a>1、Quartz 触发时间配置的三种方式</h3><ul><li>cron 方式：采用cronExpression表达式配置时间。</li><li>simple 方式：和JavaTimer差不多，可以指定一个开始时间和结束时间外加一个循环时间。</li><li>calendars 方式：可以和cron配合使用，用cron表达式指定一个触发时间规律，用calendar指定一个范围。</li></ul><p><strong>注意：cron方式需要用到的4张数据表： qrtz_triggers，qrtz_cron_triggers，qrtz_fired_triggers，qrtz_job_details</strong></p><h3 id="2、使用-quartz-遇到的问题"><a href="#2、使用-quartz-遇到的问题" class="headerlink" title="2、使用 quartz 遇到的问题"></a>2、使用 quartz 遇到的问题</h3><h4 id="2-1、在定时任务执行中-service-Autowired-注解不进来"><a href="#2-1、在定时任务执行中-service-Autowired-注解不进来" class="headerlink" title="2.1、在定时任务执行中 service @Autowired 注解不进来"></a>2.1、在定时任务执行中 service @Autowired 注解不进来</h4><p>创建 JobFactory 的 Bean，并在 SchedulerConfig 中添加到 SchedulerFactoryBean<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JobFactory</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JobFactory</span> <span class="keyword">extends</span> <span class="title">SpringBeanJobFactory</span> <span class="title">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> transient <span class="type">AutowireCapableBeanFactory</span> beanFactory;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void setApplicationContext(<span class="keyword">final</span> <span class="type">ApplicationContext</span> context) &#123;</span><br><span class="line">        beanFactory = context.getAutowireCapableBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Object</span> createJobInstance(<span class="keyword">final</span> <span class="type">TriggerFiredBundle</span> bundle) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> job = <span class="keyword">super</span>.createJobInstance(bundle);</span><br><span class="line">        beanFactory.autowireBean(job);</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SchedulerConfig.java<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobFactory jobFactory;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Properties <span class="title">quartzProperties</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        PropertiesFactoryBean propertiesFactoryBean = <span class="keyword">new</span> PropertiesFactoryBean();</span><br><span class="line">        propertiesFactoryBean.setLocation(<span class="keyword">new</span> ClassPathResource(<span class="string">"/quartz.yml"</span>));</span><br><span class="line">        propertiesFactoryBean.afterPropertiesSet();</span><br><span class="line">        <span class="function"><span class="keyword">return</span> propertiesFactoryBean.<span class="title">getObject</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SchedulerFactoryBean factory = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        factory.setSchedulerName(<span class="string">"Cluster_Scheduler"</span>);</span><br><span class="line">        factory.setDataSource(dataSource);</span><br><span class="line">        factory.setApplicationContextSchedulerContextKey(<span class="string">"applicationContext"</span>);</span><br><span class="line">        factory.setQuartzProperties(quartzProperties());</span><br><span class="line">        factory.setJobFactory(jobFactory);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2、quartz-任务激活失败"><a href="#2-2、quartz-任务激活失败" class="headerlink" title="2.2、quartz 任务激活失败"></a>2.2、quartz 任务激活失败</h4><p>在Quartz中，当一个持久化的触发器会因为：</p><ol><li>调度器被关闭；</li><li>线程池没有可用线程；</li><li>项目重启；</li><li>任务的串行执行；</li></ol><p>而错过激活时间，就会发生激活失败（misfire）。</p><p>可以设置 quartz中CornTrigger使用的策略<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的misfile任务马上执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//在Trigger中默认选择MISFIRE_INSTRUCTION_FIRE_ONCE_NOW 策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISFIRE_INSTRUCTION_SMART_POLICY = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// CornTrigger默认策略，合并部分misfire，正常执行下一个周期的任务。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISFIRE_INSTRUCTION_FIRE_ONCE_NOW = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//所有的misFire都不管，执行下一个周期的任务。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISFIRE_INSTRUCTION_DO_NOTHING = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>1、 通过setMisfireInstruction方法设置misfire策略。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CronTriggerFactoryBean triggerFactoryBean = new CronTriggerFactoryBean<span class="params">()</span>;</span><br><span class="line">triggerFactoryBean.<span class="keyword">set</span>Name<span class="params">("corn_" + clazzName)</span>;</span><br><span class="line">triggerFactoryBean.<span class="keyword">set</span>JobDetail<span class="params">(jobFactory.getObject()</span>);</span><br><span class="line">triggerFactoryBean.<span class="keyword">set</span>CronExpression<span class="params">(quartzCorn)</span>;</span><br><span class="line">triggerFactoryBean.<span class="keyword">set</span>Group<span class="params">(QUARTZ_TRIGGER_GROUP)</span>;</span><br><span class="line"><span class="string">//</span>设置misfire策略</span><br><span class="line">triggerFactoryBean.<span class="keyword">set</span>MisfireInstruction<span class="params">(CronTrigger.MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY)</span>;</span><br><span class="line">triggerFactoryBean.afterPropertiesSet<span class="params">()</span>;</span><br></pre></td></tr></table></figure></p><p>2、 也可以通过CronScheduleBuilder设置misfire策略。<br><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CronScheduleBuilder csb = CronScheduleBuilder.cronSchedule(<span class="string">"0/5 * * * * ?"</span>);</span><br><span class="line"><span class="comment">//MISFIRE_INSTRUCTION_DO_NOTHING </span></span><br><span class="line">csb.withMisfireHandlingInstructionDoNothing();</span><br><span class="line"><span class="comment">//MISFIRE_INSTRUCTION_FIRE_ONCE_NOW</span></span><br><span class="line">csb.withMisfireHandlingInstructionFireAndProceed();<span class="comment">//(默认)</span></span><br><span class="line"><span class="comment">//MISFIRE_INSTRUCTION_IGNORE_MISFIRE_POLICY</span></span><br><span class="line">csb.withMisfireHandlingInstructionIgnoreMisfires();</span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>任务调度在实际项目中会经常用到，Quartz 也是我们的不二选择，但是在高可用的系统中也存在不少问题，具体问题小伙伴们可以在留言区留言，我们一起共同探讨。</p><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-quartz" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-quartz</a></p><p>Quartz 官网：<a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener">http://www.quartz-scheduler.org/</a></p><p>Quartz集群原理及配置应用：<a href="https://www.cnblogs.com/xiang--liu/p/10120105.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiang–liu/p/10120105.html</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-定时任务</title>
      <link href="/210122-SpringBoot-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html"/>
      <url>/210122-SpringBoot-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html</url>
      
        <content type="html"><![CDATA[<p>在我们开发项目中，定时任务是经常用到的一种技术，来处理一些业务，SpringBoot 默认支持定时任务，怎么样是不是感觉 Spring Boot 太人性化了，那么下面我们看一下怎么实现一个定时器吧。</p><blockquote><p>Tips<br>开发 Spring Boot 项目有个口诀或者说是 Spring Boot 的三板斧：加依赖、写配置、添注解<br>示例代码详见：<code>https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-schedule</code></p></blockquote><h2 id="加依赖"><a href="#加依赖" class="headerlink" title="加依赖"></a>加依赖</h2><p>Spring Boot 默认支持定时任务，所以只要加入 Spring Boot 的依赖即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="写配置"><a href="#写配置" class="headerlink" title="写配置"></a>写配置</h2><p>实际开发中一般将经常变化的值配置到配置文件中，定时任务中我们可以自定义配置项 cron 来控制定时任务执行的时间<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">schedule</span></span><br><span class="line"><span class="attr">schedule:</span></span><br><span class="line">  <span class="attr">cron:</span> <span class="number">0</span> <span class="string">*/1</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span> <span class="string">?</span> <span class="comment"># 表达式表示 1 分钟执行一次</span></span><br></pre></td></tr></table></figure></p><p>关于 cron 表达式，如果不清楚请先百度。</p><h2 id="添注解"><a href="#添注解" class="headerlink" title="添注解"></a>添注解</h2><p>我们需要在启动类上加 <code>@EnableScheduling</code> 注解即可开启定时任务<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableScheduling</span></span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="编写定时任务的代码"><a href="#编写定时任务的代码" class="headerlink" title="编写定时任务的代码"></a>编写定时任务的代码</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Slf4j</span></span><br><span class="line"><span class="variable">@Component</span></span><br><span class="line">public class TestTasks &#123;</span><br><span class="line">    <span class="comment">//@Scheduled(cron = "0 */1 * * * ?")</span></span><br><span class="line">    <span class="variable">@Scheduled</span>(cron = <span class="string">"$&#123;schedule.cron&#125;"</span>)</span><br><span class="line">    public void testTask() &#123;</span><br><span class="line">        <span class="selector-tag">log</span><span class="selector-class">.info</span>(<span class="string">"哈哈，我执行了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，便会在控制台隔1分钟打印<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">哈哈，我执行了！</span><br><span class="line">哈哈，我执行了！</span><br><span class="line">哈哈，我执行了！</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> <code>@Component</code> 注解是启动后立即执行，<code>${schedule.cron}</code> 便是从配置文件读取配置的执行时间。</p><p>前面说了如果你对 cron 不了解，不用担心，Spring boot 提供了另外的方式 <code>fixedRate</code>，详解如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Scheduled</span>(fixedRate = <span class="number">60000</span>) ：上一次开始执行时间点之后<span class="number">1</span>分再执行</span><br><span class="line"><span class="variable">@Scheduled</span>(fixedDelay = <span class="number">60000</span>) ：上一次执行完毕时间点之后<span class="number">1</span>分再执行</span><br><span class="line"><span class="variable">@Scheduled</span>(initialDelay=<span class="number">1000</span>, fixedRate=<span class="number">60000</span>) ：第一次延迟<span class="number">1</span>秒后执行，之后按 fixedRate 的规则每<span class="number">1</span>分执行一次</span><br></pre></td></tr></table></figure></p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Scheduled(fixedRate = <span class="number">60000</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTask1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">log</span>.info(<span class="string">"哈哈，我又执行了！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">哈哈，我执行了！</span><br><span class="line">哈哈，我又执行了！</span><br><span class="line">哈哈，我执行了！</span><br><span class="line">哈哈，我又执行了！</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="动态添加或删除定时任务"><a href="#动态添加或删除定时任务" class="headerlink" title="动态添加或删除定时任务"></a>动态添加或删除定时任务</h2><p>在实际项目中，往往会遇到动态的添加或停止定时任务，来我们看看怎么实现，首先添加一个配置类<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DefaultSchedulingConfigurer</span> <span class="title">implements</span> <span class="title">SchedulingConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScheduledTaskRegistrar taskRegistrar;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;ScheduledFuture&lt;?&gt;&gt; scheduledFutures = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ScheduledFuture&lt;?&gt;&gt; taskFutures = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureTasks</span>(<span class="params">ScheduledTaskRegistrar taskRegistrar</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.taskRegistrar = taskRegistrar;</span><br><span class="line">        <span class="comment">//System.out.println(inited());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;ScheduledFuture&lt;?&gt;&gt; getScheduledFutures() &#123;</span><br><span class="line">        <span class="keyword">if</span> (scheduledFutures == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// spring版本不同选用不同字段scheduledFutures</span></span><br><span class="line">                scheduledFutures = (Set&lt;ScheduledFuture&lt;?&gt;&gt;) BeanUtils.getProperty(taskRegistrar, <span class="string">"scheduledTasks"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SchedulingException(<span class="string">"not found scheduledFutures field."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> scheduledFutures;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTriggerTask</span>(<span class="params">String taskId, TriggerTask triggerTask</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (taskFutures.containsKey(taskId)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SchedulingException(<span class="string">"the taskId["</span> + taskId + <span class="string">"] was added."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        TaskScheduler scheduler = taskRegistrar.getScheduler();</span><br><span class="line">        ScheduledFuture&lt;?&gt; future = scheduler.schedule(triggerTask.getRunnable(), triggerTask.getTrigger());</span><br><span class="line">        getScheduledFutures().<span class="keyword">add</span>(future);</span><br><span class="line">        taskFutures.put(taskId, future);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelTriggerTask</span>(<span class="params">String taskId</span>)</span> &#123;</span><br><span class="line">        ScheduledFuture&lt;?&gt; future = taskFutures.<span class="keyword">get</span>(taskId);</span><br><span class="line">        <span class="keyword">if</span> (future != <span class="literal">null</span>) &#123;</span><br><span class="line">            future.cancel(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        taskFutures.<span class="keyword">remove</span>(taskId);</span><br><span class="line">        getScheduledFutures().<span class="keyword">remove</span>(future);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重置任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetTriggerTask</span>(<span class="params">String taskId, TriggerTask triggerTask</span>)</span> &#123;</span><br><span class="line">        cancelTriggerTask(taskId);</span><br><span class="line">        addTriggerTask(taskId, triggerTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">taskIds</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskFutures.keySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否存在任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">hasTask</span>(<span class="params">String taskId</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.taskFutures.containsKey(taskId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务调度是否已经初始化完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">inited</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.taskRegistrar != <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.taskRegistrar.getScheduler() != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后新建一个 controller<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/task"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTaskController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DefaultSchedulingConfigurer defaultSchedulingConfigurer;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/add"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String add(<span class="meta">@RequestParam(name = <span class="meta-string">"name"</span>)</span> String name) &#123;</span><br><span class="line">        defaultSchedulingConfigurer.addTriggerTask(name,</span><br><span class="line">                new TriggerTask(</span><br><span class="line">                        () -&gt; System.<span class="keyword">out</span>.println(<span class="string">"hello world!"</span>),</span><br><span class="line">                        new CronTrigger(<span class="string">"0/5 * * * * ? "</span>)));<span class="comment">//5秒执行一次</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"任务开启成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/del"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String del(<span class="meta">@RequestParam(name = <span class="meta-string">"name"</span>)</span> String name) &#123;</span><br><span class="line">        defaultSchedulingConfigurer.cancelTriggerTask(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"任务删除成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请求 <code>http://localhost:8080/task/add</code>，定时任务即可开启<br>请求 <code>http://localhost:8080/task/del</code>，定时任务就删除成功了</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>其实 Spring boot 的定时任务相对比较简单，如果在高并发集群环境下，我们尽量使用框架来支撑我们的业务，下一节我会介绍定时任务的框架 quartz ，大家敬请期待吧。</p><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-schedule" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-schedule</a><br>Spring boot 定时任务：<a href="http://www.ityouknow.com/springboot/2016/12/02/spring-boot-scheduler.html" target="_blank" rel="noopener">http://www.ityouknow.com/springboot/2016/12/02/spring-boot-scheduler.html</a><br>SpringBoot+schedule+可以动态添加或删除定时任务：<a href="https://blog.csdn.net/nicky_lc/article/details/106961779" target="_blank" rel="noopener">https://blog.csdn.net/nicky_lc/article/details/106961779</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是年味淡了，还是我们老了</title>
      <link href="/200121-%E6%98%AF%E5%B9%B4%E5%91%B3%E6%B7%A1%E4%BA%86%EF%BC%8C%E8%BF%98%E6%98%AF%E6%88%91%E4%BB%AC%E8%80%81%E4%BA%86.html"/>
      <url>/200121-%E6%98%AF%E5%B9%B4%E5%91%B3%E6%B7%A1%E4%BA%86%EF%BC%8C%E8%BF%98%E6%98%AF%E6%88%91%E4%BB%AC%E8%80%81%E4%BA%86.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>对幸福说个早安，给吉祥送个花篮，给祝福送份快餐，祝大家春节快乐！</p></blockquote><p>叮咚…微信收到一条消息。</p><p>「敲响的是钟声，走过的是岁月，留下的是故事，带来的是希望，盼望的是美好，送来的是祝福，愿朋友新年快乐。」是一条新年祝福，顺着华丽的符号，伴随着满屏的笑脸与礼花的表情雨，往上滑，发现和对方的上一次对话是在去年过年，我不禁陷入了沉思…「这人是谁啊！」。</p><p>“诶，有敬业福吗？来，我粘一张”，支付宝上集福集的热火朝天，每天一睁眼便浇水，一看到福字就扫，除夕夜里陪伴自己和家人最多的还是手机，终于等到开启五福了，结果，分到2.88元。</p><p>工作群里忽然热闹起来，各种祝福语，各种表情，令人紧张的是偶尔会有红包闪现，你紧盯屏幕，活动手指，生怕错过。终于来了，你庆幸自己眼疾手快抢到了，心情无比激动，感觉登上了人生巅峰，发现红包面额只有0.8元。</p><p>“狗娃啊，今年怎么没带媳妇回来啊！”，小时候盼望发压岁钱的七大姑八大姨变成了避而远之的催婚对象。你只能极其尴尬的，笑一声，“等着阿姨给介绍呢”。</p><p>突然感觉这个年，不像是小时候过的那个年了，感觉年味淡了，一切过年的活动都成了大公司散钱争用户的套路，朋友发来的新年祝福也显得那么苍白无力，只是一句虚话而已。那到底是年味淡了，还是我们老了?</p><p>“三啊，你什么时候回来”，电话那头愣了半天，“哦，我明天就回来。”原本打算不回家的小儿子听到母亲的声音，决定回家过年，他急忙的打开12306网上购票，没想到票还有，没有往年那么紧张了。</p><p>“爷爷，我们已经在路上了，爸爸开的车”，老父亲开心嘱咐慢点开车，不用着急。挂断电话又急切的让母亲准备杀鱼杀鸡。</p><p>小两口刚生了二胎，今年不准备回家，而是把父母接过来，在城里过年。火车站上有的人迫切的回家，有的人焦急的等待。每出来一批人，他们都在人群中张望着，寻找着，终于看到了父母的身影，跑过去接住父亲手里提着的东西，开心的拥抱在一起。这几年来越来越多的人选择了“反向春运”，把老人孩子接到城里过年。</p><p>是的，“团圆”成了人们过年最大的愿望。小时候最开心的是吃到包着硬币的饺子，长大了，吃什么不重要，重要的是过年能跟家人在一起。</p><p>最后，提前祝大家春节快乐！年味未淡，我们不老！</p><p>ps：这几天被一个叫做“新型肺炎”的病毒搞的人心惶惶，在这里也提醒读者朋友们注意防范，尽量避开人多的地方，加强自身卫生防止病毒传染。同时也保持镇定，不必恐慌，不要过于相信部分媒体扩大化的报道。</p><p>pps：估计大家已经看到了，我公众号改名字了，改名字的原因有二，第一是字母拼音不利于搜索；第二是博客感觉有点老气，所以改名为：「<strong>治恒说说</strong>」</p><hr><p>本文同步更新至<a href="https://dddreams.github.io/">zhiheng’s blog</a>、微信公众号。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/wechat-sys.png" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">微信搜一搜：治恒说说</p><p style="text-align: center;margin:20 0;">记得点关注哦</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java1.8你还不知道的新特性</title>
      <link href="/200110-Java1-8%E4%BD%A0%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7.html"/>
      <url>/200110-Java1-8%E4%BD%A0%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7.html</url>
      
        <content type="html"><![CDATA[<h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span>[] arr = &#123;<span class="string">"Google"</span>, <span class="string">"Baidu"</span>, <span class="string">"Taobao"</span>, <span class="string">"Sina"</span>, <span class="string">"Runoob"</span>&#125;;</span><br><span class="line">List&lt;<span class="keyword">String</span>&gt; <span class="built_in">list</span> = Arrays.asList(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 java 7 排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortUsingJava7</span><span class="params">(List&lt;<span class="keyword">String</span>&gt; names)</span> </span>&#123;</span><br><span class="line">    Collections.sort(names, <span class="keyword">new</span> Comparator&lt;<span class="keyword">String</span>&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> compare(<span class="keyword">String</span> s1, <span class="keyword">String</span> s2) &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 java 8 排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortUsingJava8</span><span class="params">(List&lt;<span class="keyword">String</span>&gt; names)</span> </span>&#123;</span><br><span class="line">    Collections.sort(names, (s1, s2) -&gt; s1.compareTo(s2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用 Java <span class="number">7</span> 语法: </span><br><span class="line">[Baidu , Google , Runoob , Sina , Taobao ]</span><br><span class="line">使用 Java <span class="number">8</span> 语法: </span><br><span class="line">[Baidu , Google , Runoob , Sina , Taobao ]</span><br></pre></td></tr></table></figure><h2 id="Stream流式操作"><a href="#Stream流式操作" class="headerlink" title="Stream流式操作"></a>Stream流式操作</h2><p>问题：<br>给定一个字符串元素列表，如下所示：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"bilibili"</span>, <span class="string">"of"</span>, <span class="string">"codesheep"</span>, <span class="string">"5"</span>, <span class="string">"at"</span>, <span class="string">"BILIBILI"</span>, <span class="string">"codesheep"</span>, <span class="string">"23"</span>, <span class="string">"CHEERS"</span>, <span class="string">"6"</span>]</span><br></pre></td></tr></table></figure></p><p>找出所有长度 &gt;=5 的字符串，并且忽略大小写、去除重复字符串，然后按字母排序，最后用“-”连接成一个字符串输出！</p><p>来，小伙伴们，5分钟，搞定它。。。什么搞定不了，该去补习补习了。<br>那么使用Java8怎么搞定呢，开启装逼模式：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String result = list.stream()                        <span class="comment">// 首先将列表转化为Stream流        </span></span><br><span class="line">                    .<span class="function"><span class="title">filter</span>( i -&gt;</span> !isNum(i) )        <span class="comment">// 筛选出字母型字符串        </span></span><br><span class="line">                    .<span class="function"><span class="title">filter</span>( i -&gt;</span> i.length() &gt;= <span class="number">5</span> )  <span class="comment">// 其次筛选出长度&gt;=5的字符串        </span></span><br><span class="line">                    .<span class="function"><span class="title">map</span>( i -&gt;</span> i.toLowerCase() )     <span class="comment">// 字符串统一转小写        </span></span><br><span class="line">                    .distinct()                      <span class="comment">// 去重操作来一下        </span></span><br><span class="line">                    .sorted( Comparator.naturalOrder() )   <span class="comment">// 字符串排序来一下        </span></span><br><span class="line">                    .collect( Collectors.joining(<span class="string">"-"</span>) );   <span class="comment">// 连词成句来一下，完美！</span></span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line">输出：bilibili-cheers-codesheep</span><br></pre></td></tr></table></figure></p><p>这操作够sao了吧！</p><h2 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h2><p>Consumer的语义是消费的意思，了解一些消息队列的同学，肯定对这个单词，有一定的理解。<br>看个简单的例子：打印3次 <code>Hello World!</code><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来的写法</span></span><br><span class="line"><span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"Hello World!"</span>);</span><br><span class="line"><span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"Hello World!"</span>);</span><br><span class="line"><span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"Hello World!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Consumer接口</span></span><br><span class="line"><span class="type">Consumer</span> <span class="built_in">c</span> = <span class="type">System</span>.out::<span class="built_in">println</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span>.andThen(<span class="built_in">c</span>).andThen(<span class="built_in">c</span>).accept(<span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure></p><p>搞定。</p><p>一个简单的平方计算：<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Integer&gt; square = <span class="keyword">x</span> -&gt; System.out.println(<span class="string">"print square : "</span> + <span class="keyword">x</span> * <span class="keyword">x</span>)<span class="comment">;</span></span><br><span class="line"><span class="comment">square.accept(2);</span></span><br></pre></td></tr></table></figure></p><h2 id="Optional接口"><a href="#Optional接口" class="headerlink" title="Optional接口"></a>Optional接口</h2><p>Optional本质是个容器，你可以将你的变量交由它进行封装，这样我们就不用显式对原变量进行 null值检测，防止出现各种空指针异常。举例：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public Integer getScore( Student student )&#123;</span><br><span class="line">    <span class="keyword">if</span>(student != null)&#123;</span><br><span class="line">        Subject <span class="function"><span class="keyword">sub</span> = <span class="title">student</span>.<span class="title">getSubject</span></span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="function"><span class="keyword">sub</span> != <span class="title">null</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">sub</span>.<span class="title">getScore</span></span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>多嵌套的 if 判空,这么处理当然可以，然而有更好的解决办法哦。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">Integer</span> getScore(Student student)&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(student)</span><br><span class="line">                   .<span class="built_in">map</span>(Student<span class="type">::getSubject</span>)</span><br><span class="line">                   .<span class="built_in">map</span>(Subject<span class="type">::getScore</span>)</span><br><span class="line">                   .orElse(<span class="built_in">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完美实现。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java代码优化建议</title>
      <link href="/200103-java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE.html"/>
      <url>/200103-java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>帮助开发人员夯实基础，从规范的编码操作开始，培养良好的编码习惯，助力未来技术成长。</p></blockquote><p>通过java代码规范来优化程序，优化内存使用情况，防止内存泄露</p><p>可供程序利用的资源（内存、CPU时间、网络带宽等）是有限的，优化的目的就是让程序用尽可能少的资源完成预定的任务。优化通常包含两方面的内容：减小代码的体积，提高代码的运行效率。本文讨论的主要是如何提高代码的效率。<br>在Java程序中，性能问题的大部分原因并不在于Java语言，而是在于程序本身。养成好的代码编写习惯非常重要，比如正确地、巧妙地运用java.lang.String类和java.util.Vector类，它能够显著地提高程序的性能。下面我们就来具体地分析一下这方面的问题。</p><p><strong>1、 尽量指定类的final修饰符 带有final修饰符的类是不可派生的。</strong></p><p>在Java核心API中，有许多应用final的例子，例如java.lang.String。为String类指定final防止了人们覆盖length()方法。另外，如果指定一个类为final，则该类所有的方法都是final。Java编译器会寻找机会内联（inline）所有的final方法（这和具体的编译器实现有关）。此举能够使性能平均提高50% 。</p><p><strong>2、 尽量重用对象。</strong></p><p>特别是String 对象的使用中，出现字符串连接情况时应用StringBuffer 代替。由于系统不仅要花时间生成对象，以后可能还需花时间对这些对象进行垃圾回收和处理。因此，生成过多的对象将会给程序的性能带来很大的影响。</p><p><strong>3、 尽量使用局部变量，调用方法时传递的参数以及在调用中创建的临时变量都保存在栈（Stack）中，速度较快。</strong></p><p>其他变量，如静态变量、实例变量等，都在堆（Heap）中创建，速度较慢。另外，依赖于具体的编译器/JVM，局部变量还可能得到进一步优化。请参见《尽可能使用堆栈变量》。</p><p><strong>4、 不要重复初始化变量</strong></p><p>默认情况下，调用类的构造函数时， Java会把变量初始化成确定的值：所有的对象被设置成null，整数变量（byte、short、int、long）设置成0，float和double变量设置成0.0，逻辑值设置成false。当一个类从另一个类派生时，这一点尤其应该注意，因为用new关键词创建一个对象时，构造函数链中的所有构造函数都会被自动调用。</p><p><strong>5、 在JAVA + ORACLE 的应用系统开发中，java中内嵌的SQL语句尽量使用大写的形式，以减轻ORACLE解析器的解析负担。</strong></p><p><strong>6、 Java 编程过程中，进行数据库连接、I/O流操作时务必小心，在使用完毕后，即使关闭以释放资源。</strong></p><p>因为对这些大对象的操作会造成系统大的开销，稍有不慎，会导致严重的后果。</p><p><strong>7、 由于JVM的有其自身的GC机制，不需要程序开发者的过多考虑，从一定程度上减轻了开发者负担，但同时也遗漏了隐患，过分的创建对象会消耗系统的大量内存，严重时会导致内存泄露，因此，保证过期对象的及时回收具有重要意义。</strong></p><p>JVM回收垃圾的条件是：对象不在被引用；然而，JVM的GC并非十分的机智，即使对象满足了垃圾回收的条件也不一定会被立即回收。所以，建议我们在对象使用完毕，应手动置成null。</p><p><strong>8、 在使用同步机制时，应尽量使用方法同步代替代码块同步。</strong></p><p><strong>9、 尽量减少对变量的重复计算</strong><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>;<span class="built_in">i</span> &lt; list.<span class="built_in">size</span>; <span class="built_in">i</span> ++) &#123;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br><span class="line">应替换为：</span><br><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>,int len = list.<span class="built_in">size</span>();<span class="built_in">i</span> &lt; len; <span class="built_in">i</span> ++)&#123;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>10、尽量采用lazy loading 的策略，即在需要的时候才开始创建。</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例如： </span><br><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = “aaa”;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">    list.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br><span class="line">应替换为：</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">str</span> = “aaa”;</span><br><span class="line">    list.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>11、慎用异常</strong></p><p>异常对性能不利。抛出异常首先要创建一个新的对象。Throwable接口的构造函数调用名为fillInStackTrace()的本地（Native）方法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，VM就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。 异常只能用于错误处理，不应该用来控制程序流程。</p><p><strong>12、不要在循环中使用：</strong></p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应把其放置在最外层。</p><p><strong>13、StringBuffer 的使用：</strong></p><p><code>StringBuffer</code>表示了可变的、可写的字符串。<br>有三个构造方法 :<br><code>StringBuffer ();</code> //默认分配16个字符的空间<br><code>StringBuffer (int size);</code> //分配size个字符的空间<br><code>StringBuffer (String str);</code> //分配16个字符+str.length()个字符空间<br>你可以通过StringBuffer的构造函数来设定它的初始化容量，这样可以明显地提升性能。</p><p>这里提到的构造函数是<code>StringBuffer(int length)</code>，<code>length</code>参数表示当前的<code>StringBuffer</code>能保持的字符数量。你也可以使用<code>ensureCapacity(int minimumcapacity)</code>方法在StringBuffer对象创建之后设置它的容量。首先我们看看<code>StringBuffer</code>的缺省行为，然后再找出一条更好的提升性能的途径。<br><code>StringBuffer</code>在内部维护一个字符数组，当你使用缺省的构造函数来创建<code>StringBuffer</code>对象的时候，因为没有设置初始化字符长度，<code>StringBuffer</code>的容量被初始化为16个字符，也就是说缺省容量就是16个字符。当<code>StringBuffer</code>达到最大容量的时候，它会将自身容量增加到当前的2倍再加2，也就是（2<em>旧值+2）。如果你使用缺省值，初始化之后接着往里面追加字符，在你追加到第16个字符的时候它会将容量增加到34（2</em>16+2），当追加到34个字符的时候就会将容量增加到70（2*34+2）。无论何事只要StringBuffer到达它的最大容量它就不得不创建一个新的字符数组然后重新将旧字符和新字符都拷贝一遍――这也太昂贵了点。所以总是给StringBuffer设置一个合理的初始化容量值是错不了的，这样会带来立竿见影的性能增益。StringBuffer初始化过程的调整的作用由此可见一斑。所以，使用一个合适的容量值来初始化StringBuffer永远都是一个最佳的建议。</p><p><strong>14、合理的使用Java类 java.util.Vector。</strong></p><p>简单地说，一个Vector就是一个java.lang.Object实例的数组。Vector与数组相似，它的元素可以通过整数形式的索引访问。但是，Vector类型的对象在创建之后，对象的大小能够根据元素的增加或者删除而扩展、缩小。请考虑下面这个向Vector加入元素的例子：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Object</span> bj = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line">Vector v = <span class="keyword">new</span> Vector(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123; </span><br><span class="line">    v.<span class="built_in">add</span>(<span class="number">0</span>,obj); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除非有绝对充足的理由要求每次都把新元素插入到Vector的前面，否则上面的代码对性能不利。在默认构造函数中，Vector的初始存储能力是10个元素，如果新元素加入时存储能力不足，则以后存储能力每次加倍。Vector类就对象StringBuffer类一样，每次扩展存储能力时，所有现有的元素都要复制到新的存储空间之中。下面的代码片段要比前面的例子快几个数量级：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Object</span> bj = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line">Vector v = <span class="keyword">new</span> Vector(<span class="number">100000</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123; </span><br><span class="line">    v.<span class="built_in">add</span>(obj); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样的规则也适用于Vector类的remove()方法。由于Vector中各个元素之间不能含有“空隙”，删除除最后一个元素之外的任意其他元素都导致被删除元素之后的元素向前移动。也就是说，从Vector删除最后一个元素要比删除第一个元素“开销”低好几倍。</p><p>假设要从前面的Vector删除所有元素，我们可以使用这种代码：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    v.remove(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是，与下面的代码相比，前面的代码要慢几个数量级：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(<span class="name">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 100000; i++) &#123;</span></span><br><span class="line">    v.remove(<span class="name">v</span>.size()<span class="number">-1</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从Vector类型的对象v删除所有元素的最好方法是：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.removeAllElements()<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>假设Vector类型的对象v包含字符串“Hello”。考虑下面的代码，它要从这个Vector中删除“Hello”字符串：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> s = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">int</span> i = v.indexOf(s);</span><br><span class="line"><span class="keyword">if</span>(I != <span class="number">-1</span>) v.<span class="built_in">remove</span>(s);</span><br></pre></td></tr></table></figure></p><p>这些代码看起来没什么错误，但它同样对性能不利。在这段代码中，indexOf()方法对v进行顺序搜索寻找字符串“Hello”，remove(s)方法也要进行同样的顺序搜索。改进之后的版本是：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> s = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">int</span> i = v.indexOf(s);</span><br><span class="line"><span class="keyword">if</span>(I != <span class="number">-1</span>) v.<span class="built_in">remove</span>(i);</span><br></pre></td></tr></table></figure></p><p>这个版本中我们直接在remove()方法中给出待删除元素的精确索引位置，从而避免了第二次搜索。一个更好的版本是：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"Hello"</span><span class="comment">; </span></span><br><span class="line">v.remove(s)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>最后，我们再来看一个有关Vector类的代码片段：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span>++;<span class="built_in">i</span> &lt; v.<span class="built_in">length</span>)</span><br></pre></td></tr></table></figure></p><p>如果v包含100,000个元素，这个代码片段将调用v.size()方法100,000次。虽然size方法是一个简单的方法，但它仍旧需要一次方法调用的开销，至少JVM需要为它配置以及清除堆栈环境。在这里，for循环内部的代码不会以任何方式修改Vector类型对象v的大小，因此上面的代码最好改写成下面这种形式：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">size</span> = v.<span class="built_in">size</span>(); </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> I=<span class="number">0</span>; I++;I&lt;<span class="built_in">size</span>)</span><br></pre></td></tr></table></figure></p><p>虽然这是一个简单的改动，但它仍旧赢得了性能。毕竟，每一个CPU周期都是宝贵的。</p><p><strong>15、当复制大量数据时，使用System.arraycopy()命令。</strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] src=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">System.arraycopy(src, <span class="number">0</span>, dest, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"><span class="string">src:</span>源数组; <span class="string">srcPos:</span>源数组要复制的起始位置;</span><br><span class="line"><span class="string">dest:</span>目的数组; <span class="string">destPos:</span>目的数组放置的起始位置;</span><br><span class="line"><span class="string">length:</span>复制的长度.</span><br><span class="line"></span><br><span class="line">注意：src and dest都必须是同类型或者可以进行转换类型的数组．</span><br></pre></td></tr></table></figure></p><p><strong>16、代码重构：增强代码的可读性。</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShopCart</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List carts ;</span><br><span class="line">    …</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span> (<span class="params">Object item</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(carts == <span class="literal">null</span>) &#123;</span><br><span class="line">            carts = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        &#125;</span><br><span class="line">        crts.<span class="keyword">add</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span>(<span class="params">Object item</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(carts. contains(item)) &#123;</span><br><span class="line">            carts.<span class="keyword">remove</span>(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getCarts</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//返回只读列表</span></span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(carts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不推荐这种方式</span></span><br><span class="line">    <span class="comment">//this.getCarts().add(item);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>17、不用new关键词创建类的实例</strong></p><p>用new关键词创建类的实例时，构造函数链中的所有构造函数都会被自动调用。但如果一个对象实现了Cloneable接口，我们可以调用它的clone()方法。clone()方法不会调用任何类构造函数。<br>在使用设计模式（Design Pattern）的场合，如果用Factory模式创建对象，则改用clone()方法创建新的对象实例非常简单。例如，下面是Factory模式的一个典型实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Credit <span class="title">getNewCredit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Credit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改进后的代码使用clone()方法，如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Credit BaseCredit = <span class="keyword">new</span> Credit();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Credit <span class="title">getNewCredit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Credit) BaseCredit.clone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的思路对于数组处理同样很有用。</p><p><strong>18、乘法和除法</strong></p><p>考虑下面的代码：<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">val</span> = <span class="number">0</span>; <span class="keyword">val</span> &lt; <span class="number">100000</span>; <span class="keyword">val</span> +=<span class="number">5</span>) &#123;</span><br><span class="line">    alterX = <span class="keyword">val</span> * <span class="number">8</span>; myResult = <span class="keyword">val</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用移位操作替代乘法操作可以极大地提高性能。下面是修改后的代码：<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">val</span> = <span class="number">0</span>; <span class="keyword">val</span> &lt; <span class="number">100000</span>; <span class="keyword">val</span> += <span class="number">5</span>) &#123;</span><br><span class="line">    alterX = <span class="keyword">val</span> &lt;&lt; <span class="number">3</span>; myResult = <span class="keyword">val</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改后的代码不再做乘以8的操作，而是改用等价的左移3位操作，每左移1位相当于乘以2。相应地，右移1位操作相当于除以2。值得一提的是，虽然移位操作速度快，但可能使代码比较难于理解，所以最好加上一些注释。</p><p><strong>19、在JSP页面中关闭无用的会话。</strong></p><p>一个常见的误解是以为session在有客户端访问时就被创建，然而事实是直到某server端程序调用HttpServletRequest.getSession(true)这样的语句时才被创建，注意如果JSP没有显示的使用 &lt;&gt; 关闭session，则JSP文件在编译成Servlet时将会自动加上这样一条语句HttpSession session = HttpServletRequest.getSession(true);这也是JSP中隐含的session对象的来历。由于session会消耗内存资源，因此，如果不打算使用session，应该在所有的JSP中关闭它。<br>对于那些无需跟踪会话状态的页面，关闭自动创建的会话可以节省一些资源。使用如下page指令：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@<span class="built_in"> page </span><span class="attribute">session</span>=<span class="string">"false"</span>%&gt;</span><br></pre></td></tr></table></figure></p><p><strong>20、JDBC与I/O</strong></p><p>如果应用程序需要访问一个规模很大的数据集，则应当考虑使用块提取方式。默认情况下，JDBC每次提取32行数据。举例来说，假设我们要遍历一个5000行的记录集，JDBC必须调用数据库157次才能提取到全部数据。如果把块大小改成512，则调用数据库的次数将减少到10次。</p><p><strong>21、Servlet与内存使用</strong></p><p>许多开发者随意地把大量信息保存到用户会话之中。一些时候，保存在会话中的对象没有及时地被垃圾回收机制回收。从性能上看，典型的症状是用户感到系统周期性地变慢，却又不能把原因归于任何一个具体的组件。如果监视JVM的堆空间，它的表现是内存占用不正常地大起大落。<br>解决这类内存问题主要有二种办法。第一种办法是，在所有作用范围为会话的Bean中实现HttpSessionBindingListener接口。这样，只要实现valueUnbound()方法，就可以显式地释放Bean使用的资源。</p><p>另外一种办法就是尽快地把会话作废。大多数应用服务器都有设置会话作废间隔时间的选项。另外，也可以用编程的方式调用会话的setMaxInactiveInterval()方法，该方法用来设定在作废会话之前，Servlet容器允许的客户请求的最大间隔时间，以秒计。</p><p><strong>22、使用缓冲标记</strong></p><p>一些应用服务器加入了面向JSP的缓冲标记功能。例如，BEA的WebLogic Server从6.0版本开始支持这个功能，Open Symphony工程也同样支持这个功能。JSP缓冲标记既能够缓冲页面片断，也能够缓冲整个页面。当JSP页面执行时，如果目标片断已经在缓冲之中，则生成该片断的代码就不用再执行。页面级缓冲捕获对指定URL的请求，并缓冲整个结果页面。对于购物篮、目录以及门户网站的主页来说，这个功能极其有用。对于这类应用，页面级缓冲能够保存页面执行的结果，供后继请求使用。</p><p><strong>23、选择合适的引用机制</strong></p><p>在典型的JSP应用系统中，页头、页脚部分往往被抽取出来，然后根据需要引入页头、页脚。当前，在JSP页面中引入外部资源的方法主要有两种：include指令，以及include动作。<br>include指令：例如&lt;%@ include file=”copyright.html” %&gt;。该指令在编译时引入指定的资源。在编译之前，带有include指令的页面和指定的资源被合并成一个文件。被引用的外部资源在编译时就确定，比运行时才确定资源更高效。<br>include动作：例如<br><code>&lt;jsp:include page=&quot;copyright.jsp&quot; /&gt;</code>。该动作引入指定页面执行后生成的结果。由于它在运行时完成，因此对输出结果的控制更加灵活。但时，只有当被引用的内容频繁地改变时，或者在对主页面的请求没有出现之前，被引用的页面无法确定时，使用include动作才合算。</p><p><strong>24、及时清除不再需要的会话</strong></p><p>为了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更多会话时，如果内存容量不足，操作系统会把部分内存数据转移到磁盘，应用服务器也可能根据“最近最频繁使用”（Most Recently Used）算法把部分不活跃的会话转储到磁盘，甚至可能抛出“内存不足”异常。在大规模系统中，串行化会话的代价是很昂贵的。当会话不再需要时，应当及时调用HttpSession.invalidate()方法清除会话。HttpSession.invalidate()方法通常可以在应用的退出页面调用。</p><p><strong>25、不要将数组声明为：public static final 。</strong></p><p><strong>26、HashMap的遍历效率讨论</strong></p><p>经常遇到对HashMap中的key和value值对的遍历操作，有如下两种方法：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt; paraMap = <span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt;();</span><br><span class="line"><span class="comment">//第一个循环</span></span><br><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; appFieldDefIds = paraMap.keySet();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">String</span> appFieldDefId : appFieldDefIds) &#123;</span><br><span class="line">    <span class="built_in">String</span>[] values = paraMap.<span class="keyword">get</span>(appFieldDefId);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个循环</span></span><br><span class="line"><span class="keyword">for</span>(Entry&lt;<span class="built_in">String</span>, <span class="built_in">String</span>[]&gt; entry : paraMap.entrySet())&#123;</span><br><span class="line">    <span class="built_in">String</span> appFieldDefId = entry.getKey();</span><br><span class="line">    <span class="built_in">String</span>[] values = entry.getValue();</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一种实现明显的效率不如第二种实现。<br>分析如下 <code>Set&lt;String&gt; appFieldDefIds = paraMap.keySet();</code> 是先从HashMap中取得keySet<br>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    <span class="keyword">return</span> (ks != <span class="keyword">null</span> ? ks : (keySet = <span class="keyword">new</span> KeySet()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newKeyIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> containsKey(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HashMap.<span class="keyword">this</span>.removeEntryForKey(o) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实就是返回一个私有类KeySet, 它是从AbstractSet继承而来，实现了Set接口。</p><p>再来看看for/in循环的语法<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(declaration : expression)</span></span></span><br><span class="line">statement</span><br></pre></td></tr></table></figure></p><p>在执行阶段被翻译成如下各式<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(<span class="name">Iterator&lt;E&gt;</span> #i = (<span class="name">expression</span>).iterator()<span class="comment">; #i.hashNext();)&#123;</span></span><br><span class="line">    declaration = #i.next()<span class="comment">;</span></span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因此在第一个for语句<code>for (String appFieldDefId : appFieldDefIds)</code>中调用了<code>HashMap.keySet().iterator()</code></p><p>而这个方法调用了<code>newKeyIterator()</code><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Iterator</span>&lt;<span class="type">K</span>&gt; newKeyIterator() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">KeyIterator</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator&lt;K&gt;</span> </span>&#123;</span><br><span class="line">    public <span class="type">K</span> next() &#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry().getKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以在for中还是调用了<br>在第二个循环for(Entry&lt;String, String[]&gt; entry : paraMap.entrySet())中使用的Iterator是如下的一个内部类<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator&lt;Map</span>.<span class="title">Entry&lt;K</span>,<span class="title">V&gt;&gt;</span> </span>&#123;</span><br><span class="line">    public <span class="type">Map</span>.<span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; next() &#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时第一个循环得到key，第二个循环得到HashMap的Entry效率就是从循环里面体现出来的第二个循环此致可以直接取key和value值而第一个循环还是得再利用HashMap的get(Object key)来取value值现在看看HashMap的get(Object key)方法<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">    <span class="keyword">Object</span> k = maskNull(<span class="built_in">key</span>);</span><br><span class="line">    <span class="built_in">int</span> hash = hash(k);</span><br><span class="line">    <span class="built_in">int</span> i = indexFor(hash, table.length); <span class="comment">//Entry[] table</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; eq(k, e.<span class="built_in">key</span>))</span><br><span class="line">            <span class="keyword">return</span> e.value;</span><br><span class="line">        e = e.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实就是再次利用Hash值取出相应的Entry做比较得到结果，所以使用第一中循环相当于两次进入HashMap的Entry</p><p>中而第二个循环取得Entry的值之后直接取key和value，效率比第一个循环高。其实按照Map的概念来看也应该是用第二个循环好一点，它本来就是key和value的值对，将key和value分开操作在这里不是个好选择。</p><p><strong>27、array(数组) 和 ArryList的使用</strong></p><p>array（[]）：最高效；但是其容量固定且无法动态改变；<br>ArrayList：容量可动态增长；但牺牲效率；<br>基于效率和类型检验，应尽可能使用array，无法确定数组大小时才使用ArrayList！<br>ArrayList是Array的复杂版本<br>ArrayList内部封装了一个Object类型的数组，从一般的意义来说，它和数组没有本质的差别，甚至于ArrayList的许多方法，如Index、IndexOf、Contains、Sort等都是在内部数组的基础上直接调用Array的对应方法。<br>ArrayList存入对象时，抛弃类型信息，所有对象屏蔽为Object，编译时不检查类型，但是运行时会报错。<br>注：jdk5中加入了对泛型的支持，已经可以在使用ArrayList时进行类型检查。<br>从这一点上看来，ArrayList与数组的区别主要就是由于动态增容的效率问题了</p><p><strong>28、尽量使用HashMap 和ArrayList ,除非必要，否则不推荐使用HashTable和Vector ，后者由于使用同步机制，而导致了性能的开销。</strong></p><p><strong>29、StringBuffer 和StringBuilder的区别：</strong></p><p>java.lang.StringBuffer线程安全的可变字符序列。一个类似于 String 的字符串缓冲区，但不能修改。</p><p>StringBuilder。与该类相比，通常应该优先使用 java.lang.StringBuilder类，因为它支持所有相同的操作，但由于它不执行同步，所以速度更快。为了获得更好的性能，在构造 StirngBuffer 或 StirngBuilder 时应尽可能指定它的容量。当然，如果你操作的字符串长度不超过 16 个字符就不用了。 相同情况下使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%-15% 左右的性能提升，但却要冒多线程不安全的风险。而在现实的模块化编程中，负责某一模块的程序员不一定能清晰地判断该模块是否会放入多线程的环境中运行，因此：除非你能确定你的系统的瓶颈是在 StringBuffer 上，并且确定你的模块不会运行在多线程模式下，否则还是用 StringBuffer 吧。</p><p><strong>30、尽量避免使用split</strong></p><p>除非是必须的，否则应该避免使用split，split由于支持正则表达式，所以效率比较低，如果是频繁的几十，几百万的调用将会耗费大量资源，如果确实需要频繁的调用split，可以考虑使用apache的 StringUtils.split(string,char)，频繁split的可以缓存结果。</p><p>其他补充:</p><p>1、及时清除不再使用的对象，设为null<br>2、尽可能使用final,static等关键字<br>3、尽可能使用buffered对象</p><p>如何优化代码使JAVA源文件及编译后CLASS文件更小</p><p>1 尽量使用继承，继承的方法越多，你要写的代码量也就越少</p><p>2 打开JAVA编译器的优化选项： javac -O 这个选项将删除掉CLASS文件中的行号，并能把<br>一些private, static,final的小段方法申明为inline方法调用</p><p>3 把公用的代码提取出来</p><p>4 不要初始化很大的数组，尽管初始化一个数组在JAVA代码中只是一行的代码量，但<br>编译后的代码是一行代码插入一个数组的元素，所以如果你有大量的数据需要存在数组<br>中的话，可以先把这些数据放在String中，然后在运行期把字符串解析到数组中</p><p>5 日期类型的对象会占用很大的空间，如果你要存储大量的日期对象，可以考虑把它存储为<br>long型，然后在使用的时候转换为Date类型</p><p>6 类名，方法名和变量名尽量使用简短的名字，可以考虑使用Hashjava, Jobe, Obfuscate and Jshrink等工具自动完成这个工作</p><p>7 将static final类型的变量定义到Interface中去</p><p>8 算术运算 能用左移/右移的运算就不要用*和/运算，相同的运算不要运算多次</p><p>2、不要两次初始化变量<br>Java通过调用独特的类构造器默认地初始化变量为一个已知的值。所有的对象被设置成null，integers (byte, short, int, long)被设置成0，float和double设置成0.0，Boolean变量设置成false。这对那些扩展自其它类的类尤其重要，这跟使用一个新的关键词创建一个对象时所有一连串的构造器被自动调用一样。</p><p>3、在任何可能的地方让类为Final<br>标记为final的类不能被扩展。在《核心Java API》中有大量这个技术的例子，诸如java.lang.String。将String类标记为final阻止了开发者创建他们自己实现的长度方法。<br>更深入点说，如果类是final的，所有类的方法也是final的。Java编译器可能会内联所有的方法（这依赖于编译器的实现）。在我的测试里，我已经看到性能平均增加了50%。</p><p>3、异常在需要抛出的地方抛出，try catch能整合就整合<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    some.method1(); <span class="comment">// Difficult for javac</span></span><br><span class="line">&#125; <span class="keyword">catch</span>( method1Exception e ) &#123; <span class="comment">// and the JVM runtime</span></span><br><span class="line">    <span class="comment">// Handle exception 1 // to optimize this</span></span><br><span class="line">&#125; <span class="comment">// code</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    some.method2();</span><br><span class="line">&#125; <span class="keyword">catch</span>( method2Exception e ) &#123;</span><br><span class="line">    <span class="comment">// Handle exception 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    some.method3();</span><br><span class="line">&#125; <span class="keyword">catch</span>( method3Exception e ) &#123;</span><br><span class="line">    <span class="comment">// Handle exception 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>已下代码 更容易被编译器优化<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    some.method<span class="number">1</span><span class="comment">()</span>; <span class="comment">// Easier to optimize</span></span><br><span class="line">    some.method<span class="number">2</span><span class="comment">()</span>;</span><br><span class="line">    some.method<span class="number">3</span><span class="comment">()</span>;</span><br><span class="line">&#125; catch<span class="comment">( method1Exception e )</span> &#123;</span><br><span class="line">    <span class="comment">// Handle exception 1</span></span><br><span class="line">&#125; catch<span class="comment">( method2Exception e )</span> &#123;</span><br><span class="line">    <span class="comment">// Handle exception 2</span></span><br><span class="line">&#125; catch<span class="comment">( method3Exception e )</span> &#123;</span><br><span class="line">    <span class="comment">// Handle exception 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、For循环的优化</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Replace…</span><br><span class="line"><span class="keyword">for</span>( int <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; collection.<span class="built_in">size</span>(); <span class="built_in">i</span>++ ) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">with…</span><br><span class="line"><span class="keyword">for</span>( int <span class="built_in">i</span> = <span class="number">0</span>, n = collection.<span class="built_in">size</span>(); <span class="built_in">i</span> &lt; n; <span class="built_in">i</span>++ ) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、 在JAVA + ORACLE 的应用系统开发中，java中内嵌的SQL语句尽量使用大写的形式，以减轻ORACLE解析器的解析负担。</p><p>6、尽量采用lazy loading 的策略，即在需要的时候才开始创建。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例如： <span class="keyword">String</span> <span class="built_in">str</span> = “aaa”;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">    list.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br><span class="line">应替换为：</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">str</span> = “aaa”;</span><br><span class="line">    list.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7、不要在循环中使用：<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>应把其放置在最外层</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-Thymeleaf模版引擎</title>
      <link href="/180718-Thymeleaf%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E.html"/>
      <url>/180718-Thymeleaf%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E.html</url>
      
        <content type="html"><![CDATA[<p>上一节我们简单的认识了 Thymeleaf，并简单介绍了它与 Spring Boot 的结合，这一节来具体的看一下，Thymeleaf 是的语法和应用。</p><h2 id="创建模版文件"><a href="#创建模版文件" class="headerlink" title="创建模版文件"></a>创建模版文件</h2><p>创建文件其实在上节中已经说过，这边在重复一遍，新建 <code>HTML</code> 文件，在头文件中添加 <code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong>html 中的标签必须严格规范，标签必须闭合，即<code>&lt;div /&gt;</code>技术或者<code>&lt;/div&gt;</code>类似结束。</p><h2 id="表达式语法"><a href="#表达式语法" class="headerlink" title="表达式语法"></a>表达式语法</h2><p>它们分为四类：</p><ul><li>1.变量表达式</li><li>2.选择或星号表达式</li><li>3.通用 Message 表达式</li><li>4.URL表达式</li></ul><h3 id="变量表达式"><a href="#变量表达式" class="headerlink" title="变量表达式"></a>变量表达式</h3><p>ongl标准语法或者 Spring EL 表达式 <code>${user.userName}</code>，它们将以 html 标签的一个属性来表示</p><h3 id="选择或星号表达式"><a href="#选择或星号表达式" class="headerlink" title="选择或星号表达式"></a>选择或星号表达式</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*</span></span></span><span class="template-variable">&#123;firstName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*</span></span></span><span class="template-variable">&#123;lastName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">*</span></span></span><span class="template-variable">&#123;nationality&#125;</span><span class="xml"><span class="tag">"&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">等价于</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.firstName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.lastName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.nationality&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">当然了，这两者可以混合使用</span></span><br><span class="line"><span class="xml">还有一种方式</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*</span></span></span><span class="template-variable">&#123;user.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*</span></span></span><span class="template-variable">&#123;user.surname&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*</span></span></span><span class="template-variable">&#123;user.nationality&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="通用-Message-表达式"><a href="#通用-Message-表达式" class="headerlink" title="通用 Message 表达式"></a>通用 Message 表达式</h3><p>通用表达式允许我们从外部的配置文件（properties）中取值，用 Key，Value的形式。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#&#123;main.title&#125;  </span></span><br><span class="line"><span class="meta">#&#123;message.entrycreated($&#123;entryId&#125;)&#125;</span></span><br></pre></td></tr></table></figure></p><p>可以在模板文件中找到这样的表达式代码：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;header.address.city&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;header.address.country&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h3 id="URL表达式"><a href="#URL表达式" class="headerlink" title="URL表达式"></a>URL表达式</h3><p>URL表达式指的是把一个有用的上下文或回话信息添加到URL，这个过程经常被叫做URL重写。<br> <code>@{/order/list}</code><br>URL还可以设置参数：<br> <code>@{/order/details(id=${orderId})}</code><br>相对路径：<br> <code>@{../documents/report}</code></p><h2 id="表达式支持的语法"><a href="#表达式支持的语法" class="headerlink" title="表达式支持的语法"></a>表达式支持的语法</h2><p><strong>字面（Literals）</strong></p><ul><li>文本文字（Text literals）: ‘one text’, ‘Another one!’,…</li><li>数字文本（Number literals）: 0, 34, 3.0, 12.3,…</li><li>布尔文本（Boolean literals）: true, false</li><li>空（Null literal）: null</li><li>文字标记（Literal tokens）: one, sometext, main,…</li></ul><p><strong>文本操作（Text operations）</strong></p><ul><li>字符串连接(String concatenation): +</li><li>文本替换（Literal substitutions）: |The name is ${name}|</li></ul><p><strong>算术运算（Arithmetic operations）</strong></p><ul><li>二元运算符（Binary operators）: +, -, *, /, %</li><li>减号（单目运算符）Minus sign (unary operator): -</li></ul><p><strong>布尔操作（Boolean operations）</strong></p><ul><li>二元运算符（Binary operators）:and, or</li><li>布尔否定（一元运算符）Boolean negation (unary operator):!, not</li></ul><p><strong>比较和等价(Comparisons and equality)</strong></p><ul><li>比较（Comparators）: &gt;, &lt;, &gt;=, &lt;= (gt, lt, ge, le)</li><li>等值运算符（Equality operators）:==, != (eq, ne)</li></ul><p><strong>条件运算符（Conditional operators）</strong></p><ul><li>If-then: (if) ? (then)</li><li>If-then-else: (if) ? (then) : (else)</li><li>Default: (value) ?: (defaultvalue)</li></ul><h2 id="th-标签"><a href="#th-标签" class="headerlink" title="th 标签"></a>th 标签</h2><p>参考 thymeleaf 官方文档：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.pdf" target="_blank" rel="noopener">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.pdf</a></p><h2 id="常用的使用方法"><a href="#常用的使用方法" class="headerlink" title="常用的使用方法"></a>常用的使用方法</h2><h2 id="相关参考和链接"><a href="#相关参考和链接" class="headerlink" title="相关参考和链接"></a>相关参考和链接</h2><p>Thymeleaf 模板的使用：<a href="http://www.cnblogs.com/lazio10000/p/5603955.html" target="_blank" rel="noopener">http://www.cnblogs.com/lazio10000/p/5603955.html</a></p><p>新一代Java模板引擎Thymeleaf：<a href="https://www.tianmaying.com/tutorial/using-thymeleaf" target="_blank" rel="noopener">https://www.tianmaying.com/tutorial/using-thymeleaf</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-单元测试及Thymeleaf模版</title>
      <link href="/180716-SpringBoot-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8AThymeleaf%E6%A8%A1%E7%89%88.html"/>
      <url>/180716-SpringBoot-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%8F%8AThymeleaf%E6%A8%A1%E7%89%88.html</url>
      
        <content type="html"><![CDATA[<p>上一节中我们已经做了一个简单的 Hello world！应用，这一节我们来学习 Spring Boot 的 web 开发。以前做过 web 的童鞋都知道，一个 web 应用最常用的就是 MVC 的模式 jsp(视图层)，Servlet(控制层)，Dao(数据持久层)，另外还会用到 单元测试，Json，Filte，Property，Log，数据库操作，热部署等一些相关的技术。这节我们就来看看在 Spring Boot 中是如何使用这些技术的。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>我们来为上节中的 hello world！应用进行单元测试。Spring Boot 的单元测试推荐使用 <code>mockmvc</code> 来进行，好处是不用启动服务即可进行测试。首先添加 test 的 maven 依赖, test 的依赖默认是存在的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>src/test/</code> 下面新建包 controller ，然后新建类 HelloTest.java。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloController()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"hello world!"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试方法。</p><h2 id="Jsp-Or-Thymeleaf"><a href="#Jsp-Or-Thymeleaf" class="headerlink" title="Jsp Or Thymeleaf"></a>Jsp Or Thymeleaf</h2><p>Spring Boot 推荐使用 Thymeleaf 来代替 Jsp，那么我们先来认识一下 Thymeleaf 是个什么东东</p><h3 id="Thymeleaf-是个什么？"><a href="#Thymeleaf-是个什么？" class="headerlink" title="Thymeleaf 是个什么？"></a>Thymeleaf 是个什么？</h3><p>Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：</p><ul><li>Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li>Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li>Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li></ul><h3 id="如何应用"><a href="#如何应用" class="headerlink" title="如何应用"></a>如何应用</h3><p> 同样的首先添加 Thymeleaf 的 maven 组件依赖，这就是 Spring Boot 的优点，把所有优秀的组件都集成进来，使用时仅仅添加依赖就可以了。<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> <code>spring-boot-starter-thymeleaf</code> 组件中已经包含了 web 的组件，也可以将 <code>spring-boot-starter-web</code> 依赖删除。</p><p> 然后在 <code>resources/templates/</code> 下新建 <code>hello.html</code> <strong>注意</strong>添加头文件 <code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code><br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改 <code>HelloController</code> 与 <code>hello.html</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String hello(Model model,</span><br><span class="line">            <span class="meta">@RequestParam(value=<span class="meta-string">"name"</span>, required=false, defaultValue=<span class="meta-string">"World"</span>)</span> String name)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Boot<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Hello, ' + $</span></span></span><span class="template-variable">&#123;name&#125;</span><span class="xml"><span class="tag"><span class="string"> + '!'"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>启动服务，访问 <code>http://localhost:8080/hello?name=Shure</code><br><img src="/images/20180716/20180716184202.png" alt="hello shure"></p><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>纯洁的微笑博客：<a href="http://www.ityouknow.com/springboot/2016/01/06/spring-boot-quick-start.html" target="_blank" rel="noopener">http://www.ityouknow.com/springboot/2016/01/06/spring-boot-quick-start.html</a></p><p>thymeleaf参考手册 by CSDN：<a href="https://blog.csdn.net/zrk1000/article/details/72667478" target="_blank" rel="noopener">https://blog.csdn.net/zrk1000/article/details/72667478</a></p><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-helloWorld" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-helloWorld</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给“抽奖助手”的一点点建议</title>
      <link href="/180717-%E7%BB%99%E6%8A%BD%E5%A5%96%E5%8A%A9%E6%89%8B%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E5%BB%BA%E8%AE%AE.html"/>
      <url>/180717-%E7%BB%99%E6%8A%BD%E5%A5%96%E5%8A%A9%E6%89%8B%E7%9A%84%E4%B8%80%E7%82%B9%E7%82%B9%E5%BB%BA%E8%AE%AE.html</url>
      
        <content type="html"><![CDATA[<p>“抽奖助手”是无码科技做的一款小程序，如果你不知道无码科技，冯大辉你一定听说过吧，“抽奖助手”就是他家的产品，当然如果你听说过冯大辉那么你一定知道他的言论是有多么的犀利，尤其是对互联网产品，吐槽起来一针见血见解独到，好多公司都不敢让他来测评自家的产品，怕被爆出很多问题来，今天我也要给他家的产品“抽奖助手”提一点建议。</p><p>之前在冯大的公众号上看过一篇关于推荐系统和用户画像的文章，标题是什么我忘了，我觉得那篇文章写的很好，也是收益与那篇文章的启发，提出这点建议。</p><p>首先要感谢“抽奖助手”昨天我中奖了，很激动，我参与抽奖460多次，这是第一次中奖，然而我仔细一看中奖的内容却是“婴儿屁屁湿巾”，我激动的心情一下就没了，我一个还没结婚的人，让我中这么个奖，你说让我领呢还是不领呢？</p><p>所以我的建议是，通过用户画像分析出参与抽奖用户的基本情况，筛选出一些真正有需要该奖品的用户，让其中奖，这样让中奖者不再有心理上的落差。比如说，我是一个程序员，肯定对电子产品有浓厚的兴趣，如果奖品是个机械键盘什么的，可以优先让像我这样有兴趣的一类用户中奖，而不是在家带孩子的宝妈；再比如，奖品是婴儿用品，通过对参与抽奖的用户的分析，优先让拥有宝妈、已婚、刚结婚等属性的用户中奖，而不是像我这样还没结婚的用户，这样是不是更接近完美了呢。</p><p>可能有人会反驳了，你看到婴儿用品可以不参与啊，为什么你不想要，还要参与抽奖呢？其实，在“抽奖助手”里有很多人是不看奖品是什么的，直接划到最后点击“参与抽奖”，要知道一个奖项参与的用户好几十万，如果设定只有一人中奖，那么中奖的概率几十万分之一，很多人已经不报有中奖的希望，只是重在参与而已。所以这种反驳个人认为已经可以排除在外了。</p><p>也许这就是作为一个程序员对产品的一点点思考吧，下面推荐一个抽奖，扫码参与，或许会中奖哦！</p><p><img src="/images/20180717/20180717154849.jpg" alt="抽奖啦"></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-入坑SpringBoot</title>
      <link href="/180710-%E5%85%A5%E5%9D%91SpringBoot.html"/>
      <url>/180710-%E5%85%A5%E5%9D%91SpringBoot.html</url>
      
        <content type="html"><![CDATA[<p>做 Java 开发的小伙伴无人不知，无人不晓的 Spring ，一个叫做春的框架。以前的我们对 Spring 是既爱又恨，为什么呢，爱是因为它的便捷，恨是因为它的繁琐（这本来就是一个矛盾），后来 Spring Boot 诞生了，妈妈再也不用担心人们会恨它了。</p><h2 id="什么是-Spring-Boot"><a href="#什么是-Spring-Boot" class="headerlink" title="什么是 Spring Boot"></a>什么是 Spring Boot</h2><p>Spring Boot 是一个全新的框架，准确的说它不算是一个框架，它集成了所有常用框架，通过特定的方式配置，简化了基于 Spring 的应用开发,通过少量的代码就能创建一个独立的、产品级別的 Spring 应用，可以说它是一个框架的集合。</p><h2 id="Spring-Boot-的优点"><a href="#Spring-Boot-的优点" class="headerlink" title="Spring Boot 的优点"></a>Spring Boot 的优点</h2><p>想想我们在使用 SpringMVC 的时候，搭建一个项目要写（web.xml，applicationContext.xml，dispatcher-servlet.xml等等等）这么多的 xml 配置文件，要有数据库连接配置，spring 事务配置，日志文件配置等一大堆配置后部署到 tomcat 运行，而且如果是一个简单的应用程序，例如发送一份邮件，也需要编写这么多的配置。</p><p>然而用 Spring Boot 就很简单了，几个简单的配置就能搭建出一套 web 服务或者微服务，Spring Boot 非常易于微服务的开发和 RESTful 接口开发。它的一大优点是提高开发者的生产力，因为它已经提供了许多通用的功能，很容易进行装配及使用。</p><h2 id="创建第一个-Spring-Boot-应用"><a href="#创建第一个-Spring-Boot-应用" class="headerlink" title="创建第一个 Spring Boot 应用"></a>创建第一个 Spring Boot 应用</h2><p>Spring Boot 能够无缝地为基于Maven和Gradle的项目提供各种构建工具，接下来我们就用 Maven 构建第一个应用。<br>打开 <a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a></p><p><img src="/images/20180710/20180710184559.png" alt="第一个应用"></p><p>选择 Maven Project 使用 Java 语言，然后填写应用的基本信息，点击 <code>Generate Project</code> 就会下载下来，解压之后导入你的 IDE ,初始化的项目就长这个样子</p><p><img src="/images/20180710/20180710185606.png" alt="初始项目目录"></p><p>然后引入 web 模块，编写 pom.xml, 添加包依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml 文件中默认的有两个模块<br><code>spring-boot-starter</code> ：核心模块，包括自动配置支持、日志和YAML；<br><code>spring-boot-starter-test</code> ：测试模块，包括JUnit、Hamcrest、Mockito。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>新建 controller 包，新建 HelloController 类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String hello()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RestController</code> 的意思就是controller里面的方法都以json格式输出，不用再写什么jackjson配置的了！</p><p>启动应用程序，在后台会看到 Spring 的字样说明已经启动成功，打开浏览器地址栏输入 localhost:8080 ，出现 hello world! ，这样我们的第一个 Spring Boot 应用程序就好了。</p><p><img src="/images/20180710/20180711111926.png" alt="hello world"></p><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>Spring Boot 官网：<a href="http://spring.io/projects/spring-boot" target="_blank" rel="noopener">http://spring.io/projects/spring-boot</a></p><p>纯洁的微笑博客：<a href="http://www.ityouknow.com/spring-boot.html" target="_blank" rel="noopener">http://www.ityouknow.com/spring-boot.html</a></p><p>示例代码：<a href="https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-helloWorld" target="_blank" rel="noopener">https://github.com/dddreams/learn-spring-boot/tree/master/spring-boot-helloWorld</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于个人隐私泄露，你怎么看？</title>
      <link href="/180331-%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E9%9A%90%E7%A7%81%E6%B3%84%E9%9C%B2%EF%BC%8C%E4%BD%A0%E6%80%8E%E4%B9%88%E7%9C%8B%EF%BC%9F.html"/>
      <url>/180331-%E5%85%B3%E4%BA%8E%E4%B8%AA%E4%BA%BA%E9%9A%90%E7%A7%81%E6%B3%84%E9%9C%B2%EF%BC%8C%E4%BD%A0%E6%80%8E%E4%B9%88%E7%9C%8B%EF%BC%9F.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们的个人隐私数据是怎么泄露的？</p></blockquote><p>去年的时候公司加入了一项健康指标考核，各团队在企业咕咚里创建了运动团队，以每个月走的步数考核员工健康，我们团队制定了每月 20 万步的指标，规定一出大家都想方设法的刷步数，有的用手摇，有的抖腿，还有的直接买了刷步神器。而在前几天咕咚突然要收费了，而且费用还不少，公司不愿花钱，所以找可以替代的应用，听同事们说有一款叫做「钉钉」的企业应用，用的人挺多，于是就下载注册体验一下，注册之后，提示获取各种权限，地理位置，消息推送通知，网络，还有通讯录，我一贯的做法是除了网络，其他都不允许，但是进入应用之后发现已经有两位朋友了，而且还是我的手机通讯录的朋友，这让我挺纳闷的，仔细一想，应该是朋友注册的时候允许通讯录的权限了，一下子对这个应用好感全无；大概浏览了几页，真不愧是跟某宝出自一家啊，上面应有尽有，你所想不到的都做上去了，然而就是没有运动计步的。</p><p>小的时候，大人们总爱看孩子的隐私，撬你上了锁的日记本，偷看你的手机短信，聊天记录，我们感觉很气愤。大人们却不这么想，“你有什么不能让我看的，不能看就是有鬼！”，我们盼望这长大，长大后就可以保护我们的隐私和心事了。</p><p>然而长大后，在这个网络时代，我们近似于裸奔。你在网上点到了贷款的广告，接下来的几天里就接到数个贷款推销的电话；你下载了一个拍照 APP ，发现它索要联系人权限，你拒绝了，然后这个 APP 就不能用了；你在某宝软件上想看一下去年的消费情况，结果发现自己不知不觉又把权限开放出去了。</p><p>前几天李彦宏在中国发展高层论坛的一次对话中说“中国人对隐私问题的态度更加开放，相对来说也没有那么敏感。如果可以用隐私换取利益、安全、或者效率，在很多情况下他们是愿意这么做的”。这段话迅速上了各大媒体的新闻标题，并遭到了网民的炮轰。然而事件过后细想时，发现李彦宏只不过是说了句大实话而已，现在的国人不就是这样吗？朋友圈里每天领优惠券，领红包的广告没少见吧，但是打开都会让你注册或者填写手机号码领取，又有多少人放弃了领红包的想法而拒绝填写自己的手机号呢？</p><p>再前几天 Facebook 数据泄露，股价暴跌，6个交易日市值缩掉了一个百度。如果这件事发生在中国，那都不算事，谁在乎那些数据呢？</p><p>我们的个人数据是怎么泄露的，是我们为了领几块钱的红包拱手相让的，还是那些流氓企业在无声无息中偷偷获取的。互联网时代，我们都忙着抢红包薅羊毛了；下一个时代，人工智能时代，隐私对我们来说还是那么无所谓么？</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎入坑小程序</title>
      <link href="/180326-%E6%AC%A2%E8%BF%8E%E5%85%A5%E5%9D%91%E5%B0%8F%E7%A8%8B%E5%BA%8F.html"/>
      <url>/180326-%E6%AC%A2%E8%BF%8E%E5%85%A5%E5%9D%91%E5%B0%8F%E7%A8%8B%E5%BA%8F.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>小马哥家的微信，微信家的小程序，来吧欢迎入坑小程序</p></blockquote><p>今天的公众号圈里各大佬都在推荐一门课程「9小时搞定微信小程序开发」，于是乎我也入坑了小程序，这样显得跟大佬们一样肩并肩了，哈哈 </p><p>关于小程序就不在介绍什么了，今年年初的「跳一跳」相信大家都玩的不亦乐乎，很显然小程序已经走上了一个新的舞台。昨天在深圳举办的第 10 届2018中国 IT 领袖峰会上，小马哥说了 “小程序已经成为中国编程者一个非常热门的编程环境和正在热情学习的语言环境” ，所以说小程序是一个趋势。</p><p>为什么说小程序是一个趋势呢，首先它基于微信，可以通过微信的关系链上流动获客；其次它无需安装，打开只需要用微信扫一扫即可，你再也不用担心你的 iphone 的存储空间不够了；第三它简单实用，不像现在的某宝，打开之后你还能认识它最开始是一个用来的支付的 APP 么，其实更多的用户安装 APP 只是使用它特定的一两个功能，其他的可要可不要，而小程序恰恰做到了这一点，简单独有的功能，这就够了。</p><p>前些日子，九大厂商「小米、华为、中兴、金立、联想、魅族、努比亚、oppo、vivo」联合推出了一个叫做「快应用」的项目，其实说白了，就是桌面快捷方式，无需安装，直接可以再桌面打开，类似于微信小程序，实现方式也类似与 React Native，Weex 之类的，性能介于 Web 和原生之间。看吧，小程序已经对一些厂商产生了威胁，要知道国内的手机厂商在手机上根本不赚钱，而赚钱的是广告和预装 app ，这就是为什么刚买的新手机上预装了那么多 app 的原因。而有了小程序，装一个微信就够了，谁还愿意花重金在手机上预装 app 啊，所以九大厂商也意识到了情势的严峻搞了个「快应用」出来。</p><p>今天正好看到「极客时间」上推出了关于小程序的课程，我毫不犹豫的跳进去了，来吧，长按下方图片识别二维码，成为一个小程序大神，走起…<br><img src="images/20180326/xiaochengxu.jpg" alt="9小时搞定微信小程序开发"></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐一些常看的公众号，不是互推</title>
      <link href="/180324-%E6%8E%A8%E8%8D%90%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%9C%8B%E7%9A%84%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%8C%E4%B8%8D%E6%98%AF%E4%BA%92%E6%8E%A8.html"/>
      <url>/180324-%E6%8E%A8%E8%8D%90%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%9C%8B%E7%9A%84%E5%85%AC%E4%BC%97%E5%8F%B7%EF%BC%8C%E4%B8%8D%E6%98%AF%E4%BA%92%E6%8E%A8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>我倒是想互推呢，，，</p></blockquote><p>看过很多推荐公众号的文章，总有人留言说是互推的吧，其实我倒是想互推呢，能让这些大佬推荐，能不火都不行，要知道他们的公众号读者至少 10+ ，能让他们推荐，那真是荣幸。</p><p>这几个号其实之前就推荐过，只所以再次推荐，是因为这一年来我一直跟随着这几个公众号成长的，他们的坚持给了我很大的帮助，无论是从认知，行业现状，技术发展等各个方面，18年的前三个月又懈怠了这件事，一直以来都想跟他们一样坚持做自己想做的事。「制定一个目标，想坚持一件事情。这一次，是认真的，真的是认真的」。</p><h3 id="1、stormzhang"><a href="#1、stormzhang" class="headerlink" title="1、stormzhang"></a>1、stormzhang</h3><p><img src="images/20180324/stormzhang.jpeg" alt="stormzhang"></p><p>stormzhang， 不是第一次推荐了，他是一个非常值得让人敬佩的人，非科班出身，自学编程，现在成为公司的技术管理者，坚持写作 5,6 年了，前段时间因为他的知识星球 「帅张和他的朋友们」 第二期续费，日入 10w+ ，目前付费用户 6000+ ，前几天还被知识星球官方采访 <a href="https://mp.weixin.qq.com/s/icJpggvBEpWtqzAxF6hjCQ" target="_blank" rel="noopener">他不把运气放在眼里，用努力完成从学渣到职场高手的逆袭</a>，因此他自己也做了总结，个人觉得这是一篇很不错的文章 <a href="http://mp.weixin.qq.com/s/6nby0vu40SxFR8tCe4Wy5g" target="_blank" rel="noopener">一个新的里程碑</a>。</p><h3 id="2、MacTalk"><a href="#2、MacTalk" class="headerlink" title="2、MacTalk"></a>2、MacTalk</h3><p><img src="images/20180324/MacTalk.jpg" alt="MacTalk"></p><p>池老师，老程序员，先后任职洪恩软件和用友集团，从事互联网和企业应用软件研发，还在锤子科技担任过总监，目前加盟极客邦科技，任总裁。喜爱编程和写作，坚持年轻时的理想。他的文章文风有趣，又有一点力量。去年极客帮团队上线的APP「极客时间」也是非常棒的产品，可以说是程序员的福利。</p><h3 id="3、小道消息"><a href="#3、小道消息" class="headerlink" title="3、小道消息"></a>3、小道消息</h3><p><img src="images/20180324/fenng.jpeg" alt="小道消息"></p><p>冯老师，也是一个值得让人敬佩的人，常以不同与常人的思维思考问题，写文章也是，有独到的见解，时而风趣，时而讲真，在很多地方可以找到他的身影，推特、公众号、知识星球、微博等等，目前正在创业中，他的创业公司无码科技出品的产品「Readhub」是一个极简，有价值，注重与用户体验的产品。他们的产品特别重视用户体验，其中入住微信小程序的「Readhub」，「抽奖助手」也得到了用户的好评。</p><h3 id="4、keso-怎么看"><a href="#4、keso-怎么看" class="headerlink" title="4、keso 怎么看"></a>4、keso 怎么看</h3><p><img src="images/20180324/kesoview.jpg" alt="keso 怎么看"></p><p>洪波，不是程序员，独立IT评论人，以犀利的笔锋、独到的观点著名。keso 的文字就像是重剑无锋一样，大巧不工，不花哨，不抖机灵，扎实，有力度，有深度。</p><p>关注上车，老司机要开车了。。。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作两年之后</title>
      <link href="/171231-%E5%B7%A5%E4%BD%9C%E4%B8%A4%E5%B9%B4%E4%B9%8B%E5%90%8E.html"/>
      <url>/171231-%E5%B7%A5%E4%BD%9C%E4%B8%A4%E5%B9%B4%E4%B9%8B%E5%90%8E.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>我的 2017 年终总结</p></blockquote><p>又是一年年尾，今年的年尾好像显得尤为重要似的，每个人都在谈论 “再见2017,你好2018” 的话题，朋友圈继圣诞帽的热潮之后，又掀起了 “我的 18 岁” 热潮，2017 年的我们越来越喜欢跟风刷存在感，相比前面两种热潮我更青睐于知乎上年终总结的热潮。</p><p>用两个字总结这一年，那就是「忙碌」，可是在写这篇总结的时候却发现可写的没有多少，说白了是收获没有多少，除了年龄上的收获外，其他的都没有那么明显了。</p><h2 id="最大的变化"><a href="#最大的变化" class="headerlink" title="最大的变化"></a>最大的变化</h2><p>这一年最大的变化就是每天上班做的第一件事，以往的时候上班第一件事先是打开掘金或者知乎刷几篇热门的技术文章，而今年上班第一件事必然是打开我们所开发的平台，点点自己负责的模块，看看系统是否运行正常，然后开始一天的工作。工作上，不在是整天埋头敲代码，更多的是考虑如何设计，如何分配，如何提高效率，一天的时间几乎被一些琐碎的杂事请所占据，从而显得疲惫了不少，也正是因为这些琐碎的杂事请，每天感觉什么也没做，反而使人更累，回头想想还是安安静静的敲代码来的爽快。技术上，几乎没有什么进展，每天忙碌下来，上班期间根本没有时间去看技术文档，下班后又感觉很累也就没心思学习了，再加上技术更新换代的速度太快，明显感觉到跟不上的节奏，想想也罢，一味的追逐新技术不是什么好事。生活上，那就更不用说了，一如既往的单调，除了熬夜越来越迟，头发越来越少之外在没有什么了。相比 16 年的总结「工作一年之后」，方向已经大有变化，但是技术人不能丢弃技术，这是毋庸置疑的。</p><h2 id="对自己的投资"><a href="#对自己的投资" class="headerlink" title="对自己的投资"></a>对自己的投资</h2><p>不错，在这个变化莫测的时代，对自己的投资才是最有价值的投资，从16年开始，微信公众号成为了我获取信息的主要途径，我关注了大概有 200 多个公众号，有大公司的技术号，有个人的自媒体号，也有互联网大 V 的个人号，随着个人兴趣的变化，我也慢慢的开始关注产品类，运营类，投资理财类，心理学类等等的一些公众号，涉及领域之广泛，当然关注这么多公众号不可能每天都会去阅读，但是经常看的一些号，只要有更新就会去看。通过这些公众号，我也了解了一些付费平台的产品，订阅了罗元裳的「投资理财，怎么做才能获得最大收益」知乎 live，justjavac 的「前端工程师的入门与阶进」知乎live；订阅了朱赟在极客时间上的专栏「朱赟的技术管理课」，左耳朵耗子的「左耳听风」专栏；加入了 stormzhang 的知识星球「帅张和他的朋友们」。关注了这么多，也看了这么多，要说收获了什么我也说不上来，但是我相信长期下来收获是必然的。</p><h2 id="「zhiheng博客」的运营"><a href="#「zhiheng博客」的运营" class="headerlink" title="「zhiheng博客」的运营"></a>「zhiheng博客」的运营</h2><p>这个公众号开通已经有两年多了，15,16 年几乎没写几篇文章，主要在今年虽然写的很少，但至少是坚持写了一年，并且获得了微信爸爸的原创保护，留言赞赏功能，虽然听说原创保护已经对所有公众号开放了[捂脸]，粉丝长的也不多，但是还是要感谢一直关注我的读者们，你们的坚守与鼓励是我写下去的动力。17 年总的写了大概有 30 几篇文章，其中技术分享的文章不多，有几篇关于 GO 语言的，本来打算系统的学习这门语言，并以教程的形式发表，可是由于时间原因放弃了，之所以要学习 GO 语言，是因为 GO 比较年轻，在设计上都有前所未有的前瞻性，相信他将会成为未来的趋势。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>忙碌的一年，回头看时，能让人历历在目的没有几件事，还是那句话，都不知道这一年干了个啥，已经结束了。明年呢，明年继续努力，少熬夜，多看书，多运动，多与异性交朋友。[斜眼笑]</p><pre><code>2017 年 12 月 31 日冬</code></pre><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷屏了的圣诞帽与技术无关</title>
      <link href="/171223-%E5%88%B7%E5%B1%8F%E4%BA%86%E7%9A%84%E5%9C%A3%E8%AF%9E%E5%B8%BD%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%97%A0%E5%85%B3.html"/>
      <url>/171223-%E5%88%B7%E5%B1%8F%E4%BA%86%E7%9A%84%E5%9C%A3%E8%AF%9E%E5%B8%BD%E4%B8%8E%E6%8A%80%E6%9C%AF%E6%97%A0%E5%85%B3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>借助这个圣诞节呼吁大家重视传统文化的传承理性过节</p></blockquote><p>临近圣诞，大家都按捺不住自己激动的心情，最按捺不住的当属朋友圈了，这不，大清早的就被一条 @微信官方 的消息给刷屏了，原文是这样的 “请给我一个圣诞帽@微信官方” ，不过在朋友圈各种版本的都有，比如，“给老子来顶圣诞帽@微信官方”，“给我一个比特币@微信官方”，我只想说一句 “你咋不上天呢…”。<br><img src="images/20171223/20171223144945.jpg" alt="给老子来顶圣诞帽@微信官方"><br><img src="images/20171223/20171223144916.jpg" alt="给我一个比特币@微信官方"></p><p>刷屏了的不仅仅是朋友圈，就连微信公众平台也被有关圣诞帽的文章给刷屏了，看过几篇之后大概知道了这是怎么回事。最初不知是从哪传来的谣言，说是在朋友圈发一条 “请给我一个圣诞帽@微信官方” 的动态，微信就会在你头像上加一顶圣诞帽，还有人分析说，微信是使用了人工智能，图像识别技术，自动识别出头像中的位置将帽子添加上去的，这更加增加了传奇性，引起了大家的好奇心，于是乎朋友圈就被这条消息刷屏了。其实，这一切只是一场骗局罢了，不信，发你的头像到后台，我帮你制作一个戴圣诞帽的头像。</p><p>既然知道是骗局，那么呼吁大家别在发朋友圈传播了，毕竟国家已经不提倡过洋节了，你不知道吗？</p><h2 id="接下来才是重点关注的内容"><a href="#接下来才是重点关注的内容" class="headerlink" title="接下来才是重点关注的内容"></a><strong>接下来才是重点关注的内容</strong></h2><p>昨天看到一篇文章，<a href="http://mp.weixin.qq.com/s/zCABYNrXtSYUUfbdhNodeA" target="_blank" rel="noopener">国家终于出手，洋节，再见</a>，之后我在网上查了文化部的相关文件，发文中的规定并没有这篇文章中说的那么夸张，但是我觉得，对于洋节这件事应该引起大众的关注，你有没有发现，大街上已经摆满了的圣诞树，各商铺门口已经摆满了穿着红色衣服的圣诞老人和贴满圣诞节商品打折降价的广告牌，各大电商网站也想通过次节赚一笔横财，降价打折的广告铺天盖地。反观我们的传统节日，今年国庆节除了诱人的 7 天假和大街上插着几面国旗外，貌似再也看不到有什么引人注目的活动了，中秋节除了卖月饼的那几家商店搞搞活动卖卖月饼外，好像也没什么值得关注的了，就连老人们最喜爱的春节，在年轻人眼里只不过是走亲访友的麻烦，在别说重阳节，清明节，端午节这些只有假期才能让人记得的节日了。</p><p>去年圣诞节的时候，有位在幼儿园教书的朋友，在朋友圈晒礼物，孩子们送的圣诞礼物，把她高兴坏了。我给她回复说，为什么不在教师节送，她一脸懵逼无言以对。幼儿园的孩子，都知道在圣诞节要给老师送礼物，难道这不是一件可怕的事吗，试想这批孩子们长大以后，在他们的观念里是不是会有 ”在中国圣诞节比春节更为重要“ 这样的想法呢？？？当然错不在孩子们，而在我们这一代人身上，对西方文化的接纳，再没有比我们这一代人更为敞开胸怀的了。</p><p>时代科技的发展，我们越来越与国际接轨，然而我们丢失的传统文化与传统道德远比你想象的要多，在我看来，传统节日的传承，远不止只有假期才能让人们根深蒂固。从孩子的角度来看，六一儿童节远比三天假期的端午节更有意义，其中的原因不仅仅是儿童节是孩子们的节日这么单一，所以在学校组织一些类似儿童节这样的活动还是有必要的。</p><p>最后，借助这个圣诞节呼吁大家重视传统文化的传承理性过节，尤其是广大教育工作者，对于洋节，最好能免则免，还有广大党员同志们，以后过洋节要小心喽，，，[斜眼笑]</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12月发生的几件事</title>
      <link href="/171218-12%E6%9C%88%E5%8F%91%E7%94%9F%E7%9A%84%E5%87%A0%E4%BB%B6%E4%BA%8B.html"/>
      <url>/171218-12%E6%9C%88%E5%8F%91%E7%94%9F%E7%9A%84%E5%87%A0%E4%BB%B6%E4%BA%8B.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>好汉不吃眼前亏。但是在另外很多时候，如果问题争执不下，也不要继续火上浇油，冷静下来，多收集一些数据材料与想更明白点再说。</p></blockquote><p>又是忙碌的一周，上周通宵两夜赶出来的功能只用了一下午，还是有一点小失望的。今天认识了一个同是喜欢写作的朋友，聊起了写作，甚是投机，非科班出身，喜欢写作，一下子勾起了我的写作欲望，于是有了这篇 12 月发生的一些事。</p><h2 id="世界互联网大会"><a href="#世界互联网大会" class="headerlink" title="世界互联网大会"></a>世界互联网大会</h2><p>12 月 3 日世界互联网大会在乌镇举行，各大佬们的讲话和饭桌上的佳肴，相信在前些天已经风靡了大街小巷，我也不再过多的罗嗦。看了很多的评论和总结，有人说小马哥尽然谈起了创新，那不是扯淡吗，其实不然，近年来，随着国内网民的高速增长，国内的互联网企业也慢慢的进入了领头羊的角色，尤其是新一代企业家，对于走出国门他们有更大的胆识。意大利大街上的膜拜单车、印度人手中的小米手机、新加坡总理对扫码支付的惊叹等等，这都预示着我们也走上了创新的道路。早在几年前，李彦宏就说过，“当中国的网民数量成为世界第一后，我们就会先于美国碰到各种各样的互联网问题，如果能够先碰到这个问题，就有机会去先解决这个问题，创新就会源源不断的出现。这种优势，是中国的优势，是别的国家无法效仿的优势。”（出自公众号 <code>keso怎么看</code> 的<a href="http://mp.weixin.qq.com/s/vsvS8DaJ60Irip39vrehHw" target="_blank" rel="noopener">中国互联网的自信是哪儿来的？</a>）马化腾也曾说过，“山寨美国是全世界互联网的必经阶段，但是山寨这件事不会再持续下去，不建立自己的创新基因和文化，中国互联网的发展不可能长久。”</p><p>看看小马哥家的微信，小程序的创新也成了大家山寨的对象，支付宝做起了小程序，就连 Google 的 PWA 也有点小程序的理念了，不用安装，用完就走。有人说微信已经老了，其实微信最近更新挺频繁的，只是你不注意罢了，最近更新的功能有聊天记录的检索，可以通过日期检索;收藏功能的增加，现在收藏里可以添加图片，视频，富文本，位置，录音，还能写待办事项; 已撤回的消息再编辑，很多时候我们撤回消息不是发错人或发错群，而是写错字了，现在当你撤回消息，会有个“再编辑”的链接，点击那个链接，消息会出现在输入框，改改之后重新发送就行了，很是贴心; 微信一直在为用户需求和用户体验上下功夫，这才是真正为用户而打造的产品。反观某付宝，现在拿出来，还能认得出它刚开始是一个做支付的 APP 吗。</p><h2 id="Google-开发者大会"><a href="#Google-开发者大会" class="headerlink" title="Google 开发者大会"></a>Google 开发者大会</h2><p>12 月 13 日 Google 开发者大会在上海举行，我在第一时间看了直播，感觉也没有那么激动，但是有好多自媒体作者激动的发文感慨，也许是他们去现场的缘故吧。这次大会振奋人心的是 Google AI 中国中心在北京成立，这为广大的学生及研究人员提供高质量 AI 及机器学习的教育支持。还有 Android 的蓬勃发展，Google 智能助理的推出，前面提到的 PWA 帮助中国开发者优化用户体验，PWA 也支持了国内大部分主流的浏览器，还有 Google 的分析系统等等。这似乎预示着 Google 在国内的回归，但是是否真的能回归，还需要更多是时间和更大的努力。</p><h2 id="中兴-70-后程序员跳楼身亡"><a href="#中兴-70-后程序员跳楼身亡" class="headerlink" title="中兴 70 后程序员跳楼身亡"></a>中兴 70 后程序员跳楼身亡</h2><p>12 月 14 日发在美篇上的一篇文章，70 后程序员在中兴通信大楼跳楼身亡。当事人欧某出身农村家庭，本科北京航空航天大学，在华为公司工作 8 年，期间考取南开大学的硕士研究生。近两年程序员群体被大众注意到，前有 WePhone 开发者被女友诈骗自杀，后有中兴 70 后程序员跳楼身亡，程序员的弱势在于工作性质，常年跟机器打交道，以为什么都跟机器一样讲道理，低估了人性的复杂与丑陋，加上工作的原因，习惯遇事自己独立解决 ，导致遇到事情不会妥善处理，更不会轻易请人帮助，一致酿成悲剧。在这我也提醒广大程序员同胞们，在工作之余，技术之外，也要多加强人际交往和沟通的能力及处事方式和处理人情世故，谁都知道，程序员大多是智商较高，但是情商较为缺乏，而人这一生情商远比智商更为有用一些。</p><p>最后，2017 年又接近尾声，年底往往事情比较多，在忙碌之余写作仍将继续，晚安，我的朋友们！2017 年 12 月 18 日凌晨 1 点。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会上瘾的今日头条</title>
      <link href="/171203-%E4%BC%9A%E4%B8%8A%E7%98%BE%E7%9A%84%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1.html"/>
      <url>/171203-%E4%BC%9A%E4%B8%8A%E7%98%BE%E7%9A%84%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>年轻时很容易想要“一鸣惊人”，急于证明自己，但其实，二十几岁恰恰是需要一个人定下心来，本本分分，一步步地去做事情，去积累的时候。年轻不怕失败，只要能学到东西，并且让自己一直处于成长的状态，你想要的都会不请自来。——蓑依 ​​​ ​​​​</p></blockquote><p>最近经常见好多同事，一有闲时间就在刷头条，我也好奇就安装了今日头条，大概看了一些有趣的段子什么的，就再没管，当我第二次打开头条的时候，发现铺天盖地的都是同一种类型的段子，把我看的不亦乐乎。后来又看了些我感兴趣的话题，当我再次打开头条看时，又是同一类型的话题，并且大多数是一些标题党，标题很吸引人，内容平平，没什么价值。时间一长我也跟同事们一样了，一有闲时间就不由自主的打开头条，而且看的不亦乐乎。当我发现自己大部分闲时间都被头条占据后，我毫不犹豫的卸载了。</p><p>记得大学时候，新闻客户端还是那个风格简洁，以红色为主色的网易新闻，每天上课前看看新闻，偶尔还会转发分享到微博（那时的朋友圈还没有现在这么流行）。当网易还沉浸在包揽用户的喜悦之中时，今日头条慢慢进入了人们的生活，以他独到的推荐算法，魔法般的将用户感兴趣的东西一股脑抛到你面前，你就像上瘾了似的每天笑的乐哈哈。再到后来，网易新闻也做起了推荐，丢弃了当初那个少女般的新闻类产品，和头条一样，无论内容好坏一股脑的抛给用户。不得不说头条的推荐算法很强大，侵蚀力也很强，甚至老牌的腾讯新闻，新浪新闻也被头条超越。他准确抓住了人性的弱点，那些热点文章都是在抓人的注意力，使用耸人听闻的标题，引诱你其点击，点击之后头条认为你对其感兴趣，然后给你推荐更多的垃圾信息。</p><p>据有关统计，头条的点击量已经超越了公众号的点击阅读量，单从每天发表数量来看，公众号原创输出远远大于头条的输出，但是在点击量上头条却占据了领先地。在我看来，这很正常，因为公众号文章用户有选择权，如果一个公众号输出的内容没有多大价值，用户可以取关；相反的头条无论内容质量如何都推荐给用户，几乎排在前面的文章都是利用机器推荐算法推荐给你的。但是公众号就不样了，我们知道公众号的文章阅读一部分是来自朋友的转发，那么你是相信朋友给你的推荐呢，还是相信机器算法给你的推荐？</p><p>其实头条上也有一些很不错的文章值得我们去阅读，只是那些吸引眼球的标题和远远不断的推荐，占据了你筛选信息的时间。在这个信息膨胀的互联网时代，如何筛选出真实，有价值，有深度的内容，还是需要一个有节操有底线的产品来为用户服务，从而节省人们更多的时间。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天抽一点时间来阅读</title>
      <link href="/171125-%E6%AF%8F%E5%A4%A9%E6%8A%BD%E4%B8%80%E7%82%B9%E6%97%B6%E9%97%B4%E6%9D%A5%E9%98%85%E8%AF%BB.html"/>
      <url>/171125-%E6%AF%8F%E5%A4%A9%E6%8A%BD%E4%B8%80%E7%82%B9%E6%97%B6%E9%97%B4%E6%9D%A5%E9%98%85%E8%AF%BB.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>真正的读书使瞌睡者醒来，给未定目标者选择适当的目标。正当的书籍指示人以正道，使其避免误入歧途。</p></blockquote><p>刚在上篇文章中说完坚持这件事，就发现一款很不错的打卡产品，叫做 “小打卡” 的微信小程序，在这个平台上你可以建立自己的圈子，邀请几位好友，分享一些内容；我随便刷了刷，上面的圈子主题还挺多，有运动的，有写作的，有阅读的，有写一些读后感的，还有学英语的，每天读一段英文句子，我觉得这种模式就很好。一些兴趣爱好相同的人聚在一起，互相学习，互相讨论，看着每天打卡学习的小伙伴都在努力提升自己，你还能安稳的享受这生活的安逸么？我也在小打卡上开了一个圈子，叫做 “每日心情” ，我的主题内容很简单，每天发表一点鸡汤，心情，配上一张唯美的图片，目的在于锻炼每天坚持做这件事，如果你能坚持打卡一年半载，或许这已经成为你的习惯，那么你可以尝试做一些更有意义的事，比如写作，阅读。</p><p><img src="images/20171127/201711271432.png" alt="小打卡 “每日心情”"></p><p>前面写到过的写作，有人也不止一次的说起过，几乎都是同样的问题，就是我也想写，但是每次写的时候总是不知道要写啥，或者害怕写的东西被别人看到等等，于是引发了今天这个话题–阅读。</p><p>我所说的阅读，不是传统的书籍阅读，而是指碎片话阅读，或许有人会说，碎片话阅读那只是噱头，其实不然，现在的社会潮流，手机是阅读的很好工具，智能手机几乎覆盖了所有人，尤其是年轻人，吃饭，坐车，睡觉都几乎已经手机不离手了，只要抽出刷朋友圈，刷微博三分之一的时间用来阅读，那每天的阅读量估计能达到 5w 字以上了。当然我也不反对书籍的阅读，如果要系统的学习一门技术，我还是建议去买一本不错的书，因为书上的知识比较系统，讲的比较全面，适合那些从入门到深入学习的人；反过来，你想通过碎片化阅读去学习一门技术，那是不可能的，就算学到一点知识，那也可能只是一个知识点，仅此而已。</p><p>这是一个信息化时代，各种各样的信息满天飞，我们怎么能在这些信息中筛选出自己感兴趣有价值的信息呢，我推荐使用微信公众号，选择关注一些技术牛人大佬的公众号，通常会不定期的写技术分享，或者业界一些有趣的事，这要比在头条，微博上筛选信息来的快。其实还有很多获取阅读的途径，比如知乎专栏，得到专栏，极客时间专栏，知识星球等等。这些产品的模式是近几年业界的一个亮点 “知识付费”，他们输出的知识内容都要求付费。我是不反对这种模式的，首先对于作者来说，付费是更大鼓励与认可，输出的文章自然也会保证质量；对读者来说，我付费了，就会花更多是时间去思考作者的观点与想法；所以知识付费是双赢互利的。</p><p>我每天都会花大量的时间去阅读，除了公众号以外，我也订阅了几个专栏，包括朱赟在极客时间上的“管理课程”，左耳朵耗子在极客时间上的“左耳听风”，stormzhang 在知识星球上的 “帅张和他的朋友们” ，我在这些平台上获得了很多有价值的东西，包括认知，管理，技术，理财等等，所以不管你处于什么阶段，每天抽出一点时间来阅读，对你的见识和眼界都是有很大帮助的。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何坚持不断的做一件事</title>
      <link href="/171121-%E5%A6%82%E4%BD%95%E5%9D%9A%E6%8C%81%E4%B8%8D%E6%96%AD%E7%9A%84%E5%81%9A%E4%B8%80%E4%BB%B6%E4%BA%8B.html"/>
      <url>/171121-%E5%A6%82%E4%BD%95%E5%9D%9A%E6%8C%81%E4%B8%8D%E6%96%AD%E7%9A%84%E5%81%9A%E4%B8%80%E4%BB%B6%E4%BA%8B.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>书不记，熟读可记；义不精，细思可精；惟有志不立，直是无着力处。 </p></blockquote><p>上篇文章说了写作之后，有很读者就在问我 “道理我都懂，但是就是坚持不下来”，的确是这样。我见过很多这样的例子，刚开始的时候心血来潮，噼噼啪啪写了很多，后来慢慢的就不见发表文章了，其实我也是一样，有时候会写很多，有时候又感觉没什么可写，最终的原因还是坚持不下来；那么如何坚持不断的做一件事呢？</p><p>最近看公众号文章发现一个有趣的现象，公众号阵营好像一波一波的，比如，前面提过的 stormzhang 阵营的有 <code>python 之禅</code>,<code>一个程序员的日常</code>,<code>高效率工具搜罗</code>,<code>DeveloperPython</code> 等，他们的公众号几乎都互相推荐过，运营模式基本相似，有做 Android 的，有做 python 的，有收集一些好用的工具的；其实有一部分人是受到 stormzhang 的影响才运营起公众号的，也包括我，我在他那也受了很多启发，不论是写作，阅读，理财，职业规划，stormzhang 说的都很有自己的观点。另一个阵营的是以池建强老师为首的，包括前面提到过的 <code>嘀嗒嘀嗒</code>,<code>caoz的梦呓</code>,<code>二爷鉴书</code>,<code>keso怎么看</code> 等等，这些公众号也是通过 <code>嘀嗒嘀嗒</code> 推荐后我才关注的，读 <code>嘀嗒嘀嗒</code> 的简介时才了解到，她是被池建强老师拉下水的，然后就喜欢上了写作，并持续不断的在公众号的更新。也许这就是他们坚持写作的原因之一，互相推荐、互相鼓励、同时也互相学习。</p><p>其实这种方式坚持做一件事是非常有效的，还记得大学时候，做什么事都要拉个伙伴一起，记得一个哥们为了追妹子，每天都拉我去跑步，跑了一段时间妹子没追成，倒是养成了跑步的习惯，每天都去跑两圈，后来毕业之后各奔东西这个习惯没坚持多久就丢掉了。所以想坚持做一件事，找个小伙伴一块坚持是一个行之有效的方法。</p><p>坚持做一件事，让其形成习惯，说起来简单做起来却难于上青天，不如从一件小事做起，比如早睡早起，算了，早睡早起只适合中老年人的习惯，对于年轻人很少有人能坚持做到这件事。你可以从一件比较感兴趣的小事做起，比如，有人喜欢鸡汤，可以每天读一小段鸡汤，或者直接复制到朋友圈；比如，可以关注一个叫每日打卡的公号，每天在上面签到打卡，养成这个习惯从而锻炼你坚持做事的态度等等。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未来必不可少的一项技能</title>
      <link href="/171119-%E6%9C%AA%E6%9D%A5%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84%E4%B8%80%E9%A1%B9%E6%8A%80%E8%83%BD.html"/>
      <url>/171119-%E6%9C%AA%E6%9D%A5%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84%E4%B8%80%E9%A1%B9%E6%8A%80%E8%83%BD.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>未来必不可少的一项技能–写作</p></blockquote><p>公众号已经有一个多月没有更新了，最近一直在思考，如何更好的去运营这个公号，以前所写的文章都比较杂乱，涉及到了很多方面，回头看时，有价值的文章很少，所以最近就一直在想，如何提升文章内容的优质性，引发读者一些思考，真正的能帮助读者进行自我提升。</p><p>本来还想重新申请一个公号，后来想想还是算了，一是不想扔掉之前所写的文章；二是同时运营两个公号费时费力，还不如把时间花在如何更好的输出有价值的东西。</p><p>在这期间我关注了很多文章写的不错的公号，主体大都是一些业界大佬，有做管理的，有做产品的，也有做技术的，不管是什么方向，他们总是能输出一些令人惊叹的文章，并能持续不断的输出。不可否认他们在业界摸爬滚打这么多年积累的经验很丰富，但是要将这些自身的经验转换成文字，转换为对别人有帮助的东西，还是要靠一项技能，那就是今天所说的–写作。</p><p>说几个公众号故事吧</p><p>1、stormzhang</p><p>如果你经常刷知乎，公众号，或者是知识星球，那肯定会见到他的身影。我关注他的公号有一年多了，之前也有推荐过的他的公号，他写的文章总是能打动人，无论内容是否对你有价值，但是看他的文章感觉上就是一种享受，当然让你享受的文章内容肯定不会差。他的公号主要分享一些个人成长，理财，职业发展相关的，同时他还运营着一个叫做“帅张和他的朋友们”的知识星球，里面的气氛很好，大家互相帮助，互相讨论一些问题，也可以直接向他提出一些问题，他的回答也是有依有据。他是一个让知识变现的例子，而这也要归功于一项必不可少的技能–写作。</p><p>2、滴答滴答</p><p>这个公号的主体可就牛了，她叫朱赟，毕业于中国科技大学少年班，获得美国萊斯大学攻读硕士和博士，Square 公司的第一位华人女工程师，现任硅谷 Airbnb 公司的支付团队的技术经理。我也是前几天看池建强老师写的一篇文章中得知这位牛人的，然后就关注了，翻了翻她之前写的文章，发现太能写了，大多都是自己的一些经验总结，但是涉及了技术、管理等多方面，而且都有自己的独特的观点。她的公号粉丝已经有 1w+ 了，但是看不到有广告，人家任性的说了 “我不差钱”。最近她在极客时间的 APP 上开了一个专栏 “朱赟的技术管理课”，为了跟紧大牛的步伐我花了 58 元大洋订阅了。所以真正能实现财富自由不差钱的技能–写作。</p><p>说着两个故事呢，证明一个问题，无论你是做技术，产品，还是运维，或者说无论你是否在互联网行业，都应该对自己定期的做总结，做归纳。昨天看 “caoz的梦呓” 的一个举例，一个没文化，没多过书的家长，把孩子培养名校高材生，问他怎么培养的，说其实很简单，孩子明天回来，让他给自己讲讲学校里都讲了啥，自己学会了啥，让孩子给自己当老师，对知识的掌握，对孩子的表达能力和总结能力的提高，是非常大的。而做总结归纳的一个非常有效的途径就是–写作。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还有什么理由不奋斗</title>
      <link href="/170923-%E8%BF%98%E6%9C%89%E4%BB%80%E4%B9%88%E7%90%86%E7%94%B1%E4%B8%8D%E5%A5%8B%E6%96%97.html"/>
      <url>/170923-%E8%BF%98%E6%9C%89%E4%BB%80%E4%B9%88%E7%90%86%E7%94%B1%E4%B8%8D%E5%A5%8B%E6%96%97.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>好的程序员即使在过单行道时也总是会环顾两边。</p></blockquote><p><img src="images/20170923/20170923151957.jpg" alt></p><p>iPhone X 都可以人脸识别了，电子身份证即将面世了，Goole 又要放大招了（HTC 被收购），闲得无聊可以跟手机聊会天了，或许有一天人们再也不用养宠物了，机器人美女可以解决你的空虚寂寞了，，，那么你，还有什么理由不去努力奋斗了。</p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>前几天看到一篇文章，叫做你的见识，决定了你能走多远，真是这样，自己深有体会。还记得第一次在北京坐地铁，总是害怕坐过站，人多的时候害怕挤不下去。后来生活了一段时间，就连早上7，8点西二旗的13号线都能挤上去，还有什么做不了的。离开北京，来到二线城市不算是决策的失误，只要还有一颗年轻向上的心，也可以继续做自己喜欢的事，敲自己喜欢的代码。很多人会抱怨北上广房价高，空气不好，但还是继续待着不离开，大部分原因是由于他们有一颗年轻不服输的心。在那里是人才的聚集地，也是知识的发源地，很多创新的想法都起源于这些地方。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>我关注的一个公众号作者，我们都叫他“张哥”（不是他年龄大），他生活在上海，是一个 Android 程序员，活跃于各大社区，如果你经常逛知乎，玩公众号或者知识星球，应该能找到他的身影，常常分享一些赚钱的方法，很多还是挺靠谱的，我自己也试过几次，还是可以的。为什么说这个人呢，前几天他分享了一篇叫做 <a href="http://mp.weixin.qq.com/s/Usly2ACapXP0gyYsZXK27w" target="_blank" rel="noopener">一位读者关于买房的困惑</a> 的文章，对我启发很大，前段时间一直处于低迷状态，其中就有房子的原因，甚至浮现了回老家的念头。他说的很对，在大城市生活的人，其见识、视野绝对是我们无法比拟的。虽然我们在所在的城市买不起房，但是我们还年轻，就算是人生的四分之一还过一点已经没了，我们依然有不服输的心，有好的想法，有惊人的创意；就算没有创意没有想法，我们还有附带中华民族的优良传统，为自己的下一代着想的无私奉献。如果我现在回去了，那么我的下一代，还会背着行囊走同样的路，他们还是会面临着高房价的威逼，而站在岔路口徘徊，所以，，，还有什么理由不奋斗呢。</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>PS:还有什么理由不奋斗…</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go教程-GO常用命令</title>
      <link href="/170918-go%E6%95%99%E7%A8%8B-GO%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
      <url>/170918-go%E6%95%99%E7%A8%8B-GO%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>编程是 10% 的科学，20% 天份，和 70% 的让这天份符合科学.</p></blockquote><p>上一节中我们已经用到了一些 go 的命令和工具，今天来系统的看看这些命令有什么神奇黑科技。</p><h2 id="go-常用命令"><a href="#go-常用命令" class="headerlink" title="go 常用命令"></a>go 常用命令</h2><p>Go 语言自带有一套完整的命令操作工具，你可以通过在命令行中执行 go 来查看它们：<br><img src="images/20170912/20170912214238.png" alt="go 命令"></p><p>这些命令在我们平常开发中经常会用到，我们来看看一些常用的命令：</p><h2 id="go-build"><a href="#go-build" class="headerlink" title="go build"></a>go build</h2><p><code>go build</code> 命令用于编译我们指定的源码文件或代码包以及它们的依赖包。</p><p>如果我们在执行 <code>go build</code> 命令时后面不跟任何代码包，那么命令将试图编译当前目录所对应的代码包，例如，我们在上一节<a href="https://dddreams.github.io/170907-go%E6%95%99%E7%A8%8B-GOPATH%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%9C%AC%E5%9C%B0%E6%95%99%E7%A8%8B%E5%AE%89%E8%A3%85.html">go教程-GOPATH配置与本地教程安装</a>中编译 mymath 包那样，当你执行 <code>go build</code> 时，他不会产生任何文件，因为该包中只包含库源码文件，或者测试源码文件。如果你需要在 <code>$GOPATH/pkg</code> 生成相应的文件，那就的执行 <code>go install</code> 了。</p><p>如果是 main 包，当你执行 <code>go build</code> 之后，会在当前目录下生成一个可执行文件，因为 mian 包是命令源码文件，是程序的入口文件，所以会生成可执行文件。如果你需要在 <code>$GOPATH/bin</code> 下面生成相应的文件，你需要执行 <code>go install</code> 或者使用 <code>go build -o 路径/a.exe</code> .</p><p><strong>知识点：</strong>GO 语言的源码文件有三大类：命令源码文件、库源码文件和测试源码文件。他们的写法各有特点。命令源码文件是可执行的程序入口。哭源码文件锁一般用于集中放置待被使用的程序实体（全局常量、全局变量、接口、结构体、函数等等）。测试源码文件只要用于对前两种源码文件中的程序功能进行测试。</p><p>当然我们可以直接在 <code>go build</code> 后面跟上包路径，想这样 <code>go build github.com/shure/mymath</code> 也是可以执行的，这是因为我们已经将项目根目录添加到环境变量 GOPANTH 中了，这样我们就可以在任意目录执行这个命令了。</p><p><code>go build</code> 还有很多参数，例如： <code>-a</code> 强行对所有涉及到的代码包（包含标准库中的代码包）进行重新构建，即使它们已经是最新的了。<code>-n</code> 打印编译期间所用到的其它命令，但是并不真正执行它们。</p><p>更多的参数就不细说了，有兴趣的朋友可以在此查阅<a href="https://studygolang.com/articles/5226" target="_blank" rel="noopener">https://studygolang.com/articles/5226</a></p><h2 id="go-clean"><a href="#go-clean" class="headerlink" title="go clean"></a>go clean</h2><p>这个命令是用来移除当前源码包里面编译生成的文件。这些文件包括：</p><p>使用 <code>go build</code> 命令时在当前代码包下生成的与包名同名或者与Go源码文件同名的可执行文件。</p><p>执行 <code>go test</code> 命令并加入-c标记时在当前代码包下生成的以包名加“.test”后缀为名的文件。</p><p>_obj/ #(旧的 object 目录)</p><p>_test/ #(旧的 test 目录)</p><p>_testmain.go #(旧的 gotest 文件)</p><p>test.out  #(旧的 test 记录)</p><p>build.out #(旧的 test 记录)</p><p>.exe  #(go build 产生)</p><p>.test.exe #(go test 产生) 等等</p><p>一般的在 github 上提交代码时，运行此命令清除后提交源码文件。</p><h2 id="go-doc"><a href="#go-doc" class="headerlink" title="go doc"></a>go doc</h2><p><code>go doc</code> 命令可以打印附于Go语言程序实体上的文档。我们可以通过把程序实体的标识符作为该命令的参数来达到查看其文档的目的。</p><p><code>godoc</code> 是一个很强大的工具，同样用于展示指定代码包的文档。在Go语言的1.5版本以后，它是一个内置的标准命令。</p><p><code>godoc -http=:6060</code> 标记 -http 的值 :6060 表示启动的Web服务器使用本机的6060端口。之后，我们就可以通过在网络浏览器的地址栏中输入 <a href="http://localhost:6060" target="_blank" rel="noopener">http://localhost:6060</a> 来查看以网页方式展现的Go文档了。</p><h2 id="go-fmt"><a href="#go-fmt" class="headerlink" title="go fmt"></a>go fmt</h2><p>一般的在其他编程语言中，对于代码风格没有严格的要求，但是 Go 语言则有标准的风格，对代码格式进行了强制，比如：左大括号必须放在行尾。不按照此格式的代码将不能编译通过，为了减少排版的问题，go 工具提供了一个 <code>go fmt</code> 命令，它可以帮助格式化你的代码文件，你只需要执行 <code>go fmt xxx.go</code> 你的代码将会被修改为标准格式。其实很多开发工具已经集成了该工具，当你按下 <code>Ctrl + S</code> 时，IDE 自动调用了该命令，进行了代码格式化。</p><p>更多时候使用 <code>gofmt</code> 而且需要带参数 <code>-w</code> ,否则格式化结果不回写入文件。<code>gofmt -w src</code> 可以格式化整个项目。</p><h2 id="go-get"><a href="#go-get" class="headerlink" title="go get"></a>go get</h2><p><code>go get</code> 可以根据要求和实际情况从互联网上下载或更新指定的代码败一级依赖包，并对他们进行编译和安装。目前支持的有 BitBucket、Github、Google Code和Launchpad。这个命令实际上操作了两步：第一步是下载源码包，第二步是执行 <code>go install</code> 。</p><p>为了 <code>go get</code> 能正常工作，你必须安装相应的源码管理工具，比如：Github 使用 Git，Google Code 使用 hg 等。</p><h2 id="go-install"><a href="#go-install" class="headerlink" title="go install"></a>go install</h2><p>命令 <code>go install</code> 用于编译并安装指定的代码包及它们的依赖包。当指定的代码包的依赖包还没有被编译和安装时，该命令先去处理依赖包。与 <code>go build</code> 命令一样，传给 <code>go install</code> 命令的代码包参数，应该可以导入路径的形式提供。并且， <code>go build</code> 命令的绝大多数标记也都可以用于 <code>go install</code> 命令。</p><p>实际上 <code>go install</code> 分成了两步操作：第一步生成结果文件（可执行文件或.a包），第二步会把编译好的结果移动到 $GOPANTH/pkg 或者 $GOPATH/bin.</p><h2 id="go-run"><a href="#go-run" class="headerlink" title="go run"></a>go run</h2><p><code>go run</code> 命令可以便宜源码并运行命令源码文件。由于包含了编译动作，因此可接受所有用于 <code>go build</code> 命令的标记，它不允许有多个包含 main 函数的命令源码包作为参数。</p><h2 id="go-test"><a href="#go-test" class="headerlink" title="go test"></a>go test</h2><p>执行这个命令，会自动读取源码目录下面名为 <code>*_test.go</code>的文件，生成并运行测试用的可执行文件。默认的情况下，不需要任何的参数，它会自动把你源码包下面所有test文件测试完毕.</p><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p>go 还提供了其它很多的工具，例如下面的这些工具</p><p><code>go fix</code> 用来修复以前老版本的代码到新版本，例如 go1 之前老版本的代码转化到 go1</p><p><code>go version</code> 查看 go 当前的版本</p><p><code>go env</code> 查看当前 go 的环境变量</p><p><code>go list</code> 列出当前全部安装的 package</p><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>参阅书籍：《Go Web 编程》</p><p>go 中文社区：<a href="https://studygolang.com/articles/5226" target="_blank" rel="noopener">https://studygolang.com/articles/5226</a></p><p>go 命令教程：<a href="https://www.jianguoyun.com/p/DW-1aogQ2vP0BRjTkiU" target="_blank" rel="noopener">https://www.jianguoyun.com/p/DW-1aogQ2vP0BRjTkiU</a> (访问密码： kmNYam)</p><p>本教程 Girhub 地址：<a href="https://github.com/dddreams/go-tutorial" target="_blank" rel="noopener">https://github.com/dddreams/go-tutorial</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果文章对你有用，转发分享、点赞赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go教程-GOPATH配置与本地教程安装</title>
      <link href="/170907-go%E6%95%99%E7%A8%8B-GOPATH%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%9C%AC%E5%9C%B0%E6%95%99%E7%A8%8B%E5%AE%89%E8%A3%85.html"/>
      <url>/170907-go%E6%95%99%E7%A8%8B-GOPATH%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%9C%AC%E5%9C%B0%E6%95%99%E7%A8%8B%E5%AE%89%E8%A3%85.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>贵有恒，何必三更起五更眠。最无益，只怕一日曝十日寒。</p></blockquote><p>今天来学习 GOPATH 环境变量配置与工作空间，下一节将会学习到 GO 的一些常用命令。</p><h2 id="GOPATH-配置"><a href="#GOPATH-配置" class="headerlink" title="GOPATH 配置"></a>GOPATH 配置</h2><p>go 命令依赖一个重要的环境变量：$GOPATH </p><p>在类似 Unix 环境大概这样设置： <code>sh export GOPATH=/home/apple/mygo</code><br>Windows 设置如下，新建一个环境变量名称叫做 GOPATH： <code>GOPATH=c:\mygo</code> GOPATH允许多个目录，当有多个目录时，请注意分隔符，Windows是分号，Linux系统是冒号。当有多个 GOPATH 时，默认会将 go get 的内容放在第一个目录下</p><p>$GOPATH 目录约定有三个子目录：</p><ul><li>src 存放源代码（比如：.go .c .h .s等）</li><li>pkg 编译后生成的文件（比如：.a）</li><li>bin 编译后生成的可执行文件（为了方便，可以把此目录加入到 $PATH 变量中）</li></ul><p>GOPATH 是一些列用于go来查找包的目录列表. 使用 import “包名” 的时候, 如果在 GOROOT 里找不到, 应该会转向到你的 GOPATH 里去寻找.</p><p>注：GOPATH 和 GOROOT 不要设置在同一目录下，是因为不想你新安装的包, 污染了核心 go 的 pkg 和 src 文件。</p><h2 id="应用目录"><a href="#应用目录" class="headerlink" title="应用目录"></a>应用目录</h2><p>一般的，新建应用或者代码包时，都是在 src 目录下新建一个文件夹，文件夹的名称就是包名称，也可以有多级目录，例如：在 src 目录下新建了 $GOPATH/src/github.com/shure/mymath，那么这个包的路径就是<code>github.com/shure/mymath</code>，包名称是最后一级目录 <code>mymath</code></p><p>然后在 github.com/shure/mymath 下新建文件 <code>sqrt.go</code> 内容如下<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mymath</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sqrt</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">z := <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">z -= (z*z - x) / (<span class="number">2</span> * x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样我们就创建了一个 mymath 的包，建议 package 的名称和目录名保持一致。</p><h2 id="编译应用"><a href="#编译应用" class="headerlink" title="编译应用"></a>编译应用</h2><p>编译应用 GO 提供了两种方式</p><p>1、进入对应的应用包目录，执行 go install 就可以安装了。</p><p>2、在任意目录执行 go install mymath</p><p>安装之后进入 pkg 目录下就可以看到 mymath.a 的文件，这个 .a 文件就是应用包。接下来我们来调用它：</p><p>新建应用 mathapp/main.go ,内容如下：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/shure/mymath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Sqrt(2) = %v\n"</span>, mymath.Sqrt(<span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后进入该目录执行 <code>go build</code> 命令，就会在该目录下面生成一个 mathapp 可执行的文件，Linux 下运行 <code>sh ./mathapp</code>, Windows 下运行 <code>./mathapp.exe</code> 就会输出 <code>Sqrt(2) = 1.414213562373095</code> 。</p><p>继续执行 <code>go install</code> 命令安装，这时就会在 $GOPATH/bin/ 目录下生成一个 mathapp 的可执行文件，同样可以运行它，以 Windows 为例：<code>./mathapp.exe</code> 并打印 <code>Sqrt(2) = 1.414213562373095</code></p><h2 id="获取远程包"><a href="#获取远程包" class="headerlink" title="获取远程包"></a>获取远程包</h2><p>GO 提供了一个获取远程包的工具 <code>go get</code> ,目前go get支持多数开源社区(例如：<br>github、googlecode、bitbucket、Launchpad)</p><p>注意：使用这个命令必须安装对应开源平台的源码控制工具，例如：github 使用 git ，googlecode 使用 hg。</p><p>我们可以使用这个工具来获取 GO 官方提供的教程，安装至本地方便查阅，这对于国内用户来说是非常必要的。中文版教程 github 地址 <a href="https://github.com/Go-zh/tour" target="_blank" rel="noopener">https://github.com/Go-zh/tour</a> </p><p>直接在你 $GOPATH 的目录下运行 <code>$ go get -u github.com/Go-zh/tour/gotour</code> 等安装完成之后，会在 $GOPATH/bin 目录下生成一个 gotour 的可执行文件，运行该文件就会在你默认浏览器中打开教程。若你想安装该教程的英文版，直接执行 <code>go tool tour</code> 命令即可安装。</p><p>go get 本质上可以理解为首先第一步是通过源码工具 clone 代码到 src 下面，然后执行 go install 在代码中如何使用远程包，很简单的就是和使用本地包一样，只要在开头 import 相应的路径就可以 <code>import &quot;github.com/shure/mymath&quot;</code>.</p><h2 id="应用目录结构"><a href="#应用目录结构" class="headerlink" title="应用目录结构"></a>应用目录结构</h2><p>上面例子的目录结构</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$GOPATH</span><br><span class="line">  bin</span><br><span class="line">    |<span class="comment">--mathapp.exe</span></span><br><span class="line">  pkg</span><br><span class="line">    |<span class="comment">--windows_amd64 // 相应平台</span></span><br><span class="line">      |<span class="comment">--github.com</span></span><br><span class="line">        |<span class="comment">--shure</span></span><br><span class="line">          |<span class="comment">--mymath.a</span></span><br><span class="line">  src</span><br><span class="line">    |<span class="comment">--github.com</span></span><br><span class="line">      |<span class="comment">--Go-zh</span></span><br><span class="line">      |<span class="comment">--shure</span></span><br><span class="line">        |<span class="comment">--mathapp</span></span><br><span class="line">          |<span class="comment">--main.go </span></span><br><span class="line">        |<span class="comment">--mymath</span></span><br><span class="line">          |<span class="comment">--sqrt.go</span></span><br><span class="line">    |<span class="comment">--hello</span></span><br><span class="line">      |<span class="comment">--hello.go</span></span><br></pre></td></tr></table></figure><h2 id="参考与相关链接"><a href="#参考与相关链接" class="headerlink" title="参考与相关链接"></a>参考与相关链接</h2><p>参阅书籍：《Go Web 编程》</p><p>go 官方教程：<a href="https://tour.golang.org" target="_blank" rel="noopener">https://tour.golang.org</a></p><p>go 中文版教程本地安装：<a href="https://github.com/Go-zh/tour" target="_blank" rel="noopener">https://github.com/Go-zh/tour</a></p><p>go 中文版教程：<a href="http://tour.go-zh.org" target="_blank" rel="noopener">http://tour.go-zh.org</a></p><p>本教程 github 地址：<a href="https://github.com/dddreams/go-tutorial" target="_blank" rel="noopener">https://github.com/dddreams/go-tutorial</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果觉得文章对你有用，转发、分享、赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go教程-go环境搭建</title>
      <link href="/170904-go%E6%95%99%E7%A8%8B-go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
      <url>/170904-go%E6%95%99%E7%A8%8B-go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p></blockquote><p>这一节我们开始环境搭建</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可在官网下载安装 golang <a href="https://golang.org/" target="_blank" rel="noopener">(https://golang.org/)</a></p><p>由于 Google 在国内的限制，需要科学上网方可访问官网，也可以访问中文版的文档 golang <a href="http://docscn.studygolang.com/" target="_blank" rel="noopener">（http://docscn.studygolang.com/）</a>，Linux，Mac 用户按照文档上的提示安装即可。Windows 用户更简单，下载安装包一路 next 便可。</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>Linux，Mac 用户</p><p>若安装在 <code>/usr/local/go</code> 目录，要将 <code>/usr/local/go/bin</code> 添加到 PATH 环境变量， 你需要将此行添加到你的 <code>/etc/profile</code>（全系统安装）或 <code>$HOME/.profile</code> 文件中：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/usr/local/go/bin</span></span><br></pre></td></tr></table></figure><p>若安装指定目录，你需要设置 GOROOT 环境变量来指定安装位置。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOROOT</span>=<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$GOROOT/bin</span><br></pre></td></tr></table></figure></p><p>注：要使环境变量生效，你需要重启所有打开的终端。</p><p>Windows 用户：</p><p>一般情况 Windows 安装后会自动添加至 path 中，无需配置，可以使用 <code>go env</code> 命令查看，该命令会提示 GOROOT, GOPATH 等变量，若能看到这些变量，说明已将 go 目录添加到 path 环境中。若报错，需要新建环境变量 <code>GOROOT</code> 值为 go 的安装路径，并将 GOROOT 添加至 path 中，<code>$GOROOT/bin</code> </p><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><p>新建一个 hello.go 的文件，文件内容为：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"hello, world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用 go 工具运行它：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="keyword">run</span><span class="bash"> hello.go</span></span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure></p><p>若看到 <code>hello world</code> 字样，说明已经安装成功。</p><h2 id="卸载或更新-Go"><a href="#卸载或更新-Go" class="headerlink" title="卸载或更新 Go"></a>卸载或更新 Go</h2><p>要从你的系统中移除既有的Go安装，需删除 go 目录。 在 Linux、Mac OS X、和 FreeBSD 系统下通常为 /usr/local/go， 在 Windows 下则为 c:\Go。</p><p>你也应当从你的 PATH 环境变量中移除 Go 的 bin 目录。 在 Linux 和 FreeBSD 下你应当编辑 /etc/profile 或 $HOME/.profile。 若你是通过Mac OS X 包安装的 Go，那么你应当移除 /etc/paths.d/go 文件。Windows 下删除环境变量即可。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>golang 官网 <a href="https://golang.org/" target="_blank" rel="noopener">https://golang.org/</a></p><p>中文版文档 <a href="http://docscn.studygolang.com/" target="_blank" rel="noopener">http://docscn.studygolang.com/</a></p><p>本教程 Github 地址 <a href="https://github.com/dddreams/go-tutorial" target="_blank" rel="noopener">https://github.com/dddreams/go-tutorial</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果觉得文章对你有用，转发、分享、赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go教程-GO语言简介</title>
      <link href="/170905-go%E6%95%99%E7%A8%8B-GO%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B.html"/>
      <url>/170905-go%E6%95%99%E7%A8%8B-GO%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>与其站在选择的路口踟蹰，不如大胆地Just Go!</p></blockquote><p>很早之前就想学习 go 语言了，今天终于开了个头，以教程的形式记录在此。纵观编程教程史，大多数的教程开篇便是环境搭建和最为经典的入门程序 <code>Hello World</code> ,我也不例外，按照惯例来，先从简介与环境搭建开始。</p><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>Go 语言起源 2007 年，并于 2009 年正式对外发布。在 2010 年 1 月 8 日被 Tiobe（闻名于它的编程语言流行程度排名）宣布为 “2009 年年度语言”。</p><p>在 Go 语言出现之前，开发者们总是面临非常艰难的抉择，究竟是使用执行速度快但是编译速度并不理想的语言（如：C++），还是使用编译速度较快但执行效率不佳的语言（如：.NET、Java），或者说开发难度较低但执行速度一般的动态语言呢？显然，Go 语言在这 3 个条件之间做到了最佳的平衡：快速编译，高效执行，易于开发。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>构建速度<br>动态语言将快速编译作为自身的一大亮点，像 C++ 那样的静态语言一般都有非常漫长的编译和链接工作。而同样作为静态语言的 Go 语言，通过自身优良的构建机制，成功地去除了这个弊端，使得程序的构建过程变得微不足道，拥有了像脚本语言和动态语言那样的高效开发的能力。Go 语言中另一个非常重要的特性就是它的构建速度（编译和链接到机器代码的速度），一般情况下构建一个程序的时间只需要数百毫秒到几秒。C 语言中“头文件”的概念却导致越来越多因为依赖关系而使得构建一个大型的项目需要长达几个小时的时间，而Go 语言采用包模型这个模型通过严格的依赖关系检查机制来加快程序构建的速度，提供了非常好的可量测性。</li><li>垃圾回收<br>由于内存问题（通常称为内存泄漏）长期以来一直伴随着 C++ 的开发者们，Go 语言的设计者们认为内存管理不应该是开发人员所需要考虑的问题。因此尽管 Go 语言像其它静态语言一样执行本地代码，但它依旧运行在某种意义上的虚拟机，以此来实现高效快速的垃圾回收.</li><li>协程与通道<br>Go 语言的另一个目标是对于网络通信、并发和并行编程的极佳支持，从而更好地利用大量的分布式和多核的计算机，这一点对于谷歌内部的使用来说就非常重要了。设计者通过 goroutine 这种轻量级线程的概念来实现这个目标，然后通过 channel 来实现各个 goroutine 之间的通信。他们实现了<strong>分段栈增长</strong>和 <strong>goroutine </strong>在线程基础上多路复用技术的自动化。</li></ul><p>参考链接: <a href="https://segmentfault.com/a/1190000005666535" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005666535</a></p><h2 id="平台支持"><a href="#平台支持" class="headerlink" title="平台支持"></a>平台支持</h2><p>Go语言设计支持主流的32位和64位的x86平台，同时支持在 Windows, 苹果Mac OS X, Linux 和 FreeBSD 操作系统。</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>LiteIDE 是一款专门为Go语言开发的跨平台轻量级集成开发环境（IDE），由QT编写。<a href="https://github.com/visualfc/liteide" target="_blank" rel="noopener">下载 https://github.com/visualfc/liteide</a></p><p>其他主流的开发工具几乎都支持 GO 语言的开发，包括 Sublime text , Eclipse, IntelliJ Gogland 和 VIM 等。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>Gogland 官网 <a href="https://golang.org/doc/" target="_blank" rel="noopener">https://golang.org/doc/</a></p><p>知乎 <a href="https://www.zhihu.com/topic/19625982/hot" target="_blank" rel="noopener">https://www.zhihu.com/topic/19625982/hot</a></p><p>推荐阅读 《Go语言圣经》<a href="http://pan.baidu.com/s/1kUCuB1X" target="_blank" rel="noopener">百度网盘</a> 提取密码： 6vkg</p><p>本教程 Github 地址 <a href="https://github.com/dddreams/go-tutorial" target="_blank" rel="noopener">https://github.com/dddreams/go-tutorial</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果觉得文章对你有用，转发、分享、赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公众号接入聊天机器人的通知</title>
      <link href="/170829-%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A5%E5%85%A5%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E9%80%9A%E7%9F%A5.html"/>
      <url>/170829-%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A5%E5%85%A5%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E9%80%9A%E7%9F%A5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>世界尽头的地方，是雄狮落泪的地方，是月亮升起的地方，是美梦诞生的地方。</p></blockquote><p>一直以来，我都希望有人在公众号后台留言，但是留言的人没有几个，更多的原因是由于我公众号用户群体的差异化所导致，对于很多话题不感兴趣，不过我还是会一如既往的写我自己感兴趣的东西，折腾自己感兴趣的技术或者工具。</p><h2 id="图灵机器人的接入"><a href="#图灵机器人的接入" class="headerlink" title="图灵机器人的接入"></a>图灵机器人的接入</h2><p>前段时间我在一篇文章 <a href="/170714-学习英语的重要性.html">学习英语的重要性</a> 的文章中提到要做一个聊天的小程序，但是对于小程序自己没有实际的做过，学习起来需花费一定的时间，所以我在公众号的后台接入了图灵机器人聊天程序，感兴趣的可以在后台发消息体验。可以提一些问题，查询日常的公交，天气，翻译等等。</p><p><img src="images/20170829/20170829204618.png" alt="1"><br><img src="images/20170829/20170829204717.png" alt="2"></p><p>哈哈，是不是很神奇呢！快来试试吧！</p><h2 id="zhiheng聊天"><a href="#zhiheng聊天" class="headerlink" title="zhiheng聊天"></a>zhiheng聊天</h2><p>上面也提到了，由于微信小程序花费的时间比较多，于是我做了一个 web 端的 zhiheng 聊天程序，地址在 <a href="http://shure.coding.me/zhihengs-blog/html/chat_with_english.html" target="_blank" rel="noopener">zhiheng 聊天</a>, 贴一张聊天的效果图</p><p><img src="images/20170829/20170829205119.png" alt="zhiheng聊天"></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="../img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:20 0;">如果觉得文章对你有用，转发、分享、赞赏才是真爱 [斜眼笑]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次亲子旅行</title>
      <link href="/170818-%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BA%B2%E5%AD%90%E6%97%85%E8%A1%8C.html"/>
      <url>/170818-%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BA%B2%E5%AD%90%E6%97%85%E8%A1%8C.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>大自然中的各种现象，包括小鸟、小溪、水仙和绵羊，都是不可或缺的，因为它们能矫正和治疗城市人倍感困顿的心灵。</p></blockquote><p><em>版权声明：本文为朋友圈转载文章，未经博主允许不得转载。</em></p><p>关于带孩子旅游，说法颇多，尤其是婴幼儿的旅游。很多人认为孩子太小，没有出行的意义和必要，所谓玩也不会，看了也记不住，倒是舟车劳顿，四处颠簸，影响孩子的吃食，睡眠，加上小孩子适应能力有限，感冒拉肚的实在让孩子遭罪。</p><p><img src="/images/20170818/img_1516_min.jpg" alt="兜兜"></p><p>去年暑期，我们是在兜兜1岁半的时候去的北京。在纠结了很久飞机到底对婴儿耳朵有没有影响，还是大包小包的去了，奶粉奶瓶尿裤纸巾，枕头衣服药品辅食，我们俩只带了一套衣服就已经累趴了，刚会走路不久的跌跌撞撞大部分还得靠人肉背抱，不知道他看到了些什么，只记得对地铁里的拉手炒鸡感兴趣，哪管他人多拥挤，自顾自的攀上爬下，一言不合就让哭喊声响彻所及之处，八月份的北京，实在热的难受，室内外温差太大，他很快就感冒了，北京儿科的拥挤可以想象，所以去年的出行就只留下天安门前的一张照片而已，一路心酸使我和老公不约而同的发誓，在六岁之前绝不再带他出门！</p><p><img src="/images/20170818/img_1517_min.jpg" alt="兜兜"></p><p>可是没多久我们就食言了，我一方面是打着孩子的旗号满足自己的玩心，另一方面我还是认为多些见闻和刺激是有益的，不在于他记住了些什么，或者学会了描述什么，只要能遵从他的好奇心，体验到过程的愉悦甚至是不悦就是好的，我认可“修剪理论”的合理性。更重要的是旅行不是一种虚荣和攀比，更不能功利，两个人的旅行会很惬意，三个人的旅行很深邃，爸爸的深度参与会是高质量的陪伴。</p><p><img src="/images/20170818/img_1518_min.jpg" alt="兜兜"></p><p>今年2岁半的出行顺利了很多，简易手推车解放了我们的双手，随时随地倒头就睡，完全不需要绘本儿歌故事之类的哄睡伎俩，睡醒了满血复活继续游山玩水。带孩子离开日常生活的场所，让他认识家人以外的人感觉也很奇妙，在火车站，我们等车等的极不耐烦的时候，他跟一对大学生情侣玩的笑声震天，孩子带给我们的体验是多维的。</p><p><img src="/images/20170818/img_1519_min.jpg" alt="兜兜"></p><p>虽然不赞成乐嘉的沙漠徒步教育，但我认为力所能及的情况下，带孩子旅行是可以提倡的，辛苦是必然的，收获也是满满的。</p><p><img src="/images/20170818/img_1521_min.jpg" alt="兜兜"><br><img src="/images/20170818/img_1522_min.jpg" alt="兜兜"></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google 又多了两位大牛</title>
      <link href="/170816-Google-%E5%8F%88%E5%A4%9A%E4%BA%86%E4%B8%A4%E4%BD%8D%E5%A4%A7%E7%89%9B.html"/>
      <url>/170816-Google-%E5%8F%88%E5%A4%9A%E4%BA%86%E4%B8%A4%E4%BD%8D%E5%A4%A7%E7%89%9B.html</url>
      
        <content type="html"><![CDATA[<blockquote><p> 编程是 10% 的科学，20% 天份，和 70% 的让这天份符合科学。</p></blockquote><p>昨天在刷公众号时，看到一篇文章<a href="https://www.oschina.net/news/87741/chris-lattner-join-google-brain" target="_blank" rel="noopener">Swift 语言之父 Chris Lattner 宣布加入 Google</a>, 让我想起前段时间 Android 大神 <a href="http://jakewharton.com/" target="_blank" rel="noopener">Jake Wharton</a> 发推加入 Google 的消息。</p><h2 id="传说中的-J-神-Jake-Wharton"><a href="#传说中的-J-神-Jake-Wharton" class="headerlink" title="传说中的 J 神 Jake Wharton"></a><a href="http://jakewharton.com/" target="_blank" rel="noopener">传说中的 J 神 Jake Wharton</a></h2><p><img src="images/20170816/201708161148.png" alt="Jake Wharton"></p><p>J 神加入 Google 的推<br><img src="images/20170816/201708161149.jpg" alt="神加入 Google 的推"></p><h2 id="Swift-语言之父-Chris-Lattner"><a href="#Swift-语言之父-Chris-Lattner" class="headerlink" title="Swift 语言之父 Chris Lattner"></a><a href="http://nondot.org/sabre/" target="_blank" rel="noopener">Swift 语言之父 Chris Lattner</a></h2><p><img src="/images/20170816/201708161151.png" alt="Swift 语言之父 Chris Lattner"></p><p>就在昨天 Chris Lattner 发推表示加入 Google ，专攻机器学习和人工智能。<br><img src="/images/20170816/201708161150.jpg" alt="Chris Lattner"></p><p>Google 还是那么牛X，相信未来的 Android 会超过 IOS　做的更好。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习英语的重要性</title>
      <link href="/170714-%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7.html"/>
      <url>/170714-%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>没有一个大学，是比拥有我们从未使用过的能力的大自我和人类意志与理智所创造的现实，更能包罗万象的了</p></blockquote><h3 id="one"><a href="#one" class="headerlink" title="one"></a>one</h3><p>今天给大家分享一个老生常谈的话题 [ 英语 ]，不知道大家是什么时候开始学英语的，我记得我是在小学五年级就开始学英语了，算下来也有十几年了吧，然而自己还是一个英盲。</p><h3 id="two"><a href="#two" class="headerlink" title="two"></a>two</h3><p>为什么说学习英语的重要性呢，前段时间跟着帅比张[stormzhang]领略了 google IO 大会，后来找了视频看了，结果一脸懵逼，听不懂人家在说什么，顿时觉得 low 爆了。另外，自己平时也经常刷 github 和 stackoverflow ，github 相对来说简单一些，看代码什么的也还能看懂一些，但是 stackoverflow 上的好多答案，着实让人头疼，看问题就是自己想要的结果可就是看不懂答案，也是一脸懵逼。记得上次培训时，老师说过一句话，中国是一个制造大国，而不是一个创造大国，很多有创意的产品都源于国外，因此想要看最原始的一手资料，那还是官方文档，但是很多官方文档都是英文的[再次懵逼]。</p><h3 id="three"><a href="#three" class="headerlink" title="three"></a>three</h3><p>那么要说学习英语，还是要从日常学起，浏览网页，推荐一款 chrome 插件，<a href="https://chrome.google.com/webstore/detail/eopjamdnofihpioajgfdikhhbobonhbb" target="_blank" rel="noopener">有道翻译</a>，可以划词翻译，对于浏览英文网站很有帮助。昨天帅比张[stormzhang]还在公众号上发表一篇文章<a href="http://mp.weixin.qq.com/s/WMuYUJxX-HG-wwKRtpbuIg" target="_blank" rel="noopener">发现三个很赞的英语学习网站</a>,推荐了三个学习英语的网站，大家可以去专注看看。我呢，今天也给大家一款 app ，用它来学习英语，也是很不错的，叫做 [HelloTalk] 的社交软件，你可以添加外国友人一起聊天，可以和一些也正在学习英语的人一起学习，可以练习口语等，可以发表动态，而且自带翻译，不过每天翻译次数有限，最让我看好的是别人可以指出你的动态中错误的语法并指正，这样学习起来不觉得枯燥，感觉挺好的，有需要的可以自己搜索下载哦。</p><h3 id="four"><a href="#four" class="headerlink" title="four"></a>four</h3><p>最近有了一个不错的想法，也是与英语有关，想做一个 app，但是学习成本有点大，于是就转战了微信小程序了，近期也正在学习，微信小程序的开发，具体是什么我就不透漏了，等做好了会关联在我的公众号上，到时候大家可以多多使用。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一周美图分享</title>
      <link href="/170713-%E4%B8%80%E5%91%A8%E7%BE%8E%E5%9B%BE%E5%88%86%E4%BA%AB.html"/>
      <url>/170713-%E4%B8%80%E5%91%A8%E7%BE%8E%E5%9B%BE%E5%88%86%E4%BA%AB.html</url>
      
        <content type="html"><![CDATA[<p>已经有好长时间没写了，一是最近工作比较忙，每天加班；二是自己有一些事，以至于周末也没有更新。近期也没有什么好的内容去分享，今天来分享一个好玩的小程序。</p><p>先上一组图<br><img src="/images/20170713/201707131938.jpg" alt="美图"></p><p>不错这是一组图片生成的长图，今天分享的就是生成长图的小程序 [微软小蜜]，看这个名字就知道很不错了吧，微软的产品，不会差到哪去，有兴趣的伙伴们可以在微信小程序中搜索，至于使用方法简单的不能在简单了，请自行使用吧。</p><p>ps：图片来源与必应搜索首页，纯属爱好不做商业使用。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> Photo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Windows 上使用 Ubuntu 是一种怎么的体验</title>
      <link href="/170620-%E5%9C%A8-Windows-%E7%B3%BB%E7%BB%9F%E4%B8%8A%E4%BD%BF%E7%94%A8-Ubuntu-%E6%98%AF%E7%A7%8D%E6%80%8E%E4%B9%88%E7%9A%84%E4%BD%93%E9%AA%8C.html"/>
      <url>/170620-%E5%9C%A8-Windows-%E7%B3%BB%E7%BB%9F%E4%B8%8A%E4%BD%BF%E7%94%A8-Ubuntu-%E6%98%AF%E7%A7%8D%E6%80%8E%E4%B9%88%E7%9A%84%E4%BD%93%E9%AA%8C.html</url>
      
        <content type="html"><![CDATA[<p>自从 Windows 10 问世以来，大家对 Windows 的吐槽变得没那么多了，不过说真的 Windows 10 的却改变了不少，扁平化的界面，全新的开始菜单，智能助手小娜，内置的应用商店，以及 Edge 浏览器，这些都让用户觉得耳目一新。虽然还有很多使用 Mac 的土豪用户和一些用着 Windows 还骂着 Windows 的吃瓜群众在吐槽，但是不得不说微软还是那个世界上科技技术的领头羊。</p><h2 id="Bash-on-ubuntu-on-Windows"><a href="#Bash-on-ubuntu-on-Windows" class="headerlink" title="Bash on ubuntu on Windows"></a>Bash on ubuntu on Windows</h2><p>今天来说说 Win10 内置的一个屌炸天的功能，Windows 上使用 Ubuntu 系统，这是 Windows 上为开发人员提供的 Bash shell 和 linux 环境，你可以直接在 Windows 上运行大多数 Linux 命令行工具，而告别臃肿的 VM。它可以使用 Linux 兼容的文件系统和层次结构，来访问固定的 Windows 存储，可以使用 vim， tmux 等工具，可以使用 javascript，node.js，Ruby，Python，C/C++等编程语言。看到这里是不是有一种马上要体验一下的冲动，好吧，让我带你装逼带你飞吧！</p><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>首先安装 Bash 对系统的要求：</p><ul><li>你的系统必须是 64 为的操作系统</li><li>你的 Windows 版本必须 &gt;= 14393 （如果版本低于 14393 请检查更新）</li></ul><p><img src="/images/20170620/20170620160122.png" alt="系统要求"></p><h2 id="简单设置"><a href="#简单设置" class="headerlink" title="简单设置"></a>简单设置</h2><p>打开开发人员模式，系统设置 –&gt; 更新和那全 –&gt; 针对开发人员 –&gt; 选中开发人员模式</p><p><img src="/images/20170620/20170620160822.jpg" alt="开发人员模式"><br></p><p>启用Windows Subsystem for Linux功能，在开始菜单上右击 –&gt; 搜索 –&gt; 启用或关闭 Windows 功能 –&gt; 勾选 Windows Subsystem for Linux (beta)</p><p><img src="/images/20170620/windowsfeatures.png" alt="启用Windows Subsystem for Linux功能"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>以管理员身份打开 PowerShell 运行下面命令<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span></span><br></pre></td></tr></table></figure></p><p>系统会提示重启系统，点击是，重新启动。</p><p>启动之后，打开命令行工具，运行 <code>bash</code> 命令<br><img src="/images/20170620/bashshellinstall.png" alt="接受许可"></p><p>接受许可后，将下载Ubuntu用户模式映像，并在开始菜单中添加“Bash on Ubuntu on Windows”快捷方式。</p><p>至此，Bash on ubuntu on Windows 就安装好了，你就可以在 Windows 系统上尽情的玩耍 Ubuntu 系统了。</p><p>注意：你第一次安装 Bash on Windows 的时候，会被提示设置一个用户名密码，这个用户名密码是 Ubuntu使用的，和 Windows 系统的用户名密码没有任何关系。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信，你还不知道的那些逆天功能</title>
      <link href="/170618-%E5%BE%AE%E4%BF%A1%EF%BC%8C%E4%BD%A0%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E9%80%86%E5%A4%A9%E5%8A%9F%E8%83%BD.html"/>
      <url>/170618-%E5%BE%AE%E4%BF%A1%EF%BC%8C%E4%BD%A0%E8%BF%98%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E9%80%86%E5%A4%A9%E5%8A%9F%E8%83%BD.html</url>
      
        <content type="html"><![CDATA[<p>今天是父亲节，祝愿我们的父母身体安康，生活美满，也祝在我圈内的准父亲们节日快乐。借着今天这个节日，来扯扯微信那些逆天的功能。</p><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p>我想这个应该不用介绍了吧，从今年年初就已经火爆了整个互联网，虽然微信一直在很低调的更新完善着小程序，但是也已经火的一塌糊涂了。不过遗憾的是，我发现还有好多人的微信“发现”中没有小程序的入口，如果说是平常人，也就不说什么了，可是我发现的是我的几个同事，算得上是业内人士了，这就让人有点尴尬了，所以我觉得有义务给大家安利一哈了。</p><p>看下面的截图，如果在微信的“发现”中没有小程序，那么说明你还没有使用过小程序<br><img src="/images/20170618/20170618175702.png" alt="小程序截图"><br>那么如何开启小程序呢，很简单扫一扫下面的二维码，打开微信官方的辟谣小程序，退出去再看，小程序的入口就有了。<br><img src="/images/20170618/20170618175714.jpg" alt="微信辟谣小程序"><br>这个也是今天我要推荐的小程序，它是微信官方的辟谣小程序，你可以通过关键字搜索看有哪些文章是谣言，也可以你阅读的谣言次数，有了它妈妈再也不会担心你阅读的文章是不是真的了。</p><h2 id="搜一搜-amp-看一看"><a href="#搜一搜-amp-看一看" class="headerlink" title="搜一搜 &amp; 看一看"></a>搜一搜 &amp; 看一看</h2><p>搜一搜，看一看是微信的实验室功能，看下面的图，如果你的微信“发现”中没有搜一搜和看一看的标签，那么说明你还没有开启微信实验室功能。<br><img src="/images/20170618/201706181831.png" alt="搜一搜 &amp; 看一看"><br>开启搜一搜，看一看的功能在微信 【设置】–【实验室】–【搜一搜】/【看一看】小伙伴们可以选择开启。是不是顿时觉得微信要逆天了，这是想抢百度，头条的饭碗啊。</p><h2 id="通过微信读书阅读公众号文章"><a href="#通过微信读书阅读公众号文章" class="headerlink" title="通过微信读书阅读公众号文章"></a>通过微信读书阅读公众号文章</h2><p>有没有遇到这种情况，你正在读公众号文章，突然来微信消息了，你要点击返回到消息界面，回复完消息，然后再找到刚才阅读了的公众号，打开继续阅读，虽然微信做了优化，重新打开时定位在了刚才阅读的位置，可是消息又来了，又返回，又要找公众号，是不是很烦人，如果你也是一个公众号党，而且经常也遇到这种烦人的情况，那么告诉你，你的福音来了。我们可以通过微信读书来阅读微信公众号文章，微信读书相信大家并不陌生吧，在众多读书类软件中，微信读书可以算是佼佼者，最近又加入了声音阅读，那简直是又向完美更进了一步啊。闲话少说，来看看微信读书是怎么阅读公众号文章的.<br><img src="/images/20170618/20170618190322.png" alt="在微信读书中打开"><br>看到了吧，打开公众号文章，调出分享的上划菜单，在微信阅读中阅读，然后打开微信阅读，在书架中就有公众号阅读记录了。虽然这个功能还有很多不完善的地方，相信微信团队会进一步优化，达到你想要的便捷。</p><h2 id="保存你的聊天记录"><a href="#保存你的聊天记录" class="headerlink" title="保存你的聊天记录"></a>保存你的聊天记录</h2><p>当今的微信，已经是人们工作生活的必需品，相信很多人都将它作为工作中交流的工具，所以有时候简短的聊天记录就变的非常重要了，但是我们都知道微信的聊天记录是有期限的，会定期的删除以前的记录，为了保存重要的记录，我们来借助印象笔记保存。为什么选择印象笔记呢，因为印象笔记有独立的邮箱。其实微信收藏也可以保存聊天记录，只是微信收藏消息是一条一条收藏的，不利于日后查看。然而印象笔记可以保存多条在一篇日记中，同时也保存了聊天人的昵称和时间。</p><p>用印象笔记保存聊天记录需要几个前提条件：</p><ul><li>微信绑定印象笔记</li><li>QQ与微信绑定 （由于要用到 QQ 邮箱）</li><li>将印象笔记独立邮箱账号添加至 QQ 邮箱的通讯录中<br>万事俱备，只欠如何操作了，在聊天界面中长按消息，点击【更多】然后选中你要保存记录，点击分享按钮调出上划菜单，选择【添加至邮箱】，最后选择收件人为你印象笔记的独立邮箱账号，点击发送，就可以在印象笔记中查看你的聊天记录了。<br><img src="/images/20170618/20170618194322.png" alt="保存聊天记录至印象笔记"></li></ul><p>get 到新姿势的小伙伴们，赶快去试试吧 -_–</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI时代，真正体现人类智慧的时代</title>
      <link href="/170604-AI%E6%97%B6%E4%BB%A3%EF%BC%8C%E7%9C%9F%E6%AD%A3%E4%BD%93%E7%8E%B0%E4%BA%BA%E7%B1%BB%E6%99%BA%E6%85%A7%E7%9A%84%E6%97%B6%E4%BB%A3.html"/>
      <url>/170604-AI%E6%97%B6%E4%BB%A3%EF%BC%8C%E7%9C%9F%E6%AD%A3%E4%BD%93%E7%8E%B0%E4%BA%BA%E7%B1%BB%E6%99%BA%E6%85%A7%E7%9A%84%E6%97%B6%E4%BB%A3.html</url>
      
        <content type="html"><![CDATA[<p>早在 2014 年 5 月微软发布了一款智能伴侣虚拟机器人，名叫“微软小冰”，她可以和你聊天互动，并且有提醒，百科，天气，交通等功能，从那时起人工智能渐渐进入了普通人的生活，后来相继出现了图灵机器人、小黄鸡还有百度推出的“度秘”等等，这些仅仅是人工智能的一小部分。</p><p>前段时间人们一直关注的 Google AlphaGo 与围棋世界冠军何洁的对战，AlphaGo 4：0 战胜何洁，据说战胜何洁的 AlphaGo 比去年战胜李世石的 AlphaGo 有着根本的不同，比去年的 AlphaGo “强三子”，“强三子”是什么意思呢，就是说让对方先落三子，可想而知 AlphaGo 在一年内的成长是惊人的，使用的算法更优，计算速度更快。在这个大数据的时代，计算速度预示着人们能够处理超大数据量的能力，而且新一代的 AlphaGo 不在使用 3000万的棋谱进行训练，要知道优质的数据是机器学习不可或缺的核心条件，然而 Google 就这么放弃了，而且计算效率更快，这就是我一直崇尚的 Google 。</p><p>AlphaGo 是如何决定落子的。也许大家都在疑惑，它是如何决定落子的，其实棋局的信息相当于输入信息，AlphaGo 会根据策略网络探索哪个位置同时具备高潜在价值和高可能性，进而决定最佳落子位置。在分配的搜索时间结束时，模拟过程中被系统最频繁考察的位置将成为 AlphaGo 的最终选择。在经过先期的全盘探索和过程中对最佳落子的不断揣摩后，AlphaGo的搜索算法就能在其计算能力之上加入近似人类的直觉判断。</p><p>同时 AI 也是 Google IO 大会的另一个主题，Google 发布的集成了 Google Assistant 的 Google Home ，一款居家的智能音响，说是参加了今年的 Google IO 大会的人都送了一个 Google Home，让我心动了好久，但是参加 Google IO 大会可真是有困难的，不说要花费多少，就算有钱也不一定可以参加。</p><p>没过多久，苹果公司开了 WWDC 大会，同样也发布了一款叫做 HomePod 的智能音响，用户可以利用“Hey Siri”唤醒HomePod，获取天气、新闻和交通等热点信息，也可以利用语音指令控制连接到HomePod上的其它 HomeKit 智能家居产品，当然你也可以像其它智能音箱一样，搜索查询需要的内容。</p><p>所以我说 AI 时代，是真正体现人类智慧的时代，未来的机器将会像人一样思考，学习，或许像人类一样有感情也不是没有可能，因为真正的智慧是人类创造的。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听说Kotlin比Java更优雅</title>
      <link href="/170519-%E5%90%AC%E8%AF%B4Kotlin%E6%AF%94Java%E6%9B%B4%E4%BC%98%E9%9B%85.html"/>
      <url>/170519-%E5%90%AC%E8%AF%B4Kotlin%E6%AF%94Java%E6%9B%B4%E4%BC%98%E9%9B%85.html</url>
      
        <content type="html"><![CDATA[<p>一夜之间 Kotlin 变得比 Java 更优雅了，也许是自己太 low 了，之前还没听过 Kotlin 这个语言呢。然而，从昨天开始 Kotlin 的教程、文档、博客就在各大论坛火热了起来，原因是 18 号的 Google IO 大会，大会的亮点我就在不罗嗦了，微博、公众号上都已经传遍了，Kotlin 就是其中的亮点之一，Google 把 Kotlin 作为 Android 开发的官方语言，并在 Android Studio 3.0 默认集成 Kotlin plug-in。在我看来 Kotlin 有 Google，Android 的撑腰，相信不会死的很快。</p><p>那么，我们就来看看 Kotlin 是不是比 Java 更优雅呢</p><p>Kotlin 是一个基于 JVM 的编程语言，由 JetBrains 开发，它可以编译成 Java 字节码，也可以编译成 JavaScript ，方便在没有 JVM 的设备上运行，是一种兼容 Java 的语言，类似于 Scala ，曾经有人试图用 Scala 来开发 Android 应用，但是确实非常头疼，因为你需要发布运行库。但是在 Android 的世界里，Kotlin 已经不是什么新鲜事了，早先就有人预测 Kotlin 将会是 Android 的主流开发语言，不料，现在已经实现了。</p><p>优雅的 Hello World<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到了没，没有 class ,没有 static 的 main 方法，自定义一个求和方法 sum<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一种简写的形式<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br></pre></td></tr></table></figure></p><p>是不是看上去很优雅，调用 sum 方法<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(sum(<span class="number">3</span>, <span class="number">5</span>))   <span class="comment">// 输出 8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还可以这样写</span></span><br><span class="line">    println(<span class="string">"sum of 3 and 5 is <span class="subst">$&#123;sum(<span class="number">3</span>, <span class="number">5</span>)&#125;</span>"</span>) <span class="comment">// 输出 sum of 3 and 5 is 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>机智的 boy 已经发现，代码不以分号结尾，变量类型和方法返回值类型在后面，还有类似 JavaScript 的字符串模板等等。是的，Kotlin 的语法借鉴了很多函数式编程语言的特性，你会发现它和 Go，swift 语言也很相似，这说明 Kotlin 也借鉴了众多新诞生的编程语言的新特性，再加上 Google 的支持，很显然它将是未来主流。</p><p>另外，Kotlin 和 Java 完全兼容，这也可能是 Google 选择 Kotlin 的原因之一，它可以完全兼容 Java ，对于旧的应用而言就不用花费时间精力去将应用之前的代码转换为 Kotlin 了，毕竟替换旧代码也是一个非常浩大的工程。</p><p>最后附上 Kotlin 的官方中文教程 <a href="http://www.kotlincn.net/docs/reference/" target="_blank" rel="noopener">http://www.kotlincn.net/docs/reference/</a></p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以正确的姿势庆祝母亲节</title>
      <link href="/170514-%E4%BB%A5%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%BA%86%E7%A5%9D%E6%AF%8D%E4%BA%B2%E8%8A%82.html"/>
      <url>/170514-%E4%BB%A5%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%BA%86%E7%A5%9D%E6%AF%8D%E4%BA%B2%E8%8A%82.html</url>
      
        <content type="html"><![CDATA[<p>今天是母亲节，祝天下母亲节日快乐，也祝自己母亲身体健健康康，平平安安的，在这我也想告诉您，您牵挂的孩子们都好，勿念！</p><p>小时候不知道有这个节日，也不知道是什么时候知道的，记得好像是有了手机，有了互联网，这个节日便在国内盛行了起来。每当这个节日的时候网络上都会掀起一波母亲热，今年也是一样，万能的朋友圈已经无力吐槽，不管是出于什么目的，让人们记住这个节日也不算是坏事。</p><p>说起手机，尤其是近几年智能手机几乎是覆盖了所有人，也包括我们的父母在内。今年过年的时候，父亲抱着手机让我外甥教他怎么玩微信，怎么聊天，我也给他教怎么安装软件，怎么下载电影。以前父亲特别爱看电视，几乎每天下班都趴在电视前面，现在倒好，学起了年轻人，成了低头族。</p><p>父亲经常抱怨，手机用着用着就卡了，或者是花费刚交上就没了，我看他手机才发现，安装了 N 多个不知名的软件，而且同时开启着很多后台应用，他说他也不知道怎么就安装上了，更糟糕的是消息栏中，各种信息，非常 6+1 中奖的，胡汉三搞笑小品，某某村儿童走丢的，央求转发，某地感染H7N9的，提醒鸡肉不能吃了的，应有尽有。不错，信息时代，信息很重要，然而垃圾信息实在太多了。对于我们的父母，能否识别信息的真伪，这个很难说；接到诈骗短信给打钱的，接到中奖短信预支付的不是没有发生过。</p><p>所以，我想说的是，借这个母亲节，给咱们父母提个醒：</p><p>1、如果接到涉及人身安全，及钱财的短信或者陌生电话，务必打电话确认是否真实，并且一定要在确认真实以后再做后续事项（比如打钱等）。<br>2、如果接到中奖、某某膏药能治百病类似这样的短信或者消息，直接忽略，并将其拉黑。<br>3、如果接到急救、求助、借钱的短信或者陌生电话，务必打电话确认是否是自己的亲人或者朋友，再做后续事项。<br>4、如果看到感染H7N9病毒，禽流感之类的，不必惊慌，看看电视新闻有没有报道，如果没有直接忽略。<br>5、如果看到搞笑视频，敏感话题之类的，建议不用看，一般都是标题党（利用醒目的标题来赚取用户的点击量）<br>6、如果在某消息中包含卸载链接，不要点，一般都会是垃圾软件包，或者病毒文件，或者某某炫酷的网站（骗取用户点击量）<br>7、对于新闻的真伪，要以电视新闻节目为准，或者正规的新闻机构为准，不要完全相信别人转发或者某某头条推送的新闻。<br>8、下载软件，要在正规的软件市场，下载正规的有一定知名度的软件。<br>9、看电影，听音乐也要在正规的有一定知名度的官方 APP 上。</p><p>目前就想到这么多，若大家有其他想提醒的事项，可以在我微信上私信给我。也可以转发给自己的父母，以后遇到如上的信息，可以辨别信息是否虚假，以防上当受骗。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息时代，网络威胁离我们很近</title>
      <link href="/170513-%E4%BF%A1%E6%81%AF%E6%97%B6%E4%BB%A3%EF%BC%8C%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E7%A6%BB%E6%88%91%E4%BB%AC%E5%BE%88%E8%BF%91.html"/>
      <url>/170513-%E4%BF%A1%E6%81%AF%E6%97%B6%E4%BB%A3%EF%BC%8C%E7%BD%91%E7%BB%9C%E5%A8%81%E8%83%81%E7%A6%BB%E6%88%91%E4%BB%AC%E5%BE%88%E8%BF%91.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直比较忙，公司派去出差，在火车上晃荡了几天，感觉有些累，因此这段时间一直没有更新文章，幸好这周双休有时间来写写。首先要感谢在上期文章中赞赏的小伙伴，谢谢你的支持，虽然我不知道是谁；正是处于这个原因，我决定将付款的二维码去掉，并坚持写原创文章来获得微信公众号留言赞赏的功能。</p><h2 id="今天的话题"><a href="#今天的话题" class="headerlink" title="今天的话题"></a>今天的话题</h2><p>为什么要说网络安全呢，大家可能都觉得这个话题离自己很远，其实不然，就在昨天，国内各地许多高校以及很多医院中一些联网的电脑上突然出现了黑屏，屏幕上显示着一些字，大概的意思是：“你大可在网上找找恢复文件的方法，我敢保证，没有我们的解密服务，就算老天爷来了也不能恢复这些文件”，并给出了解决方案：“你需要给我们支付300美元等值的比特币，我们就会帮你解锁你的电脑，如果你不在三天内付款，那么你的解锁费用将会翻倍”，而且对于一些医疗机构索要的不仅仅是300美元的比特币，而是300比特币，约合350万人民币。据报道这次的网络攻击在全球内都有发生，包括英国，俄罗斯等国，并且还在不断扩散。如果在你电脑上出现了类似以上的情况，那么恭喜你，你不幸中标了。更不幸的是，对于黑客这样明目张胆的勒索，专家表示对于已经中毒的电脑，目前没有解决办法，而对于没有中毒的用户表示庆幸的同时，该对你的电脑加强防护了。</p><h2 id="电脑加强防护"><a href="#电脑加强防护" class="headerlink" title="电脑加强防护"></a>电脑加强防护</h2><p>在我身边的很多人，使用电脑的不在少数，但是懂得电脑防护和正确使用的人没有几个，今天我就列几个简单的电脑防护及使用电脑的方法：</p><ul><li>1、安装杀毒软件，比如:<br>   <strong>avast！</strong>（来自捷克，中文名为爱维士,已有数十年的历史，它在国外市场一直处于领先地位）<br>   <strong>Microsoft Security Essentials</strong>（微软自家的杀毒软件，占用资源较少，win10 自带）<br>   <strong>ESET NOD32</strong>（由ESET发明设计的杀毒防毒软件，是一个全球性的安全防范软件公司，主要为企业和个人消费者提供服务）<br>   <strong>Avira</strong>（一套由德国的Avira公司所开发的杀毒软件，中文名小红伞，一款知名的免费杀毒软件，用户超过七千万，在系统扫描、即时防护、自动更新等方面，表现都不输给知名的付费杀毒软件）<br>   <strong>金山毒霸</strong>（中国的反病毒软件）<br>   以上这几个杀毒软件是业界比较出名的，也是非常靠谱的，而且都有免费的版本。再不行安装个某某管家，某某安全卫士之类的，也比电脑裸奔的强。</li><li>2、Windows 系统会定期的发布系统补丁和漏洞，建议及时更新系统补丁。</li><li>3、下载软件、视频、音乐等文件尽量去官网下载。一般很多病毒都是附在一些不正规的软件或视频上的，用户只要下载了，就会激活病毒从而感染你的电脑。</li><li>4、.exe 的可执行文件，大小在 1M 以内要特别注意，一般都是捆绑了很多垃圾软件，只要你双击安装，就会给你莫名其妙的安装 N 多个软件。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>信息时代，网络威胁其实离我们很近，越来越多的网络终端设备，智能硬件等都已经离不开网络，尤其是一些医疗设备，银行终端，一旦受病毒感染，那么威胁的不仅仅是我们的财产，而且也会威胁到人们生命，因此，网络安全是一个不得不重视的问题，在这呢我也提醒大家，提高网络安全意识，养成良好的上网习惯，我们的网络环境还是很安全的。</p><p>扯淡完毕 ~_~~</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐自己的公众号</title>
      <link href="/%E6%8E%A8%E8%8D%90%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%AC%E4%BC%97%E5%8F%B7.html"/>
      <url>/%E6%8E%A8%E8%8D%90%E8%87%AA%E5%B7%B1%E7%9A%84%E5%85%AC%E4%BC%97%E5%8F%B7.html</url>
      
        <content type="html"><![CDATA[<p>没错，不用怀疑自己的眼睛，就是推荐自己的公众号，为自己打打广告，没办法啊关注的人太少，微信不给开留言评论功能，所以只能打广告拉人了，，，</p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>就在前几天苹果爸爸出新规定，导致微信关闭了IOS版微信公众号的赞赏功能，没办法啊，就连企鹅帝国也得妥协，微信官方给出提醒在阅读完公众号文章后，可以通过二维码转账的方式对公众号表示支持，这倒是给了我一个很好的启发，就是贴上付款二维码，就算微信不给我开留言评论赞赏功能也可以赞赏，因此在上一篇文章的最后我就贴上了转账二维码（温馨提示：最后贴的是转账二维码，大家看清楚想明白在扫）；更加让我意外的是尽然有人赞赏了，我兴冲冲的想看看是谁赞赏的，但是找了半天没找到付款的是谁，这就尴尬了，或许是我自己没找对地方还是什么原因，要是有哪位小伙伴知道的可以给我微信上说一哈。不过后来我也猜到是谁赞赏的了，估计她的赞赏不是因为文章写的好，而是由于特殊关系而赞赏的吧，在这我也提醒大家，赞赏是对优质文章的赞赏，是对作者的鼓励，要是觉得文章对你没什么用，就不用赞赏了。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>对于苹果禁止公众号“赞赏”功能，网上也众说纷纭，其中有种说法是，自从微信低调的推出小程序后，又紧接着开放个人开发者申请小程序，公众号关联小程序，公众号文章支持添加小程序等，这将公众号和小程序之间实现了无缝对接。目前已经有很多公司率先推出小程序，比如最近很火的摩拜单车，据悉，摩拜单车每周的使用量实现100%的增长，新用户提升了两倍，这些新用户几乎都来自小程序。不得不说小程序的出现引发了很多创业者的担忧，有人认为，小程序开放能力越强，其与苹果在流量渠道的竞争遍愈发激烈，关停赞赏功能只是一个表面现象，背后是生态控制力和入口的争端。</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>早在今年2月份就有人爆出，微信或将推出付费阅读，或者说付费阅读将是一个趋势，如今碎片化阅读，有质量有价值的内容越来越少，付费阅读是一个好的趋势，像小密圈的崛起，就是一个很好的诠释，所以苹果的这个做法矛头有点指向付费阅读。</p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>不管这些破事，还是给自己公众号做好广告，希望小伙伴们多多关注，我将更加努力写出更有价值的文章-_–</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号推荐</title>
      <link href="/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A8%E8%8D%90.html"/>
      <url>/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%8E%A8%E8%8D%90.html</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>早在2015年刚参加工作的时候，这个公众号就已经存在了，当时还不叫这个名字，本来是想做一个问答的公众号，最初集成了一些开放的 API 接口，提供了一些常用的服务，比如：天气，快递，火车票等的查询，但是由于种种，放弃了这种想法，因此这些服务都已经下线。现在只是一个类似与博客的公众号，平时写写文章、总结一些经验、积累一些技术等。它提供了一个写作的平台，我是喜欢写一些东西的，只是工作之后时间越来越少，没有坚持一直写，还有一个原因就是坚持不了，每次写的时候都感觉没什么可写，这也是很多童鞋在运营公众号的时候遇到的问题，坚持不下来。</p><p>运营期间我关注了很多公众号，想借鉴借鉴别人是怎么坚持的，也有一些技术类公众号，碎片化阅读，公众号是一个不错的选择。今天所推荐的这些公众号我几乎每天都会看的，所以推荐给大家。说明一下，绝不是为别人做广告，只是觉得他们的文章不错，仅此而已，，，</p><h2 id="AndroidDeveloper"><a href="#AndroidDeveloper" class="headerlink" title="AndroidDeveloper"></a>AndroidDeveloper</h2><p>ID: googdev<br><img src="/images/20170425/201704252046.jpg" alt="AndroidDeveloper"><br>人称帅比张，也许是真的很帅吧，我没见过，不过他的文章的确写的很不错，有很多独到的见解，是一个 Android 开发者，非科班出身，也是我一直坚持写文章的动力来源，他写了很多关于他自己是如何坚持写博客的文章，也写了很多阅读写作技巧，是一个值得关注的公众号。不过最近他开了个付费的小密圈，只是我没有加，听说已经有超过一千人加入了，在那里可以进行交流，提问等，貌似还不错。</p><h2 id="谷歌开发者"><a href="#谷歌开发者" class="headerlink" title="谷歌开发者"></a>谷歌开发者</h2><p>这是 google 的官方公众号，发布一些最新的 google 动态，喜欢 google 的小伙伴可以关注。<br><img src="/images/20170425/201704252048.jpg" alt="AndroidDeveloper"></p><h2 id="鬼脚七"><a href="#鬼脚七" class="headerlink" title="鬼脚七"></a>鬼脚七</h2><p>前淘宝技术专家，虽然不是每天发布文章，但是他的文章也是非常值得阅读的，分享很多技术及职业发展的文章，也是值得关注的公众号。<br><img src="/images/20170425/201704252047.jpg" alt="AndroidDeveloper"></p><h2 id="野狗"><a href="#野狗" class="headerlink" title="野狗"></a>野狗</h2><p>野狗官方的公众号，野狗这个公司我了解的不多，只知道是一个提供可靠的实时通讯云服务公司，在这个公众号经常可以看到很多关于前端技术的文章和教程，写的相当不错，包括一些前端框架，微信小程序相关的文章，喜欢钻研的小伙伴动手关注，相信你会找到不少干货的。</p><h2 id="前端之巅"><a href="#前端之巅" class="headerlink" title="前端之巅"></a>前端之巅</h2><p>这也是一个不错的公众号，常常发布一些前端最新动态，了解最新框架发布动态，就靠它了。</p><h2 id="infoQ"><a href="#infoQ" class="headerlink" title="infoQ"></a>infoQ</h2><p>infoQ 官方公众号，infoQ是一个良心公司，本着开源的理念，定期组织开发者大会，都是业界大牛，我看过几次贺师俊老师的演讲，那叫一个精彩啊，其中一次是对 javascript 语言的展望，讲的非常生动，如果你看了相信你会爱上 javascript 这门语言的，目前就职于百姓网，有名的前端工程师。在这个公众号上你可以经常见到这样的大牛，还有每月会发布架构师专栏的电子书，也是非常不错的书籍。</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个对教师的话题</title>
      <link href="/%E4%B8%80%E4%B8%AA%E5%AF%B9%E6%95%99%E5%B8%88%E8%81%8C%E4%B8%9A%E7%9A%84%E8%AF%9D%E9%A2%98.html"/>
      <url>/%E4%B8%80%E4%B8%AA%E5%AF%B9%E6%95%99%E5%B8%88%E8%81%8C%E4%B8%9A%E7%9A%84%E8%AF%9D%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>教师这个职业一直以来都是受人尊重，圣神而又高尚的职业，今天的这篇文章是因我一位朋友而起，文章内容也只代表我个人看法，不是针对某个人或某个团体。事情的起因是这样的：<br>今天在朋友圈看到一条心情，还附有一张截图，内容大概是这样的，有一位学生家长给老师发消息说，自己的孩子英语单词会写也认识就是不知道怎么读，怎么发音，因此建议老师给学生教一下音标，因为自己当时在学英语的时候老师就教的是音标。所以我这位朋友因此发心情说，三年级的学生连字母都没认全，还教音标，真是胡扯蛋。。。</p><h2 id="引发思考"><a href="#引发思考" class="headerlink" title="引发思考"></a>引发思考</h2><h3 id="三年级的学生应不应该教音标"><a href="#三年级的学生应不应该教音标" class="headerlink" title="三年级的学生应不应该教音标"></a>三年级的学生应不应该教音标</h3><p>教学大纲基本上是这样说的，能听懂会说12组对话，并能进行简单的交流；能听说认读50个单词和听说读写26个字母，并能简单运用；<br>（1）基本能够听懂课堂用语。<br>（2）能够按顺序背诵字母表，并可以认读、拼写字母的大小写形式，区分印刷体和手写体。<br>（3）能够用正确的语音、语调朗读所学的单词、词组和课文。<br>（4）能够根据场景，用正确的语音、语调进行简单的对话。<br>（5）能够听懂，并用正确的语音、语调说出所学单词400个左右，并能够拼写其中所学常用单词200个左右。<br>（6）能够正确、规范地书写大小写字母、单词和句子。<br>的确是没有提及音标的教学。所以我个人认为低年级的教学应该按照教学大纲来开展，因为教学大纲是根据大部分学生的心理发展安排的，不会有什么问题，就算有个别的学生有这样的需求，也要以大部分学生的发展为主。</p><h3 id="学生家长应不应该有这样的建议"><a href="#学生家长应不应该有这样的建议" class="headerlink" title="学生家长应不应该有这样的建议"></a>学生家长应不应该有这样的建议</h3><p>对于学生家长，父母的心情是可以理解的，自古以来父母望子成龙，望女成凤的愿望尤其强烈，所以，家长有这样的建议也是想让自己的孩子能更好的接受知识，只是家长没有站在老师的角度考虑问题，一个班的学生肯定是有差异的，不可能为了一个孩子就改变老师的教学方案，这样做显然是不合理的，家长这样的建议是自私的表现，但是这样是自私我们是完全可以理解的。</p><h3 id="老师该不该说家长是胡扯"><a href="#老师该不该说家长是胡扯" class="headerlink" title="老师该不该说家长是胡扯"></a>老师该不该说家长是胡扯</h3><p>首先对“胡扯”一词怎么看，它是一个多义词，也没有贬义的意思，所以也可以这么说，但是作为一名教师，对于学生家长的建议，应该虚心听取，即使家长的建议是错误的，也要解释清楚不那么做的原因，用论证的思想让别人认识清楚，这样就可以很好的解决问题；而不是不假思索的说别人的建议是胡扯，在这点上老师是不对的。</p><h3 id="老师的职业道德"><a href="#老师的职业道德" class="headerlink" title="老师的职业道德"></a>老师的职业道德</h3><p>记得还是在小学的时候，我的一位老师曾说过，教书育人，这个词应该是反过来说的，先有育人才有教书，如果连做人的有问题，那么学习再好将来也会对社会造成不良影响。老师的这句话很有道理，从而至今我也还记得。故人说：“师者，传道授业解惑也”，而正真的“师者”，绝不是仅仅只为了“传道授业解惑”，还要在“为人”、“处事”上进行言传身教，所谓的“言传身教”，当今的老师又有几个做到了，前段时间一度网络上爆出某某学校校长猥亵学生、某某幼儿园教师体罚幼儿种种，这些都表明当今的教师团体存在一些超出道德范畴的行为，值得我们深思。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>教师的职业道德一直以来都是被人们广泛关注的话题，也希望广大教育工作者能以身作则，为教育事业做出贡献，不要让教师这个职业因为一只苍蝇而影响了人们心中圣神而又高尚的象征。</p><p>其实我只是在扯淡  -_–</p><p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><p style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</p><p style="text-align: center;margin:0;">如果觉得文章对你有用，小额赞赏是对作者莫大的支持，也是作者坚持写作的动力-_–</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单易用的 HtmlEncode</title>
      <link href="/%E7%AE%80%E5%8D%95%E6%98%93%E7%94%A8%E7%9A%84-HtmlEncode.html"/>
      <url>/%E7%AE%80%E5%8D%95%E6%98%93%E7%94%A8%E7%9A%84-HtmlEncode.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在项目中遇到漏洞检查的问题，其中就有 script 脚本注入的问题，简单的说 script 脚本注入就是在接收用户输入时，将 javascript 脚本提交到服务器了，这样在显示时浏览器就会执行这些脚本，从而进行攻击，常见的有跨站脚本 (XSS) 攻击等。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>其实解决方案也很简单，就是将其用户的输入信息进行 html 编码，将特殊字符转换为 html 实体，这样就能可以简单的防止了 script 注入的攻击，但是对于业界高手，还要进一步加强安全策略。</p><h2 id="服务端转义"><a href="#服务端转义" class="headerlink" title="服务端转义"></a>服务端转义</h2><p>可以在服务器端对用户的输入信息进行编码：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java 提供的 API</span></span><br><span class="line"><span class="keyword">String</span> message = Html.Encode(message);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlEncode</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">String</span> s = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"&lt;script&gt;alert(1);&lt;/script&gt;"</span>);</span><br><span class="line">        <span class="keyword">String</span> str = encodeHtml(s);</span><br><span class="line">        System.out.<span class="built_in">println</span>(str); <span class="comment">// &amp;#60;script&amp;#62;alert(1);&amp;#60;/script&amp;#62;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> <span class="title">encodeHtml</span><span class="params">(<span class="keyword">String</span> s)</span></span>&#123;</span><br><span class="line">        StringBuffer out = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c &gt; <span class="number">127</span> || c==<span class="string">'"'</span> || c==<span class="string">'&lt;'</span> || c==<span class="string">'&gt;'</span>) &#123;</span><br><span class="line">                out.append(<span class="string">"&amp;#"</span> + (<span class="keyword">int</span>)c + <span class="string">";"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="js-前端转义"><a href="#js-前端转义" class="headerlink" title="js 前端转义"></a>js 前端转义</h2><p>同样也可以在浏览器端进行转义：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>()&#123;</span><br><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> root = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'object'</span> ? <span class="built_in">window</span> : &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> htmlEncode = <span class="keyword">function</span>(value, entry) &#123;</span><br><span class="line"><span class="keyword">if</span>(!entry)&#123;</span><br><span class="line">entry = &#123; <span class="string">"'"</span>: <span class="string">"&amp;apos;"</span>, <span class="string">'"'</span>: <span class="string">'&amp;quot;'</span>, <span class="string">'&lt;'</span>: <span class="string">'&amp;lt;'</span>, <span class="string">'&gt;'</span>: <span class="string">'&amp;gt;'</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(value)&#123;</span><br><span class="line">value = value.replace<span class="function"><span class="params">(<span class="regexp">/(['")-&gt;&lt;&amp;\\\/\.])/g</span>, <span class="keyword">function</span> ($<span class="number">0</span>) &#123; <span class="keyword">return</span> entry[$<span class="number">0</span>] || $<span class="number">0</span>; &#125;)</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">value</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(root)</span>&#123;</span></span><br><span class="line"><span class="function"><span class="title">root</span>.<span class="title">htmlEncode</span> = <span class="title">htmlEncode</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;)<span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">message</span> = '&lt;<span class="title">script</span>&gt;<span class="title">alert</span><span class="params">(<span class="number">1</span>)</span>;&lt;/<span class="title">script</span>&gt;';</span></span><br><span class="line"><span class="function"><span class="title">message</span> = <span class="title">window</span>.<span class="title">htmlEncode</span><span class="params">(message)</span>;  // "&amp;<span class="title">lt</span>;<span class="title">script</span>&amp;<span class="title">gt</span>;<span class="title">alert</span><span class="params">(<span class="number">1</span>)</span>&amp;<span class="title">lt</span>;/<span class="title">script</span>&amp;<span class="title">gt</span>;"</span></span><br><span class="line"><span class="function">// 在浏览器中显示 &lt;<span class="title">script</span>&gt;<span class="title">alert</span><span class="params">(<span class="number">1</span>)</span>&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这两种方法简单实用，基本可以解决简单的脚本注入问题。</p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div><br><div style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</div>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript全局函数eval的用法</title>
      <link href="/JavaScript%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0eval%E7%9A%84%E7%94%A8%E6%B3%95.html"/>
      <url>/JavaScript%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0eval%E7%9A%84%E7%94%A8%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在项目重构代码时发现很多地方用到 eval() 这个函数，也不知是哪位大神写的神奇代码，于是乎就上网搜了一下关于 eval() 这个函数的用法，具体整理如下：</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>eval() 函数执行表示为字符串形式的JavaScript代码。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">eval</span><span class="params">(string)</span></span></span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><p><code>string</code><br>一个字符串表示了一个<code>JavaScript</code>运算式，语句， 或者是一系列语句。运算式可以包括变量和已存在对象的属性。</p><p><strong>返回值</strong></p><p>执行指定的代码之后的完整值。如果完整值为空，返回<code>undefined</code></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>eval()是全局对象的一个函数属性。</p><p>eval()的参数是一个字符串。如果字符串表示了一个运算式，eval()会对运算式求值。如果参数表示了一个或多个JavaScript语句， 那么eval()会执行这些语句。不要调用eval()来执行一个四则运算运算式； JavaScript 会自动为四则运算求值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"2 + 2"</span>)); <span class="comment">// 返回了包含"2 + 2"的字符串对象</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"2 + 2"</span>);             <span class="comment">// returns 4</span></span><br></pre></td></tr></table></figure><p>该方法只接受原始字符串作为参数，如果 string 参数不是原始字符串，那么该方法将不作任何改变地返回。因此请不要为 eval() 函数传递 String 对象来作为参数。</p><p>不过可以使用 toString() 方法来绕过这个限制<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"2 + 2"</span>);</span><br><span class="line"><span class="built_in">eval</span>(str.toString());   <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p>如果试图覆盖 eval 属性或把 eval() 方法赋予另一个属性，并通过该属性调用它，则 ECMAScript 实现允许抛出一个 EvalError 异常。</p><h2 id="避免在不必要的情况下使用eval"><a href="#避免在不必要的情况下使用eval" class="headerlink" title="避免在不必要的情况下使用eval"></a>避免在不必要的情况下使用eval</h2><p>eval() 是一个危险的函数， 他执行的代码拥有着执行者的权利。如果你运行eval()伴随着字符串，那么你的代码可能被恶意方（不怀好意的人）影响, 通过在使用方的机器上使用恶意代码，可能让你失去在网页或者扩展程序上的权限。更重要的是，第三方代码可以看到作用域在某一个eval()被调用的时候，这有可能导致一些不同方式的攻击。相似的Function就是不容易被攻击的。</p><p>eval()也普遍的比其他的替代方案慢，因为他会调用js解析器，即便一些其他的构造器已经被做了优化在现代的JS引擎中。</p><p>更为安全（也更快）的替代eval()的是普通的用例。</p><h2 id="JavaScript-为什么不推荐使用-eval"><a href="#JavaScript-为什么不推荐使用-eval" class="headerlink" title="JavaScript 为什么不推荐使用 eval()"></a>JavaScript 为什么不推荐使用 eval()</h2><ul><li>eval只是一个普通的函数，只不过他有一个快速通道通向编译器，可以将string变成可执行的代码。有类似功能的还有Function , setInterval   和 setTimeout。</li><li>eval不容易调试。用chromeDev等调试工具无法打断点调试，所以麻烦的东西也是不推荐使用的。</li><li>说到性能问题，在旧的浏览器中如果你使用了eval，性能会下降10倍。在现代浏览器中有两种编译模式：fast path和slow path。fast path是编译那些稳定和可预测（stable and predictable）的代码。而明显的，eval不可预测，所以将会使用slow path ，所以会慢。还有一个是，在使用类似于Closure Compiler等压缩（混淆）代码时，使用eval会报错。</li><li>关于安全性，我们经常听到eval是魔鬼，他会引起XSS攻击，实际上，如果我们对信息源有足够的把握时，eval并不会引起很大的安全问题。而且不光是eval，其他方式也可能引起安全问题。<br>  比如：莫名其妙给你注入一个<code>&lt;script src=&quot;&quot;&gt;</code>标签，或者一段来历不明的JSON-P请求，再或者就是Ajax请求中的eval代码…   所以啊，只要你的信息源不安全，你的代码就不安全。不单单是因为eval引起的。你用eval的时候会在意XSS的问题，你越在意就越出问题，出的多了，eval就成噩梦了。</li><li>效率问题是程序逻辑问题。对于一些有执行字符串代码需求的程序中，不用eval而用其他方式模拟反而会带来更大的开销</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因此，在实际项目中尽可能的避免使用 eval() ，除非特殊场景必须要使用。</p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div><br><div style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</div><p>ps：其实我是在扯淡,,,,</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript模块化编程补充Sea.js</title>
      <link href="/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%E8%A1%A5%E5%85%85.html"/>
      <url>/JavaScript%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%E8%A1%A5%E5%85%85.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://seajs.org" target="_blank" rel="noopener">官网</a>的介绍：<br>Sea.js 追求简单、自然的代码书写和组织方式，具有以下核心特性：</p><ul><li><strong>简单友好的模块定义规范：</strong>Sea.js 遵循 CMD 规范，可以像 Node.js 一般书写模块代码。</li><li><strong>自然直观的代码组织方式：</strong>依赖的自动加载、配置的简洁清晰，可以让我们更多地享受编码的乐趣。</li></ul><p>Sea.js 还提供常用插件，非常有助于开发调试和性能优化，并具有丰富的可扩展接口。</p><p><a href="https://github.com/seajs/seajs/issues/" target="_blank" rel="noopener">社区</a>说：</p><p>SeaJS 的理念的是 <strong>海纳百川、有容乃大，推崇开放与自由</strong></p><p><a href="https://github.com/seajs/seajs/releases" target="_blank" rel="noopener">下载 https://github.com/seajs/seajs/releases</a></p><h3 id="CMD模块规范"><a href="#CMD模块规范" class="headerlink" title="CMD模块规范"></a>CMD模块规范</h3><p>在 Sea.js 中，所有 JavaScript 模块都遵循 CMD（Common Module Definition） 模块定义规范。该规范明确了模块的基本书写格式和基本交互规则</p><p>在 CMD 规范中，一个模块就是一个文件。代码的书写格式如下：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span><span class="params">(<span class="keyword">require</span>, exports, <span class="keyword">module</span>)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">doSomething...</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br></pre></td></tr></table></figure></p><p><code>define</code> 的参数有多种类型，可以是字符串、对象、函数等；还有 <code>define</code> 也可以传入多个参数：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define(id?, deps?, factory)</span></span><br><span class="line">define(<span class="string">'hello'</span>,[<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span><span class="params">(<span class="keyword">require</span>, exports, <span class="keyword">module</span>)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">doSomething...</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br></pre></td></tr></table></figure></p><p>字符串 id 表示模块标识，数组 deps 是模块依赖，上面的写法是省略 id, deps 参数的写法，因此前两个参数是可以省略的。</p><p><strong>注意：</strong>带 id, deps 参数的 define 用法不属于 CMD 规范，而属于 <a href="https://github.com/cmdjs/specification/blob/master/draft/transport.md" target="_blank" rel="noopener">Modules/Transport</a> 规范。</p><p><code>require</code>, <code>exports</code> 和 <code>module</code> 三个参数的用法在下面 sea.js 的 API 中有所介绍。</p><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><p>seajs.config</p><p>用来对 Sea.js 进行配置。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置路径，方便跨目录调用</span></span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="symbol">'aral</span>e': <span class="symbol">'https</span>:<span class="comment">//a.alipayobjects.com/arale',</span></span><br><span class="line">    <span class="symbol">'jquer</span>y': <span class="symbol">'https</span>:<span class="comment">//a.alipayobjects.com/jquery'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置别名，方便调用</span></span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="symbol">'clas</span>s': <span class="symbol">'arale</span>/<span class="class"><span class="keyword">class</span><span class="title">/1</span>.0.0<span class="title">/class</span>',</span></span><br><span class="line"><span class="class">    '<span class="title">jquery</span>'</span>: <span class="symbol">'jquery</span>/jquery/<span class="number">1.10</span><span class="number">.1</span>/jquery'</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>seajs.use</p><p>用来在页面中加载一个或多个模块。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载一个模块</span></span><br><span class="line">seajs.use(<span class="string">'./a'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载一个模块，在加载完成时，执行回调</span></span><br><span class="line">seajs.use(<span class="string">'./a'</span>, <span class="function"><span class="keyword">function</span><span class="params">(a)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  a.doSomething();</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载多个模块，在加载完成时，执行回调</span></span><br><span class="line">seajs.use([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  a.doSomething();</span></span></span><br><span class="line"><span class="function"><span class="comment">  b.doSomething();</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br></pre></td></tr></table></figure><p>define</p><p>用来定义模块。Sea.js 推崇一个模块一个文件，遵循统一的写法：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span><span class="params">(<span class="keyword">require</span>, exports, <span class="keyword">module</span>)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">  // 模块代码</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br></pre></td></tr></table></figure></p><p><code>require</code>, <code>exports</code> 和 <code>module</code> 三个参数可酌情省略，具体用法如下。</p><p>require</p><p><code>require</code> 用来获取指定模块的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取模块 a 的接口</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用模块 a 的方法</span></span><br><span class="line">  a.doSomething();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意，<code>require</code> 只接受字符串直接量作为参数，</p><p>require.async</p><p>用来在模块内部异步加载一个或多个模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步加载一个模块，在加载完成时，执行回调</span></span><br><span class="line">  <span class="built_in">require</span>.async(<span class="string">'./b'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    b.doSomething();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步加载多个模块，在加载完成时，执行回调</span></span><br><span class="line">  <span class="built_in">require</span>.async([<span class="string">'./c'</span>, <span class="string">'./d'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">    c.doSomething();</span><br><span class="line">    d.doSomething();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>exports</p><p>用来在模块内部对外提供接口。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span><span class="params">(require, exports)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对外提供 foo 属性</span></span><br><span class="line">  exports.foo = <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对外提供 doSomething 方法</span></span><br><span class="line">  exports.doSomething = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>module.exports</p><p>与 exports 类似，用来在模块内部对外提供接口。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对外提供接口</span></span><br><span class="line">  <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    name: <span class="string">'a'</span>,</span><br><span class="line">    doSomething: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>sea.js的优点</strong></p><p>1，通过exports暴露接口。不需要命名空间，不需要全局变量。</p><p>2，通过require引入依赖。让依赖内置，开发者只关心当前模块的依赖，其他事情Seajs都会自动处理好。 其他好处： 1，模块的版本管理。通过别名配置，配合构建工具，可以比较轻松地实现模块的版本管理。 2，提高可以维护性。</p><p>3，前端性能优化。通过异步加载模块，对性能非常有益。</p><p>4，跨环境共享模块。 随着Dojo，YUI3，Node.js推广和流行，前端模块化才开始深入人心。 一类是大教堂模式。如Dojo，YUI3，KISSY等。所有组件都是颗粒化、模块化的，各组件之间层层分级、环环相扣。 一类是集市模式。如 jQuery、RequireJS、Sea.js、OzJS 等。所有组件彼此独立、职责单一，各组件通过组合松耦合在一起，协同完成开发。</p><p><strong>sea.js缺点</strong></p><p>1.文档很烂，官网只有一个很简单的例子，玉伯开了用Github issues 做文档的坏头，导致有的文档issue 里说的东西已经过时了，给人误导。</p><p>2.打包痛苦，配置起来极其复杂，而且一变再变，早期的transport/concat组件简直了，bug挺多。而且这个打包跟spm的关系到底是啥？！！</p><p>3.sea.js文件路径，模块路径，spm路径，打包路径，相对路径，绝对路径，html入口文件路径，这些关系在sea.js初期的时候开发团队没有理清楚，现在我也不知道seajs3和spm3搞清楚没。</p><p>4.每个小版本大版本都有很大变化，从seajs1到2到3，每次变化都挺大的，有些配置莫名其妙地就没了，也没有一个统一的文档来记录。</p><p>摘自知乎<a href="https://www.zhihu.com/question/20342350" target="_blank" rel="noopener">LABjs、RequireJS、SeaJS 哪个最好用？为什么？</a> <a href="https://www.zhihu.com/people/Rufus/answers" target="_blank" rel="noopener">鲁小夫</a>的回答。</p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div><br><div style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</div>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发之JavaScript实战应用一</title>
      <link href="/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B9%8BJavaScript%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8%E4%B8%80.html"/>
      <url>/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%B9%8BJavaScript%E5%AE%9E%E6%88%98%E5%BA%94%E7%94%A8%E4%B8%80.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、JavaScript-模块化编程"><a href="#一、JavaScript-模块化编程" class="headerlink" title="一、JavaScript 模块化编程"></a>一、JavaScript 模块化编程</h2><h3 id="原始写法"><a href="#原始写法" class="headerlink" title="原始写法"></a>原始写法</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> conut = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时直接调用，这种写法”污染”了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。</p><h3 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;</span><br><span class="line">　　count : <span class="number">0</span>,</span><br><span class="line">    m1 : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">　　m2 : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>像这样封装在一个对象里面，使用时调用对象的属性。<br><code>module1.m1();</code></p><p>但是，这样的写法会暴露所有模块成员，内部状态可以被外部改写<br><code>module1.count = 5;</code></p><h3 id="立即执行函数写法"><a href="#立即执行函数写法" class="headerlink" title="立即执行函数写法"></a>立即执行函数写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">　　<span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(‘comule1’);</span><br><span class="line">&#125;;</span><br><span class="line">　　<span class="keyword">return</span> &#123;</span><br><span class="line">m1 : m1</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这样外部代码无法读取内部的<code>count</code>变量<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(module1 .<span class="built_in">count</span>);   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><h3 id="放大模式"><a href="#放大模式" class="headerlink" title="放大模式"></a>放大模式</h3><p>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用”放大模式”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line">　　mod.m3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'m3'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">　　<span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(module1);</span><br><span class="line"></span><br><span class="line">Module1.m3()   <span class="comment">// m3</span></span><br></pre></td></tr></table></figure></p><h3 id="宽放大模式"><a href="#宽放大模式" class="headerlink" title="宽放大模式"></a>宽放大模式</h3><p>在浏览器环境中，模块的各个部分通常都是通过网络获取的，有时无法知道哪个部分会先加载。如果采用放大模式的写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用”宽放大模式”。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = ( <span class="function"><span class="keyword">function</span> (<span class="params">mod</span>)</span>&#123;</span><br><span class="line">　　<span class="comment">//...</span></span><br><span class="line">　　<span class="keyword">return</span> mod;</span><br><span class="line">&#125;)(<span class="built_in">window</span>.module1 || &#123;&#125;);</span><br></pre></td></tr></table></figure></p><p>与”放大模式”相比，＂宽放大模式＂就是”立即执行函数”的参数可以是空对象</p><h3 id="输入全局变量"><a href="#输入全局变量" class="headerlink" title="输入全局变量"></a>输入全局变量</h3><p>独立性是模块的重要特点，模块内部最好不与程序的其他部分直接交互。<br>为了在模块内部调用全局变量，必须显式地将其他变量输入模块。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span> <span class="params">($)</span> </span>&#123;</span><br><span class="line">　　<span class="comment">//...</span></span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure></p><p>module1模块需要使用jQuery库，把这两个库当作参数输入module1，这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显</p><h3 id="CommonJS和AMD-规范"><a href="#CommonJS和AMD-规范" class="headerlink" title="CommonJS和AMD 规范"></a>CommonJS和AMD 规范</h3><p>在CommonJS中，有一个全局性方法require()，用于加载模块。CommonJS规范主要用在服务端，例如 nodejs就遵守CommonJS规范<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> math = require(<span class="string">'math'</span>);</span><br><span class="line">math.<span class="keyword">add</span>(<span class="number">2</span>,<span class="number">3</span>);   <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><p>但是，如果是客户端， <code>math.add(2, 3)</code>必须要等到 ’math’ 模块加载完成之后才能执行，也就是说，如果加载时间很长，整个应用就会停在那里等待。<br>因为服务端可以同步加载模块，而浏览器主要是异步加载， 这就产生了 AMD 规范：</p><p><strong>AMD规范</strong></p><p>它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p><p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>([<span class="class"><span class="keyword">module</span>], <span class="title">callback</span>);</span></span><br></pre></td></tr></table></figure></p><p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> <span class="params">(math)</span></span> &#123;</span><br><span class="line">　　<span class="built_in">math</span>.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以，AMD比较适合浏览器环境, 目前实现了 AMD 规范最流行javascript库之一是 <code>require.js</code>.</p><h3 id="require-js"><a href="#require-js" class="headerlink" title="require.js"></a>require.js</h3><p>以前引入js的方法<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"2.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"3.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"5.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"6.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>缺点：</p><ul><li>浏览器会停止页面渲染，加载的文件越多，网页响应的时间越长</li><li>js文件存在依赖关系，必须严格保证加载顺序，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。</li></ul><p><strong>require.js加载模块</strong></p><p>首先引入 require.js<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"res/js/require.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'moduleA'</span>, <span class="string">'moduleB'</span>, <span class="string">'moduleC'</span>], <span class="function"><span class="keyword">function</span> <span class="params">(moduleA, moduleB, moduleC)</span></span>&#123;</span><br><span class="line">　　// some code here</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// <span class="built_in">require</span>.<span class="built_in">config</span>(); 配置参数</span><br><span class="line"><span class="built_in">require</span>.<span class="built_in">config</span>(&#123;</span><br><span class="line">    paths: &#123;</span><br><span class="line">        <span class="string">"jquery"</span>: <span class="string">"res/js/jquery-3.1.1.min"</span>,</span><br><span class="line">        <span class="string">"math"</span>: <span class="string">"res/js/math"</span></span><br><span class="line">　　&#125;</span><br><span class="line">)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>, <span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> <span class="params">($, math)</span></span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>($);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>AMD模块的写法</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span><br><span class="line">　　<span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="params">(x,y)</span></span>&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> x+y;</span><br><span class="line">　　&#125;;</span><br><span class="line">　　<span class="keyword">return</span> &#123;</span><br><span class="line">　　　　add: add</span><br><span class="line">　　&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：require.js加载的模块，必须是按照AMD规范、用define()函数定义的模块。</p><h3 id="加载非规范的模块"><a href="#加载非规范的模块" class="headerlink" title="加载非规范的模块"></a>加载非规范的模块</h3><p>但是，已经有很多模块没有严格的遵守AMD规范，像这样的模块， 其实 require 也是可以加载的，使用 <code>require.config()</code> 对象除了接收 <code>paths</code> 属性之外，还有一个 <code>shim</code> 属性,专门用来配置不兼容的模块。<br>具体来说，每个模块要定义：</p><ul><li>exports值（输出的变量名），表明这个模块外部调用时的名称；</li><li>deps数组，表明该模块的依赖性。</li></ul><p>比如，jQuery的插件可以这样定义<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">shim</span>: &#123;</span><br><span class="line">　　<span class="string">'jquery.scroll'</span>: &#123;</span><br><span class="line">　　　　<span class="attribute">deps</span>: [<span class="string">'jquery'</span>],</span><br><span class="line">　　　　<span class="attribute">exports</span>: <span class="string">'jQuery.fn.scroll'</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二、ES6简单语法"><a href="#二、ES6简单语法" class="headerlink" title="二、ES6简单语法"></a>二、ES6简单语法</h2><h3 id="ES6-简介"><a href="#ES6-简介" class="headerlink" title="ES6 简介"></a>ES6 简介</h3><p>参考：<a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/intro</a></p><p>主流浏览器对ES6的支持：<a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">http://kangax.github.io/compat-table/es6/</a></p><h3 id="新增语法"><a href="#新增语法" class="headerlink" title="新增语法"></a>新增语法</h3><p><strong>1、let和const命令</strong></p><p>let 声明的变量只在该变量所在模块内有效<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// defined</span></span><br></pre></td></tr></table></figure></p><p>const 声明一个只读的常量。一旦声明，常量的值就不能改变。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="literal">PI</span> = <span class="number">3.1415</span>;</span><br><span class="line"><span class="literal">PI</span> <span class="comment">// 3.1415</span></span><br><span class="line"></span><br><span class="line"><span class="literal">PI</span> = <span class="number">3</span>;  <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></p><p><strong>2、结构化赋值</strong><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> [a, b, <span class="built_in">c</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span><br><span class="line">third； <span class="comment">// baz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure></p><p><strong>3、块级作用域</strong></p><p>ES5只有全局作用域和函数作用域，没有块级作用域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(tmp);</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="string">"hello world"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>ES6 的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> tmp = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(tmp);  <span class="comment">//defined</span></span><br></pre></td></tr></table></figure></p><p><strong>4、模版字符串</strong></p><p>ES5 的写法<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">'hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">'demo_1'</span>);</span><br><span class="line">test.innerHTML = <span class="string">'&lt;div&gt;'</span>+txt+<span class="string">'&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure></p><p>ES6 的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">'hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">'demo_1'</span>);</span><br><span class="line">test.innerHTML = <span class="string">`&lt;div&gt;<span class="subst">$&#123;txt&#125;</span>&lt;/div&gt;`</span>;</span><br></pre></td></tr></table></figure></p><p><strong>5、for of 循环</strong></p><p>ES5 for in 循环<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 0 1 2 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ES6 for of 循环<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// a, b, c, d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>6、箭头函数</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>7、class 基本语法</strong></p><p>ES5<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span><span class="params">(x, y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">p.toString(); <span class="comment">//(1, 2)</span></span><br></pre></td></tr></table></figure></p><p>ES6<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = new Point(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">p.toString(); <span class="comment">// (1, 2)</span></span><br></pre></td></tr></table></figure></p><p>更多教程： <a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰《ECMAScript 6 入门》</a></p><h2 id="三、Web前端代码规范"><a href="#三、Web前端代码规范" class="headerlink" title="三、Web前端代码规范"></a>三、Web前端代码规范</h2><p>参考： 腾讯前端团队的规范文档  <a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="noopener">http://alloyteam.github.io/CodeGuide/</a></p><h2 id="四、react-native-Windows-Android环境搭建"><a href="#四、react-native-Windows-Android环境搭建" class="headerlink" title="四、react-native Windows + Android环境搭建"></a>四、react-native Windows + Android环境搭建</h2><p>react-native 官方文档: <a href="http://facebook.github.io/react-native/" target="_blank" rel="noopener">http://facebook.github.io/react-native/</a></p><h3 id="必需软件安装"><a href="#必需软件安装" class="headerlink" title="必需软件安装"></a>必需软件安装</h3><p><strong>Node.js</strong></p><p>安装 Node , python2<br><br><a href="https://nodejs.org/" target="_blank" rel="noopener">https://nodejs.org/</a><br><br><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></p><p><strong>React Native CLI</strong><br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g react-<span class="keyword">native</span>-cli</span><br></pre></td></tr></table></figure></p><p><strong>Android 6.0 SDK</strong></p><p>为了 Android SDK 的好管理和下载，直接安装 Android Studio ，并配置环境变量</p><p><strong>Genymotion 模拟器</strong></p><p>下载：<a href="https://www.genymotion.com/" target="_blank" rel="noopener">https://www.genymotion.com/</a></p><p>Genymotion是基于 Oracle 的 VirtualBox 虚拟机的，所以样两个版本，一个是带有VBox 的虚拟机的，一个是不带 VBox。<br><br>安装教程： <a href="http://blog.csdn.net/beiminglei/article/details/13776013" target="_blank" rel="noopener">http://blog.csdn.net/beiminglei/article/details/13776013</a></p><h3 id="初始化项目并启动"><a href="#初始化项目并启动" class="headerlink" title="初始化项目并启动"></a>初始化项目并启动</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">react-<span class="keyword">native</span> <span class="keyword">init</span> AwesomeProject</span><br><span class="line">cd AwesomeProject</span><br><span class="line">react-<span class="keyword">native</span> start</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等服务启动</span></span><br><span class="line">react-<span class="keyword">native</span> run-android</span><br></pre></td></tr></table></figure><p>测试服务地址： localhost:8081/index.android.bundle?platform=android</p><p>yarn 简介： <a href="http://www.infoq.com/cn/news/2016/10/yarn" target="_blank" rel="noopener">http://www.infoq.com/cn/news/2016/10/yarn</a></p><p>博客园开源地址： <a href="https://github.com/togayther/react-native-cnblogs" target="_blank" rel="noopener">https://github.com/togayther/react-native-cnblogs</a></p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div><br><div style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</div>]]></content>
      
      
      
        <tags>
            
            <tag> React-Native </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式--简单工厂模式</title>
      <link href="/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"/>
      <url>/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html</url>
      
        <content type="html"><![CDATA[<p>在《java与模式》一书中是这样描述简单工厂模式的：</p><blockquote><p>简单工厂模式是类的创建模式，又叫做静态工厂方法（Static Factory Method）模式。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。</p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>就那我们熟悉的登录来说，如果应用系统有多种登录方式，例如：口令认证、域认证（口令认证通常是去数据库中验证用户，而域认证则是需要到微软的域中验证用户）。那么我们的做法就是建立一个适用与各种方式的登录接口，如下图所示：<br><img src="/images/20161126/201611261719.png" alt="简单工厂模式"></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录验证接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> Login&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> verify(<span class="built_in">String</span> name, <span class="built_in">String</span> password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 域认证的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegionLogin</span> <span class="keyword">implements</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String name, String password)</span></span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 口令认证的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordLogin</span> <span class="keyword">implements</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String name, String password)</span></span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还需要一个工厂类 LoginManager，根据不同的调用者，创建不同的登录对象并返回。如果不合法会返回一个Runtime异常。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoginManager</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Login <span class="title">factory</span>(<span class="params">String type</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"password"</span>.<span class="keyword">equals</span>(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PasswordLogin();</span><br><span class="line">        &#125; <span class="function">esle <span class="title">if</span>(<span class="params"><span class="string">"region"</span>.<span class="keyword">equals</span>(type</span>))</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RegionLogin();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"没有找到登录类型"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span> [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">String</span> loginType = <span class="string">"password"</span>;</span><br><span class="line">        <span class="keyword">String</span> name = <span class="string">"name"</span>;</span><br><span class="line">        <span class="keyword">String</span> password = <span class="string">"123456"</span>;</span><br><span class="line">        Login login = LoginManager.factory(loginType);</span><br><span class="line">        <span class="keyword">boolean</span> <span class="keyword">bool</span> = login.verify(name, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">bool</span>)&#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果把上面的Test当做一个servlet的话，当客户端发起登录请求——&gt;请求交给服务端的Servlet——&gt;Servlet根据客户端传递的loginType调用工厂类LoginManager的factory()方法——&gt;factory()方法根据参数loginType创建相应的登录验证类(RegionLogin或PasswordLogin)并返回——&gt;登录验证类调用方法verify()验证用户名密码是否正确。</p><p>如果不使用简单工厂模式，假设Test为一个Servlet，变量loginType、name、password表示从客户端传递过来的参数。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">String</span> loginType = <span class="string">"password"</span>;</span><br><span class="line">        <span class="keyword">String</span> name = <span class="string">"name"</span>;</span><br><span class="line">        <span class="keyword">String</span> password = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理口令认证</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"password"</span>.equals(loginType))&#123;</span><br><span class="line">            PasswordLogin passwordLogin = <span class="keyword">new</span> PasswordLogin();</span><br><span class="line">            <span class="keyword">boolean</span> <span class="keyword">bool</span> = passwordLogin.verify(name, password);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">bool</span>)&#123;</span><br><span class="line">                <span class="comment">// do something</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// do something</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"region"</span>.equals(loginType))&#123;</span><br><span class="line">            RegionLogin reginLogin = <span class="keyword">new</span> RegionLogin();</span><br><span class="line">            <span class="keyword">boolean</span> <span class="keyword">bool</span> = reginLogin.verify(name, password);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">bool</span>)&#123;</span><br><span class="line">                <span class="comment">// do something</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// do something</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的代码会不会让人蛋疼，，，，，</p><p>《JAVA与模式》一书中使用java.text.DataFormat类作为简单工厂模式的典型例子叙述。</p><h3 id="简单工厂模式的优点"><a href="#简单工厂模式的优点" class="headerlink" title="简单工厂模式的优点"></a>简单工厂模式的优点</h3><p>模式的核心是工厂类。这个类含有必要的逻辑判断，可以决定在什么时候创建哪一个登录验证类的实例，而调用者则可以免除直接创建对象的责任。简单工厂模式通过这种做法实现了对责任的分割，当系统引入新的登录方式的时候无需修改调用者。</p><h3 id="简单工厂模式的缺点"><a href="#简单工厂模式的缺点" class="headerlink" title="简单工厂模式的缺点"></a>简单工厂模式的缺点</h3><p>这个工厂类集中了所以的创建逻辑，当有复杂的多层次等级结构时，所有的业务逻辑都在这个工厂类中实现。什么时候它不能工作了，整个系统都会受到影响。</p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div><br><div style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</div>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css伪类&amp;伪元素</title>
      <link href="/css%E4%BC%AA%E7%B1%BB-%E4%BC%AA%E5%85%83%E7%B4%A0.html"/>
      <url>/css%E4%BC%AA%E7%B1%BB-%E4%BC%AA%E5%85%83%E7%B4%A0.html</url>
      
        <content type="html"><![CDATA[<p>样式规则通常根据元素在文档结构中的位置应用到元素；但是，级联样式表使用伪类和伪元素的概念，根据位于文档树之外的信息来允许格式设置。伪元素用于处理元素的子部分（例如 :first-letter 或 :first-line），而伪类根据元素名、元素属性或元素内容以外的特征（例如 :first-child、:visited 或 :hover）将元素分类。伪类通常是动态的，这意味着在用户与文档交互的同时元素可以获取或丢失伪类。</p><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>当我们指定某一元素被选中后的特殊状态时,一个 <code>CSS 伪类</code> 会被作为一个关键词添加到选择器上. 例如 <code>:hover</code> 会在当用户鼠标指针悬停在由选择器指定的元素上时应用一个样式.</p><p>伪类连同伪元素一起, 他们允许你不仅仅是根据文档DOM树中的内容对元素应用样式,而且还允许你根据诸如像导航历史这样的外部因素来应用样式(<code>:visited</code>, 为例), 同样的,可以根据内容的状态 (例如 在一些表单元素上的 <code>:checked</code> ), 或者鼠标的位置 (例如 <code>:hover</code> 让你知道是否鼠标在一个元素上悬浮)来应用样式.</p><ul><li>:link</li><li>:visited</li><li>:active</li><li>:hover</li></ul><p>链接的不同状态都可以不同的方式显示，这些状态包括：活动状态，已被访问状态，未被访问状态，和鼠标悬停状态。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>&#125;<span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: <span class="number">#00FF00</span>&#125;<span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: <span class="number">#FF00FF</span>&#125;<span class="comment">/* 鼠标移动到链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: <span class="number">#0000FF</span>&#125;<span class="comment">/* 选定的链接 */</span></span><br></pre></td></tr></table></figure></p><p>其中 :hover 不仅限于链接之上，其他元素皆可使用。</p><ul><li>:focus</li></ul><p>focus 在一个元素成为焦点时生效，用户可以通过键盘或鼠标激活焦点（例如：一次表单输入）。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.first-name</span>:focus &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-class">.last-name</span>:focus &#123; <span class="attribute">color</span>: lime; &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">input</span> class=<span class="string">"first-name"</span> value=<span class="string">"input value"</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">input</span> class=<span class="string">"last-name"</span> value=<span class="string">"input value"</span>&gt;</span><br></pre></td></tr></table></figure></p><ul><li>:first-child</li><li>:last-child</li><li>:first-of-type</li><li>:last-of-type</li></ul><p><code>:first-child</code>代表了某个元素，这个元素是它父元素的的第一个子元素.<br><code>:first-of-type</code>伪类表示在父容器内其所有种类元素的第一个元素。<br><code>:last-child</code>伪类表示其父容器内最后一个子元素。<br><code>:last-of-type</code>伪类表示父容器内其所有种类元素的最后一个元素。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">span:</span>first-<span class="class">child </span>&#123;</span><br><span class="line">    background-color: lime;</span><br><span class="line">&#125;</span><br><span class="line">ul :last-of-<span class="class">type </span>&#123;</span><br><span class="line"><span class="symbol">    color:</span> orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="params">&lt;div&gt;</span></span><br><span class="line">  <span class="params">&lt;span&gt;</span>This span is limed!<span class="params">&lt;/span&gt;</span></span><br><span class="line">  <span class="params">&lt;span&gt;</span>This span is not. :(<span class="params">&lt;/span&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;ul&gt;</span></span><br><span class="line">    <span class="params">&lt;li&gt;</span>Lorem ipsum dolor sit amet. <span class="params">&lt;span&gt;</span>Lorem ipsum dolor sit amet.<span class="params">&lt;/span&gt;</span> <span class="params">&lt;span&gt;</span>This text will be orange.<span class="params">&lt;/span&gt;</span><span class="params">&lt;/li&gt;</span></span><br><span class="line">    <span class="params">&lt;li&gt;</span>Lorem ipsum dolor sit amet.<span class="params">&lt;/li&gt;</span></span><br><span class="line">    <span class="params">&lt;li&gt;</span>This text will be orange.<span class="params">&lt;/li&gt;</span></span><br><span class="line"><span class="params">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><p>效果:<br><br><span style="background-color: lime;">This span is limed!</span> This span is not. :(</p><p>最后一个li和最后一个span元素的文本颜色将为橙色。</p><ul><li>:not</li></ul><p><code>:not</code>伪类也被称为反伪类。基本上它接收一个参数，在括号内书写另外一个“选择器”。实际上参数可以是另外一个选择器。</p><p>这里可能是链接式的，但是不会包含:not选择器。</p><p>下面示例中。:not伪类匹配参数外的元素。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">li:</span>not(.first-item) &#123;</span><br><span class="line"><span class="symbol">    color:</span> orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="params">&lt;ul&gt;</span></span><br><span class="line">    <span class="params">&lt;li class="first-item"&gt;</span>Lorem ipsum dolor sit amet.<span class="params">&lt;/li&gt;</span></span><br><span class="line">    <span class="params">&lt;li&gt;</span>Lorem ipsum dolor sit amet.<span class="params">&lt;/li&gt;</span></span><br><span class="line">    <span class="params">&lt;li&gt;</span>Lorem ipsum dolor sit amet.<span class="params">&lt;/li&gt;</span></span><br><span class="line">    <span class="params">&lt;li&gt;</span>Lorem ipsum dolor sit amet.<span class="params">&lt;/li&gt;</span></span><br><span class="line"><span class="params">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css实现计数器</title>
      <link href="/css%E5%AE%9E%E7%8E%B0%E8%AE%A1%E6%95%B0%E5%99%A8.html"/>
      <url>/css%E5%AE%9E%E7%8E%B0%E8%AE%A1%E6%95%B0%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表的每个列表项都用同样的方式标记。<br>CSS 有三种标记样式：</p><p><ul><br>   <li style="list-style-type: disc;"><code>disc</code></li><br>   <li style="list-style-type: circle;"><code>circle</code></li><br>   <li style="list-style-type: square;"><code>square</code></li><br></ul><br>示例：<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">li.</span><span class="string">open </span>&#123;<span class="built_in">list-style:</span> <span class="string">circle;</span>&#125;</span><br><span class="line"><span class="string">li.</span><span class="string">closed </span>&#123;<span class="built_in">list-style:</span> <span class="string">disc;</span>&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="string">ul&gt;</span></span><br><span class="line">  &lt;<span class="string">li </span><span class="string">class=</span><span class="string">"open"</span>&gt;<span class="string">Lorem </span><span class="string">ipsum&lt;</span>/<span class="string">li&gt;</span></span><br><span class="line">  &lt;<span class="string">li </span><span class="string">class=</span><span class="string">"closed"</span>&gt;<span class="string">Dolor </span><span class="string">sit&lt;</span>/<span class="string">li&gt;</span></span><br><span class="line">  &lt;<span class="string">li </span><span class="string">class=</span><span class="string">"closed"</span>&gt;<span class="string">Amet </span><span class="string">consectetuer&lt;</span>/<span class="string">li&gt;</span></span><br><span class="line">  &lt;<span class="string">li </span><span class="string">class=</span><span class="string">"open"</span>&gt;<span class="string">Magna </span><span class="string">aliquam&lt;</span>/<span class="string">li&gt;</span></span><br><span class="line">  &lt;<span class="string">li </span><span class="string">class=</span><span class="string">"closed"</span>&gt;<span class="string">Autem </span><span class="string">veleum&lt;</span>/<span class="string">li&gt;</span></span><br><span class="line">&lt;/<span class="string">ul&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果：</p><p><ul style="padding-right: 6em;"><br>    <li style="list-style-type: circle;">Lorem ipsum</li><br>    <li style="list-style-type: disc;">Dolor sit</li><br>    <li style="list-style-type: disc;">Amet consectetuer</li><br>    <li style="list-style-type: circle;">Magna aliquam</li><br>    <li style="list-style-type: disc;">Autem veleum</li><br></ul></p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>在有序列表中，每个列表项都被标记了不同的序号。<br>用<code>list-style</code>属性指定标记样式：</p><ul><li>decimal</li><li>lower-roman</li><li>upper-roman</li><li>lower-latin</li><li>upper-latin</li></ul><p>示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ol.info &#123;<span class="built_in">list</span>-style: upper-latin;&#125;</span><br><span class="line"></span><br><span class="line">&lt;ol <span class="class"><span class="keyword">class</span>="<span class="title">info</span>"&gt;</span></span><br><span class="line"><span class="class">  &lt;li&gt;<span class="title">ssss</span>&lt;/li&gt;</span></span><br><span class="line"><span class="class">  &lt;li&gt;<span class="title">ssss</span>&lt;/li&gt;</span></span><br><span class="line"><span class="class">  &lt;li&gt;<span class="title">ssss</span>&lt;/li&gt;</span></span><br><span class="line"><span class="class">  &lt;li&gt;<span class="title">ssss</span>&lt;/li&gt;</span></span><br><span class="line"><span class="class">  &lt;li&gt;<span class="title">ssss</span>&lt;/li&gt;</span></span><br><span class="line"><span class="class">&lt;/ol&gt;</span></span><br></pre></td></tr></table></figure></p><p>结果：</p><ol class="info"><br><li style="list-style-type: upper-latin;">ssss</li><br><li style="list-style-type: upper-latin;">ssss</li><br><li style="list-style-type: upper-latin;">ssss</li><br><li style="list-style-type: upper-latin;">ssss</li><br><li style="list-style-type: upper-latin;">ssss</li><br></ol><h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h2><p>你可以用计数器来计数任何元素，不仅是列表元素。比如，在某些文档中你可能想计数标题和段落。</p><p>要想计数，你必须定义一个计数器。</p><p>在计数开始前的某个元素上，设置 counter-reset属性以重置计数器。被计数元素的父节点是一个不错的选择。当然，任何出现在被计数元素前面的元素都可以。</p><p>设置每个需要计数的元素的counter-increment 属性为你的计数器名。</p><p>通过为选择器增加 :before 或 :after 并设置 content 属性来显示计数器。 (如上一节所示, 内容).</p><p>在content属性的值中设置 counter()，在括号内填上计数器的名字。可选的是设置计数器类型。其类型和前面一节 有序列表 中相同。</p><p>正常情况下，显示计数器的元素也会递增计数器。</p><p>示例：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span><span class="selector-class">.numbered</span> &#123;<span class="attribute">counter-reset</span>: mynum;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.numbered</span>:before &#123;</span><br><span class="line">  <span class="attribute">content</span>: counter(mynum) <span class="string">": "</span>;</span><br><span class="line">  <span class="attribute">counter-increment</span>: mynum;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">h3</span> class=<span class="string">"numbered"</span>&gt;Numbered paragraphs&lt;/h3&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"numbered"</span>&gt;Lorem ipsum&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"numbered"</span>&gt;Dolor sit&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"numbered"</span>&gt;Amet consectetuer&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"numbered"</span>&gt;Magna aliquam&lt;/p&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=<span class="string">"numbered"</span>&gt;Autem veleum&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>结果：<br>Numbered paragraphs</p><p>A: Lorem ipsum</p><p>B: Dolor sit</p><p>C: Amet consectetuer</p><p>D: Magna aliquam</p><p>E: Autem veleum</p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div><br><div style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</div>]]></content>
      
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码规范之Web</title>
      <link href="/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B9%8BWeb.html"/>
      <url>/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B9%8BWeb.html</url>
      
        <content type="html"><![CDATA[<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a><strong>命名规则</strong></h2><p>上一篇总结了 java 代码规范，规则都来源于 google 的代码规范，这一篇总结 web 前端的规范。</p><p><strong>项目命名：</strong>全部使用小写字母，用下划线隔开。例：my_project_name<br><strong>目录命名：</strong>采用项目命名规则，有复数结构时，要采用复数命名法。例：styles，images，scripts<br><strong>文件名：</strong>都采用小写字母，用下划线隔开加后缀。例：index_example.html，style_base.css，example_model.js。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><strong>HTML</strong></h2><p><strong>语法：</strong></p><ul><li>缩进使用soft tab（4个空格）；</li><li>嵌套的节点应该缩进；</li><li>在属性上，使用双引号，不要使用单引号；</li><li>属性名全小写，用中划线做分隔符；</li><li>不要在自动闭合标签结尾处使用斜线（HTML5 规范 指出他们是可选的）；</li><li>不要忽略可选的关闭标签，例：<code>&lt;/li&gt;</code> 和 <code>&lt;/body&gt;</code>。</li><li>虽然doctype不区分大小写，但是按照惯例，doctype大写<a href="http://stackoverflow.com/questions/15594877/is-there-any-benefits-to-use-uppercase-or-lowercase-letters-with-html5-tagname" target="_blank" rel="noopener">关于html属性，大写还是小写</a></li><li>应在html标签上加上lang属性。这会给语音工具和翻译工具帮助，告诉它们应当怎么去发音和翻译。更多关于 lang 属性的说明<a href="http://www.w3.org/html/wg/drafts/html/master/semantics.html#the-html-element" target="_blank" rel="noopener">在这里</a>；而微软给出了一份更加<a href="http://msdn.microsoft.com/en-us/library/ms533052(v=vs.85" target="_blank" rel="noopener">详细的语言列表</a>.aspx)，其中细分了zh-cn, zh-hk, zh-tw;</li><li>指定字符编码通常为’UTF-8’；</li><li>IE兼容模式： 用 <meta> 标签可以指定页面应该用什么版本的IE来渲染；</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-us"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- External CSS --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"code_guide.css"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- In-document CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/company_logo.png"</span> <span class="attr">alt</span>=<span class="string">"Company"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"hello-world"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- External JS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"code_guide.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- In-document JS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性顺序</strong><br>属性应该按照特定的顺序出现以保证易读性；</p><ul><li>class</li><li>id</li><li>name</li><li>data-*</li><li>src, for, type, href, value , max-length, max, min, pattern</li><li>placeholder, title, alt</li><li>aria-*, role</li><li>required, readonly, disabled</li></ul><p>class是为高可复用组件设计的，所以应处在第一位；<br>id更加具体且应该尽量少使用，所以将它放在第二位。</p><p><strong>JS生成标签</strong></p><p>在JS文件中生成标签让内容变得更难查找，更难编辑，性能更差。应该尽量避免这种情况的出现。</p><p><strong>减少标签数量</strong></p><p>在编写HTML代码时，需要尽量避免多余的父节点；<br>很多时候，需要通过迭代和重构来使HTML变得更少。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Not well --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Better --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"avatar"</span> <span class="attr">src</span>=<span class="string">"..."</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><strong>CSS</strong></h2><p><strong>缩进</strong></p><p>使用soft tab（4个空格）。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>命名</strong></p><p>类名使用小写字母，以中划线分隔<br>id采用驼峰式命名<br>scss中的变量、函数、混合、placeholder采用驼峰式命名</p><p><strong>属性简写</strong></p><p>属性简写需要你非常清楚属性值的正确顺序，而且在大多数情况下并不需要设置属性简写中包含的所有值，所以建议尽量分开声明会更加清晰；<br>margin 和 padding 相反，需要使用简写；<br>常见的属性简写包括：</p><ul><li>font</li><li>background</li><li>transition</li><li>animation</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">1s</span> linear <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line">    <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transition-property</span>: opacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>颜色</strong></p><p>颜色16进制用小写字母；<br>颜色16进制尽量用简写。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* not good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ABCDEF</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#001122</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#abcdef</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#012</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>杂项</strong></p><p>不允许有空的规则；</p><p>元素选择器用小写字母；</p><p>去掉小数点前面的0；</p><p>去掉数字中不必要的小数点和末尾的0；</p><p>属性值’0’后面不要加单位；</p><p>同个属性不同前缀的写法需要在垂直方向保持对齐，具体参照右边的写法；</p><p>无前缀的标准属性应该写在有前缀的属性后面；</p><p>不要在同个规则里出现重复的属性，如果重复的属性是连续的则没关系；</p><p>不要在一个文件里出现两个相同的规则；</p><p>用 border: 0; 代替 border: none;；</p><p>选择器不要超过4层（在scss中如果超过4层应该考虑用嵌套的方式来写）；</p><p>发布的代码中不要有 @import；</p><p>尽量少用’*’选择器。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a><strong>JavaScript</strong></h2><p><strong>缩进</strong></p><p>使用soft tab（4个空格）。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var</span> x = <span class="number">1</span>,</span><br><span class="line">    y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> (x &lt; y) &#123;</span><br><span class="line">    <span class="attribute">x</span> += <span class="number">10</span>;</span><br><span class="line">&#125; <span class="section">else</span> &#123;</span><br><span class="line">    <span class="attribute">x</span> += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>分号</strong></p><p>以下几种情况后需加分号：</p><ul><li>变量声明</li><li>表达式</li><li>return</li><li>throw</li><li>break</li><li>continue</li><li>do-while</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* var declaration */</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* expression statement */</span></span><br><span class="line">x++;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* do-while */</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125; <span class="keyword">while</span> (x &lt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>引号</strong></p><p>最外层统一使用单引号。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// not good</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="string">'foo'</span>,</span><br><span class="line">    z = <span class="string">'&lt;div id="test"&gt;&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure></p><p><strong>变量命名</strong></p><ul><li>标准变量采用驼峰式命名（除了对象的属性外，主要是考虑到cgi返回的数据）</li><li>‘ID’在变量名中全大写</li><li>‘URL’在变量名中全大写</li><li>‘Android’在变量名中大写第一个字母</li><li>‘iOS’在变量名中小写第一个，大写后两个字母</li><li>常量全大写，用下划线连接</li><li>构造函数，大写第一个字母</li><li>jquery对象必须以’$’开头命名</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thisIsMyName;</span><br><span class="line"><span class="keyword">var</span> goodID;</span><br><span class="line"><span class="keyword">var</span> reportURL;</span><br><span class="line"><span class="keyword">var</span> AndroidVersion;</span><br><span class="line"><span class="keyword">var</span> iOSVersion;</span><br><span class="line"><span class="keyword">var</span> MAX_COUNT = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// not good</span></span><br><span class="line"><span class="keyword">var</span> body = $(<span class="string">'body'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> $body = $(<span class="string">'body'</span>);</span><br></pre></td></tr></table></figure><p><strong>变量声明</strong></p><p>一个函数作用域中所有的变量声明尽量提到函数首部，用一个var声明，不允许出现两个连续的var声明。<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function doSomethingWithItems(items) &#123;</span><br><span class="line">    // use one <span class="built_in">var</span></span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">value</span> = <span class="number">10</span>,</span><br><span class="line">        result = <span class="built_in">value</span> + <span class="number">10</span>,</span><br><span class="line">        i,</span><br><span class="line">        <span class="built_in">len</span>;</span><br><span class="line"></span><br><span class="line">    for (i = <span class="number">0</span>, <span class="built_in">len</span> = items.length; i &lt; <span class="built_in">len</span>; i++) &#123;</span><br><span class="line">        result += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>函数</strong></p><p>无论是函数声明还是函数表达式，’(‘前不要空格，但’{‘前一定要有空格；</p><p>函数调用括号前不需要空格；</p><p>立即执行函数外必须包一层括号；</p><p>不要给inline function命名；</p><p>参数之间用’, ‘分隔，注意逗号后有一个空格。</p><p><strong>数组、对象</strong></p><p>对象属性名不需要加引号；</p><p>对象以缩进的形式书写，不要写在一行；</p><p>数组、对象最后不要有逗号。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">not</span> <span class="string">good</span></span><br><span class="line"><span class="string">var</span> <span class="string">a</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">'b':</span> <span class="number">1</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="string">var</span> <span class="string">a</span> <span class="string">=</span> <span class="string">&#123;b:</span> <span class="number">1</span><span class="string">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="string">var</span> <span class="string">a</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">b:</span> <span class="number">1</span><span class="string">,</span></span><br><span class="line">    <span class="attr">c:</span> <span class="number">2</span><span class="string">,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">good</span></span><br><span class="line"><span class="string">var</span> <span class="string">a</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">b:</span> <span class="number">1</span><span class="string">,</span></span><br><span class="line">    <span class="attr">c:</span> <span class="number">2</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure></p><p><strong>文档注释</strong></p><p>各类标签@param, @method等请参考usejsdoc和JSDoc Guide；</p><p>建议在以下情况下使用：</p><p>所有常量<br>所有函数<br>所有类<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @func</span><br><span class="line"> * @desc 一个带参数的函数</span><br><span class="line"> * @<span class="keyword">param</span> &#123;string&#125; <span class="keyword">a</span> - 参数a</span><br><span class="line"> * @<span class="keyword">param</span> &#123;number&#125; <span class="keyword">b</span>=1 - 参数b默认值为1</span><br><span class="line"> * @<span class="keyword">param</span> &#123;string&#125; <span class="keyword">c</span>=1 - 参数c有两种支持的取值&lt;/br&gt;1—表示x&lt;/br&gt;2—表示xx</span><br><span class="line"> * @<span class="keyword">param</span> &#123;object&#125; <span class="keyword">d</span> - 参数d为一个对象</span><br><span class="line"> * @<span class="keyword">param</span> &#123;string&#125; <span class="keyword">d</span>.e - 参数d的e属性</span><br><span class="line"> * @<span class="keyword">param</span> &#123;string&#125; <span class="keyword">d</span>.f - 参数d的f属性</span><br><span class="line"> * @<span class="keyword">param</span> &#123;object[]&#125; <span class="keyword">g</span> - 参数g为一个对象数组</span><br><span class="line"> * @<span class="keyword">param</span> &#123;string&#125; <span class="keyword">g</span>.h - 参数g数组中一项的h属性</span><br><span class="line"> * @<span class="keyword">param</span> &#123;string&#125; <span class="keyword">g</span>.i - 参数g数组中一项的i属性</span><br><span class="line"> * @<span class="keyword">param</span> &#123;string&#125; [j] - 参数j是一个可选参数</span><br><span class="line"> */</span><br><span class="line">function foo(a, b, c, d, g, j) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>null</strong></p><p>适用场景：</p><ul><li>初始化一个将来可能被赋值为对象的变量</li><li>与已经初始化的变量做比较</li><li>作为一个参数为对象的函数的调用传参</li><li><p>作为一个返回对象的函数的返回值<br>不适用场景：</p></li><li><p>不要用null来判断函数调用时有无传参</p></li><li>不要与未初始化的变量做比较</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// not good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// not mean b is not supply</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a === <span class="literal">null</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a === <span class="literal">null</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>undefined</strong></p><p>永远不要直接使用undefined进行变量判断；</p><p>使用typeof和字符串’undefined’对变量进行判断。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> not good</span><br><span class="line"><span class="keyword">if</span> <span class="params">(<span class="attr">person</span> === undefined)</span> &#123;</span><br><span class="line">    <span class="string">...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">//</span> good</span><br><span class="line"><span class="keyword">if</span> <span class="params">(typeof <span class="attr">person</span> === 'undefined')</span> &#123;</span><br><span class="line">    <span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>杂项</strong></p><p>不要混用tab和space；</p><p>不要在一处使用多个tab或space；</p><p>换行符统一用’LF’；</p><p>对上下文this的引用只能使用’_this’, ‘that’, ‘self’其中一个来命名；</p><p>行尾不要有空白字符；</p><p>switch的falling through和no default的情况一定要有注释特别说明；</p><p>不允许有空的代码块。<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// not good</span></span><br><span class="line"><span class="keyword">var</span> a   = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// not good</span></span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// good</span></span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// good</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// good</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (condition) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        ...</span><br><span class="line">    <span class="comment">// why fall through</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// why no default</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// not good with empty block</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div><br><div style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</div>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码规范之 java </title>
      <link href="/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B9%8B-java.html"/>
      <url>/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E4%B9%8B-java.html</url>
      
        <content type="html"><![CDATA[<p>对于代码规范，我是一个有洁癖的人，尤其是在 html 页面中更加注重。公司有几个哥们，写代码完全不按常理出牌，最简单的代码缩进都懒得去做，更别说美观了，每次修改bug都让人很头疼，读他们的代码就像是在吃黄连。尤其是我这种有代码洁癖的人，第一眼看上去，必然会在心里骂爹骂娘的（我去年买了个表）。今天这篇文章我们就来说说大神们的代码规范。</p><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a><strong>命名</strong></h3><p><strong>包名：</strong> 包名一般都是用公司的域名反着来写的，最后是业务名称，通用小写字母，连续的单词只是简单地连接起来，不使用下划线，例如： <code>com.google.XXX.action</code> 。<br><strong>文件名：</strong>源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为 <code>.java</code> 名称与业务相关。源文件编码格式为 <code>utf-8</code> .<br><strong>类名：</strong> 类的名字必须由大写字母开头而单词中的其他字母均为小写；如果类名称由多个单词组成，则每个单词的首字母均应为大写例如TestPage；如果类名 称中包含单词缩写，则这个所写词的每个字母均应大写，如：XMLExample,还有一点命名技巧就是由于类是设计用来代表对象的，所以在命名类时应尽量选择名词。例如： User<br><strong>方法名：</strong>方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头，使用驼峰命名法。例如： sendMessge()<br><strong>常量名：</strong>常量的名字应该都使用大写字母，并且指出该常量完整含义。如果一个常量名称由多个单词组成，则应该用下划线来分割这些单词。 例如：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> NUMBER = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ImmutableList&lt;<span class="built_in">String</span>&gt; NAMES = ImmutableList.of(<span class="string">"Ed"</span>, <span class="string">"Ann"</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Joiner COMMA_JOINER = Joiner.<span class="keyword">on</span>(<span class="string">','</span>);  <span class="comment">// because Joiner is immutable</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> SomeMutableType[] EMPTY_ARRAY = &#123;&#125;;</span><br><span class="line"><span class="keyword">enum</span> SomeEnum &#123; ENUM_CONSTANT &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">String</span> nonFinal = <span class="string">"non-final"</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> nonStatic = <span class="string">"non-static"</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; mutableCollection = <span class="keyword">new</span> HashSet&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ImmutableSet&lt;SomeMutableType&gt; mutableElements = ImmutableSet.of(mutable);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(MyClass.getName());</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">String</span>[] nonEmptyArray = &#123;<span class="string">"these"</span>, <span class="string">"can"</span>, <span class="string">"change"</span>&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>属性名：</strong>参数的命名规范和方法的命名规范相同，而且为了避免阅读程序时造成迷惑，请在尽量保证参数名称为一个单词的情况下使参数的命名尽可能明确。<br><strong>驼峰式命名法(CamelCase)：</strong><br>驼峰式命名法分大驼峰式命名法(UpperCamelCase)和小驼峰式命名法(lowerCamelCase)。 有时，我们有不只一种合理的方式将一个英语词组转换成驼峰形式，如缩略语或不寻常的结构(例如”IPv6”或”iOS”)。Google指定了以下的转换方案。</p><p>名字从散文形式(prose form)开始:</p><ul><li>把短语转换为纯ASCII码，并且移除任何单引号。例如：”Müller’s algorithm”将变成”Muellers algorithm”。</li><li><p>把这个结果切分成单词，在空格或其它标点符号(通常是连字符)处分割开。<br>推荐：如果某个单词已经有了常用的驼峰表示形式，按它的组成将它分割开(如”AdWords”将分割成”ad words”)。 需要注意的是”iOS”并不是一个真正的驼峰表示形式，因此该推荐对它并不适用。</p></li><li><p>现在将所有字母都小写(包括缩写)，然后将单词的第一个字母大写：</p><ul><li>每个单词的第一个字母都大写，来得到大驼峰式命名。</li><li>除了第一个单词，每个单词的第一个字母都大写，来得到小驼峰式命名。</li></ul></li><li>最后将所有的单词连接起来得到一个标识符。<br>例如：<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Prose form                Correct               Incorrect</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">"XML HTTP request"        XmlHttpRequest        XMLHTTPRequest</span><br><span class="line">"new customer ID"         newCustomerId         newCustomerID</span><br><span class="line">"inner stopwatch"         innerStopwatch        innerStopWatch</span><br><span class="line">"supports IPv6 on iOS?"   supportsIpv6OnIos     supportsIPv6OnIOS</span><br><span class="line">"YouTube importer"        YouTubeImporter</span><br><span class="line"><span class="code">                          YoutubeImporter*</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>javadoc注释：</strong> Java除了可以采用我们常见的注释方式之外，Java语言规范还定义了一种特殊的注释，也就是我们所说的Javadoc注释，它是用来记录我们代 码中的API的。Javadoc注释是一种多行注释，以结束，注释可以包含一些HTML标记符和专门的关键词。使用Javadoc 注释的好处是编写的注释可以被自动转为在线文档，省去了单独编写程序文档的麻烦。例如：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Multiple lines of Javadoc text are written here,</span></span><br><span class="line"><span class="comment"> * wrapped normally...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">(<span class="keyword">String</span> p1)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure></p><p>至少在每个public类及它的每个public和protected成员处使用Javadoc，</p><h3 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a><strong>编码规范</strong></h3><p><strong>package语句：</strong> <code>package</code> 语句不换行，(即package语句写在一行里)<br><strong>import语句：</strong> 一般不使用通配符，即：<code>import java.util.*;</code><br><code>import</code>语句不换行(每个import语句独立成行)。<br><strong>缩进：</strong> 缩进一个 tab<br><strong>大括号：</strong> 大括号与if, else, for, do, while语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span><span class="params">(value)</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>列限制：</strong> 80或100，一个项目可以选择一行80个字符或100个字符的列限制，除了下述例外，任何一行如果超过这个字符数限制，必须自动换行。自动换行时，第一行后的每一行至少比第一行多缩进4个空格。<br><strong>数组：</strong> 以下写法都是OK的<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">new int[] &#123;</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">new int[] &#123;</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">new int[] &#123;</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">new int[]</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></p><p><strong>switch语句：</strong>在一个switch块内，每个语句组要么通过break, continue, return或抛出异常来终止，要么通过一条注释来说明程序将继续执行到下一个语句组， 任何能表达这个意思的注释都是OK的(典型的是用// fall through)。这个特殊的注释并不需要在最后一个语句组(一般是default)中出现。示例：<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="keyword">input</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    prepareOneOrTwo()<span class="comment">;</span></span><br><span class="line">    <span class="comment">// fall through</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    handleOneTwoOrThree()<span class="comment">;</span></span><br><span class="line">    <span class="keyword">break</span><span class="comment">;</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    handleLargeNumber(<span class="keyword">input</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注解(Annotations)：</strong>注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。这些换行不属于自动换行(第4.5节，自动换行)，因此缩进级别不变。例如：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Override</span></span><br><span class="line"><span class="variable">@Nullable</span></span><br><span class="line">public String getNameIfPresent() &#123; ... &#125;</span><br></pre></td></tr></table></figure></p><p><strong>注释：</strong>块注释与其周围的代码在同一缩进级别。它们可以是<code>/* ... */</code>风格，也可以是<code>// ...</code>风格。对于多行的<code>/* ... */</code>注释，后续行必须从<code>*开始， 并且与前一行的*</code>对齐。以下示例注释都是OK的。<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * This is          <span class="comment">// And so           /* Or you can</span></span><br><span class="line"> * okay.            <span class="comment">// is this.          * even do this. */</span></span><br><span class="line"> */</span><br></pre></td></tr></table></figure></p><h3 id="捕获的异常：不能忽视"><a href="#捕获的异常：不能忽视" class="headerlink" title="捕获的异常：不能忽视"></a><strong>捕获的异常：不能忽视</strong></h3><p>除了下面的例子，对捕获的异常不做响应是极少正确的。(典型的响应方式是打印日志，或者如果它被认为是不可能的，则把它当作一个AssertionError重新抛出。)</p><p>如果它确实是不需要在catch块中做任何响应，需要做注释加以说明(如下面的例子)。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">int</span> i = Integer.parseInt(response);</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="title">handleNumericResponse</span><span class="params">(i)</span></span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException ok) &#123;</span><br><span class="line">  <span class="comment">// it's not numeric; that's fine, just continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">return</span> <span class="title">handleTextResponse</span><span class="params">(response)</span></span>;</span><br></pre></td></tr></table></figure></p><p>例外：在测试中，如果一个捕获的异常被命名为expected，则它可以被不加注释地忽略。下面是一种非常常见的情形，用以确保所测试的方法会抛出一个期望中的异常， 因此在这里就没有必要加注释。<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  emptyStack.pop<span class="comment">()</span>;</span><br><span class="line">  fail<span class="comment">()</span>;</span><br><span class="line">&#125; catch <span class="comment">(NoSuchElementException expected)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div><br><div style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</div>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome插件，吐血推荐</title>
      <link href="/chrome%E6%8F%92%E4%BB%B6%EF%BC%8C%E5%90%90%E8%A1%80%E6%8E%A8%E8%8D%90.html"/>
      <url>/chrome%E6%8F%92%E4%BB%B6%EF%BC%8C%E5%90%90%E8%A1%80%E6%8E%A8%E8%8D%90.html</url>
      
        <content type="html"><![CDATA[<p>今天是1024程序员节，祝各位大神节日快乐，福利就不发了，请自行google ，好了，言归正传。<br>当说起 chrome 插件时， 谷歌百度一搜，众说纷纭说有谁的喜好，今天我也推荐一下我使用的 chrome 插件， 注意这里是 <strong>吐血推荐</strong>。</p><h3 id="Adblock-Plus"><a href="#Adblock-Plus" class="headerlink" title="Adblock Plus"></a><strong><a href="https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb" target="_blank" rel="noopener">Adblock Plus</a></strong></h3><p>该插件的介绍是这样说的：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">超过<span class="number">5000</span>万人使用，免费的广告拦截器，可阻止所有烦人的广告及恶意软件和跟踪。</span><br><span class="line">享受没有恼人广告的网络世界。</span><br></pre></td></tr></table></figure></p><p>正如它的介绍，你还在为浏览网页时突然弹出诱人的图片而尴尬吗？你还在为一些烦人的广告而烦恼吗？那么你就 out 了，来吧，在你的 chrome 上安装 Adblock Plus 吧。</p><p>chrome 应用商店中有很多拦截广告的插件，但是好多都是收费的，对于一个穷屌丝来说，免费万岁。</p><h3 id="Save-to-Pocket"><a href="#Save-to-Pocket" class="headerlink" title="Save to Pocket"></a><strong><a href="https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj" target="_blank" rel="noopener">Save to Pocket</a></strong></h3><p>对于喜欢淘金的童鞋，这个插件特别有用，当我们看到一篇技术文章又特别感兴趣的时候，轻轻点击 chrome 右上角 Save to Pocket 的图标，就会将这篇文章保存在你的帐号中，（亮点在这里）并且会自动同步到你的其他设备，当然前提是你要安装 pocket 客户端，对于现在移动端碎片化阅读时代，你可以随时看到你收藏 的文章，而不是被朋友圈的微商广告而绑架。</p><h3 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a><strong><a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei" target="_blank" rel="noopener">LiveReload</a></strong></h3><p>前端的同学注意啦，当我们在切页面时，还在为 IDE 和 chrome 之间来回切换，并且每次拿起鼠标点击刷新按钮或者狂按F5而烦恼吗，LiveReload 可以帮你节省这点时间，安装这个插件，当你在你的 IDE 中按下 <code>ctrl+s</code> 时，你的浏览器会自动刷新，方便你看效果，提高开发效率，这样是不是高逼格了不少啊。</p><p>当然这需要对你的 IDE 做点手脚，对 sublime-text 而言，需要安装 LiveReload 插件，使用是开启即可。对于 atom 而言，它已经集成了LiveReload 这个插件，只需开启就 OK 了。对于 vs code 而言，微软商店中没有这个插件，不知道怎么使用，又知道的童鞋可以留言或者直接联系我 Email: <a href="mailto:dd_dreams@163.com" target="_blank" rel="noopener">dd_dreams@163.com</a> ， 微信： Dd_ （ding289750872）。</p><h3 id="JavaScript-Errors-Notifier"><a href="#JavaScript-Errors-Notifier" class="headerlink" title="JavaScript Errors Notifier"></a><strong><a href="https://chrome.google.com/webstore/detail/javascript-errors-notifie/jafmfknfnkoekkdocjiaipcnmkklaajd" target="_blank" rel="noopener">JavaScript Errors Notifier</a></strong></h3><p>这个插件在开发时也很有用，尤其在调试 js 时，我们不用打开 chrome devtools 来查看 js 报什么错误，它会在浏览器右下方弹出错误信息<br><img src="/images/20161024/20161022111524.png" alt="这里写图片描述"></p><h3 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a><strong><a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca" target="_blank" rel="noopener">Momentum</a></strong></h3><p>这个是美化 chrome 新选项卡的插件，先看看我今天美图<br><img src="/images/20161024/20161022111917.png" alt="这里写图片描述"><br>是不是比以前的大白页好看多了，有的人也喜欢用<strong><a href="https://chrome.google.com/webstore/detail/%E6%8E%98%E9%87%91/lecdifefmmfjnjjinhaennhdlmcaeeeb" target="_blank" rel="noopener">掘金</a></strong> 这个插件，它也是优化了 chrome 新选项卡，不过它推荐了 github 和很多社区上一些优质的项目及技术文章，也是不错的一个插件，贴个截图<br><img src="/images/20161024/20161022112752.png" alt="这里写图片描述"></p><h3 id="有道词典Chrome划词插件"><a href="#有道词典Chrome划词插件" class="headerlink" title="有道词典Chrome划词插件"></a><strong><a href="https://chrome.google.com/webstore/detail/%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8chrome%E5%88%92%E8%AF%8D%E6%8F%92%E4%BB%B6/eopjamdnofihpioajgfdikhhbobonhbb" target="_blank" rel="noopener">有道词典Chrome划词插件</a></strong></h3><p>哈哈，对于我这种英语屌丝来说还是装一个翻译的插件吧，这有助于浏览英文网站，和众多翻译软件类似，有划词翻译，指词翻译（我一般是关闭指词翻译的）的功能，总之是很好用的。</p><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div><br><div style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</div>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坚持久了，就成为习惯了</title>
      <link href="/%E5%9D%9A%E6%8C%81%E4%B9%85%E4%BA%86%EF%BC%8C%E5%B0%B1%E6%88%90%E4%B8%BA%E4%B9%A0%E6%83%AF%E4%BA%86.html"/>
      <url>/%E5%9D%9A%E6%8C%81%E4%B9%85%E4%BA%86%EF%BC%8C%E5%B0%B1%E6%88%90%E4%B8%BA%E4%B9%A0%E6%83%AF%E4%BA%86.html</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;这篇文章的思绪来源于一个同样是从事IT行业的大牛人物，同样在用微信公众号推送技术文章，同样喜于分享，勤于积累，感兴趣的童鞋可以关注它的微信公众号：AndroidDeveloper，id：googdev（这里不是广告哦）。昨天看到他的一篇文章<a href="http://stormzhang.com/2016/10/10/keep-write-blog/" target="_blank" rel="noopener">每天能写文章（博客、微信公众号）的人是怎么安排时间的？</a> 和自己的初衷是一样一样的，于是就有了这篇文章，也是为自己加油大气。</p><p>&emsp;&emsp;在学校的时候各大网站都推出了自己的博客，我也在新浪，网易，CSDN，博客园等开通了自己的博客，但那都是因为好玩，偶尔上去随便看看，没有认真的写过博文，也没有好好维护过。自从上班以来，接触的新技术，新知识越来越多，而且在网上也出现了越来越多的垃圾软文，对于一个新手来说，会走很多的弯路，大部分原因来源于这些垃圾软文，因此我慢慢养成了习惯，上网查东西，都是去官网或者是比较正规的技术社区，而且将惯用的搜索引擎从百度换成了必应和google，也决定将写博客作为自己的一种习惯。</p><p>&emsp;&emsp; 刚开始是在<a href="http://blog.csdn.net/u012989850" target="_blank" rel="noopener">CSDN</a>上写，现在利用 hexo 和 github 搭建了自己的博客<a href="dddreams.github.io">zhiheng`blogs</a> 最近又开了微信公众号：zhiheng博客，id: ddAnswer。折腾了这么多天，现在万事俱备，只欠东风了，那就是如何坚持写下去，这的却是个很困难的事，而且要写出有质量的文章那就更不容易了。最近发表的几篇文章都是通过一些技术社区和书籍上摘来的，以前看着别人每天更新博客觉得挺简单的，现在自己写起来才真的感觉到没什么可以写的，不过还是要坚持写下去，让这一种坚持成为一中习惯。<br>加油，，，Dd_ <span>~_~</span><div style="text-align:center;margin:0;" markdown="1"><img src="/img/ddAnswer.jpg" alt="ddAnswer" style="margin:0 auto;"></div></p><div style="text-align: center;margin:0;">更多文章请关注微信公众号： zhiheng博客</div>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html css 垂直居中（二）</title>
      <link href="/html-css-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
      <url>/html-css-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%EF%BC%88%E4%BA%8C%EF%BC%89.html</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://dddreams.github.io/2016/09/26/html-css-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/">html css 垂直居中（一）</a> 中介绍了<a href="http://www.ituring.com.cn/book/1695" target="_blank" rel="noopener">《css 揭秘》</a> 中的垂直居中的方法，很显然在很多情况下是可以解决的，也是最好的解决方案，但是在某些特定的情况下还是要根据具体的情况而选择合适的方法，这篇同样介绍了一些垂直居中的方法，分享于大家兵记录。</p><h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a><strong>line-height</strong></h3><p>line-heigth 属性是针对：父元素高度确定的单行文本（内联元素）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//css</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.child</span>&#123;</span></span><br><span class="line">line-height: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种方式虽然简单但缺点很明显，仅限于单行文本，而且文字超出容器不会自适应。但它只能用于 inline 元素</p><h3 id="table-cell"><a href="#table-cell" class="headerlink" title="table-cell"></a><strong>table-cell</strong></h3><p>父元素高度确定的多行文本（内联元素）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>; <span class="comment">/* maybe any height */</span></span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置 display: table-cell; 也可以实现垂直居中，但是也存在很多不足，文字超出容器不会自适应。但它只能用于 inline 元素</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a><strong>伪元素</strong></h3><p>为一个元素添加为元素，相当于为当前元素添加了子元素，因此为了生成一个 100% 高度的伪元素，我们需要对父元素添加伪元素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用伪元素的缺点在于，当我们要使用父元素的伪元素做一些操作时，同时又让其垂直居中，那我们就无能为力了。</p><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a><strong>transform</strong></h3><p>使用 transform 可以用 translateY(-50%) 来达到 - height/2 的目的，而不需要知道居中元素的高度。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      transform 实现垂直居中</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//css</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line">  border: 1px solid blue;</span><br><span class="line"><span class="css">  <span class="selector-tag">height</span>: 200<span class="selector-tag">px</span>; <span class="comment">/* maybe any height */</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.vertical</span> &#123;</span></span><br><span class="line">  position: relative;</span><br><span class="line">  top: 50%;</span><br><span class="line">  transform: translateY(-50%);</span><br><span class="line">  border: 1px solid green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="flexbox"><a href="#flexbox" class="headerlink" title="flexbox"></a><strong>flexbox</strong></h3><p>最终我们还是要用flexbox，在前面一篇文章中也提到了flexbox，在此提到加深记忆。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>flexbox 垂直居中111 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>flexbox 垂直居中222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//css</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  justify-content: center;</span><br><span class="line"></span><br><span class="line">  height: 300px;</span><br><span class="line">  border: 1px solid blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">  border: 1px solid green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是 CSS3 的支持问题。例如 IE 需要 IE11 才能支持。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Css </tag>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作一年之后</title>
      <link href="/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E4%B9%8B%E5%90%8E.html"/>
      <url>/%E5%B7%A5%E4%BD%9C%E4%B8%80%E5%B9%B4%E4%B9%8B%E5%90%8E.html</url>
      
        <content type="html"><![CDATA[<p>随着国庆节的结束，我来万维也整一年了，从此真正的踏上了程序员的路，这一年来，总的来说，除了加班还是加班，苦逼的不要不要的。</p><h3 id="踏入前端"><a href="#踏入前端" class="headerlink" title="踏入前端"></a><strong>踏入前端</strong></h3><p>来公司不久，就参加了公司的前端课题组，对于前端之前的认识只是 html + css + js ，2015年是前端发展的重要的一年，随着移动互联网的发展，用户体验变得比以往更重要，<a href="https://en.wikipedia.org/wiki/Responsive_web_design" target="_blank" rel="noopener">响应式页面设计（RWD ）</a>也成为网站的必备特性，RWD 能让最终用户在不同尺寸的设备上访问网站，包括手机和平板浏览器。还有充满创意的布局方式，大图片的背景，文字各式各样的排版等都推进着前端的发展。对于设计响应式的页面，研究过一些，由于在实际工作中不怎么用到，也只是停留在入门阶段。下面是这一年来接触到的新技术和对前端的更深层次的认识。</p><h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a><strong>Nodejs</strong></h3><p>不得不说的 nodejs ，敢说 nodejs 是这一年来最火的技术没有之一，在来公司之前对于 nodejs 只是概念性的。由于它的火爆，我也尝试性的写了 <a href="https://github.com/dddreams/learn-node" target="_blank" rel="noopener">demo</a> ,虽然不是很完善，但也是麻雀虽小，五脏俱全。基于 nodejs 延伸的框架 <a href="http://expressjs.com/" target="_blank" rel="noopener">express</a> 和 <a href="http://koajs.com/" target="_blank" rel="noopener">koa</a> 都尝试了一下，也仅仅是入门，往后如果要用到还需要大量学习。</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a><strong>框架</strong></h3><p>这一年火起来的很多前端框架，facebook 的 react，google 的 angularjs，也是火的一塌糊涂，我荣幸的体验了 react ，它的却是一个非常棒的框架，不愧是 facebook 的杰作， 还有<a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">react native</a> 移动端的框架，一直想体验的，但是由于部分原因没有进行尝试，今后肯定会尝试他的。</p><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a><strong>ES6</strong></h3><p>es6 的发布也是在今年，它增加了很多简单实用的特性，在众多编程语言中相信 js 会占领一大部分的天下。由于部分浏览器还不能对 es6 完全支持，公司内部也只是一小部分的人使用，当然我是其中之一。对于 es6 也需要进一步探索和使用。</p><h3 id="自动化构建工具"><a href="#自动化构建工具" class="headerlink" title="自动化构建工具"></a><strong>自动化构建工具</strong></h3><p>前端自动化构建工具 <a href="http://gulpjs.com/" target="_blank" rel="noopener">gulp</a> 和 <a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">webpack</a> 这里给出的是 github 上的地址，webpack 的官网实看着实在有点头疼。我自己也搭建了 gulp 和 webpack 的环境，不是很完善，仅仅添加了在工作中用到的 es6 基于babel 转换为 es5 和 less 转 css 的插件。地址： <a href="https://github.com/dddreams/learn-gulp" target="_blank" rel="noopener">learn-gulp</a> <a href="https://github.com/dddreams/learn-webpack" target="_blank" rel="noopener">learn-webpak</a> .</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h3><p>总之，这一年收货不多，各种新技术层次不群，每种都在尝试，但是没有用到实际的项目中， 这也需要在今后更加努力学习新技术，并用到实际项目中来，继续加油~<em>~  Dd</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html css 垂直居中(一)</title>
      <link href="/html-css-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html"/>
      <url>/html-css-%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD.html</url>
      
        <content type="html"><![CDATA[<p>下面是《css揭秘》一书中提出的方案，站在巨人的肩膀上，记录并分享给大家</p><p>对于水平居中的，如果是内联元素，在它父级元素上设置<code>text-align:center;</code>,如果是块级元素，可以使用<code>margin:auto;</code>来让其水平居中。然而垂直居中就没那么简单了，由于场景不同，它的解决方案也多种多样。</p><h3 id="绝对定位的方式"><a href="#绝对定位的方式" class="headerlink" title="绝对定位的方式"></a>绝对定位的方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">3em</span>; <span class="comment">/* 6/2 = 3 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">9em</span>; <span class="comment">/* 18/2 = 9 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">6em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样有一个弊端，就是要有固定的宽高；还有两种方式与上面的实现是相同的。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">3em</span>);</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">9em</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">6em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="视窗单位方案"><a href="#视窗单位方案" class="headerlink" title="视窗单位方案"></a>视窗单位方案</h3><p><a href="https://www.w3.org/TR/css-values-3/#viewport-relative-lengths" target="_blank" rel="noopener">CSS Values and Units Level 3</a>定义了一种新的单位，称为相对视窗(<code>viewport-relative</code>)长度单位。</p><ul><li><code>vw</code>是相对于视窗的宽度。与你预期刚好相反,<code>1vw</code>相当于视窗宽度的<code>1%</code>，而不是<code>100%</code></li><li>与<code>vw</code>相似的是，<code>1vh</code>相当于视窗高度的<code>1%</code></li><li>如果视窗的宽度小于高度，<code>1vmin</code>等于<code>1vw</code>，反之，如果视窗宽度大于高度，<code>1vmin</code>等于<code>1vh</code></li><li>如果视窗的宽度大于高度，<code>1vmax</code>等于<code>1vw</code>，反之，如果视窗宽度小于高度，<code>1vmax</code>等于<code>1vh</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50vh</span> auto <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flexbox的解决方案"><a href="#Flexbox的解决方案" class="headerlink" title="Flexbox的解决方案"></a>Flexbox的解决方案</h3><p>这无疑是最好的解决方案，因Flexbox的出现就是为了解决这样的问题。其他解决方案仍然可用，唯一原因是他们能更好的在浏览器上呈现，不过Flexbox在现代浏览器也得到更好的好支持。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Flexbox的另一个优点是，可以让匿名容器垂直居中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>Center me, please!<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们可以在<body>和需要居中的元素<main>使用相同的属性，同时使用margin:auto做为备用，以于优雅降级。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></main></body></p><h3 id="新特性：对齐所有东西"><a href="#新特性：对齐所有东西" class="headerlink" title="新特性：对齐所有东西"></a>新特性：对齐所有东西</h3><p><a href="http://www.w3.org/TR/css-align-3/" target="_blank" rel="noopener">CSS Box Alignment Level 3</a>已经在计划，在未来我们甚至不需要使用不同的布局模式就能非常容易的实现垂直居中，我们只需要像下面这样做：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">align-self</span>: center;</span><br></pre></td></tr></table></figure></p><p>不管元素上使用其他样式，这个将来都能运行。这听起来令人难以置信，但将来在浏览器中是可以渲染的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/Test.html"/>
      <url>/Test.html</url>
      
        <content type="html"><![CDATA[<p>首次搭建，也花了不少时间，这是一个测试的文章，</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">test</span> = '<span class="keyword">test</span>';</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">test</span>); <span class="comment">// test</span></span><br><span class="line"></span><br><span class="line">function fun(<span class="keyword">test</span>)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">test</span>); <span class="comment">// test</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
